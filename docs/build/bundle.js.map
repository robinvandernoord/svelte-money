{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/nerdamer/nerdamer.core.js","../../node_modules/nerdamer/Calculus.js","../../node_modules/nerdamer/Algebra.js","../../node_modules/nerdamer/Solve.js","../../node_modules/nerdamer/Extra.js","../../node_modules/nerdamer/all.js","../../src/stackoverflow.js","../../src/magic.js","../../node_modules/svelte/store/index.mjs","../../node_modules/svelte/easing/index.mjs","../../node_modules/svelte/motion/index.mjs","../../src/Field.svelte","../../src/debounce.js","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true && boolean_attributes.has(name) ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.46.4' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\r\n\r\n/* global trig, trigh, Infinity, define, arguments2Array, NaN */\r\n//externals ====================================================================\r\n/* BigInterger.js v1.6.40 https://github.com/peterolson/BigInteger.js/blob/master/LICENSE */\r\n//var nerdamerBigInt = typeof nerdamerBigInt !== 'undefined' ? nerdamerBigInt : require(\"big-integer\");\r\n/* big.js v5.2.2 https://github.com/MikeMcl/big.js/LICENCE */\r\n//var nerdamerBigDecimal = typeof nerdamerBigDecimal !== 'undefined' ? nerdamerBigDecimal : require('big.js');\r\n\r\nvar nerdamer = (function (imports) {\r\n    \"use strict\"; \r\n\r\n//version ======================================================================\r\n    var version = '1.1.13';\r\n\r\n//inits ========================================================================\r\n    var _ = new Parser(); //nerdamer's parser\r\n\r\n    //import bigInt\r\n    var bigInt = imports.bigInt;\r\n    var bigDec = imports.bigDec;\r\n\r\n    //set the precision to js precision\r\n    bigDec.set({\r\n        precision: 250\r\n    });\r\n\r\n    var Groups = {};\r\n\r\n    //container of pregenerated primes\r\n    var PRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113\r\n                , 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,\r\n        257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397,\r\n        401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557,\r\n        563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,\r\n        709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863,\r\n        877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031,\r\n        1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171,\r\n        1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303,\r\n        1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471,\r\n        1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607,\r\n        1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753,\r\n        1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931,\r\n        1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083];\r\n\r\n//Settings =====================================================================\r\n    var CUSTOM_OPERATORS = {};\r\n\r\n    var Settings = {\r\n        //Enables/Disables call peekers. False means callPeekers are disabled and true means callPeekers are enabled.\r\n        callPeekers: false,\r\n\r\n        //the max number up to which to cache primes. Making this too high causes performance issues\r\n        init_primes: 1000,\r\n\r\n        exclude: [],\r\n        //If you don't care about division by zero for example then this can be set to true.\r\n        //Has some nasty side effects so choose carefully.\r\n        suppress_errors: false,\r\n        //the global used to invoke the libary to parse to a number. Normally cos(9) for example returns\r\n        //cos(9) for convenience but parse to number will always try to return a number if set to true.\r\n        PARSE2NUMBER: false,\r\n        //this flag forces the a clone to be returned when add, subtract, etc... is called\r\n        SAFE: false,\r\n        //the symbol to use for imaginary symbols\r\n        IMAGINARY: 'i',\r\n        //the modules used to link numeric function holders\r\n        FUNCTION_MODULES: [Math],\r\n        //Allow certain characters\r\n        ALLOW_CHARS: ['π'],\r\n        //Allow nerdamer to convert multi-character variables\r\n        USE_MULTICHARACTER_VARS: true,\r\n        //Allow changing of power operator\r\n        POWER_OPERATOR: '^',\r\n        //The variable validation regex\r\n        //VALIDATION_REGEX: /^[a-z_][a-z\\d\\_]*$/i\r\n        VALIDATION_REGEX: /^[a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ∞][0-9a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]*$/i,\r\n        // The regex used to determine which characters should be included in implied multiplication\r\n        IMPLIED_MULTIPLICATION_REGEX: /([\\+\\-\\/\\*]*[0-9]+)([a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]+[\\+\\-\\/\\*]*)/gi,\r\n        //Aliases\r\n        ALIASES: {\r\n            'π': 'pi',\r\n            '∞': 'Infinity'\r\n        },\r\n        POSITIVE_MULTIPLIERS: false,\r\n        //Cached items\r\n        CACHE: {},\r\n        //Print out warnings or not\r\n        SILENCE_WARNINGS: false,\r\n        // Precision\r\n        PRECISION: 21,\r\n        // The Expression defaults to this value for decimal places\r\n        EXPRESSION_DECP: 19,\r\n        // The text function defaults to this value for decimal places\r\n        DEFAULT_DECP: 16,\r\n        //function mappings\r\n        VECTOR: 'vector',\r\n        PARENTHESIS: 'parens',\r\n        SQRT: 'sqrt',\r\n        ABS: 'abs',\r\n        FACTORIAL: 'factorial',\r\n        DOUBLEFACTORIAL: 'dfactorial',\r\n        //reference pi and e\r\n        LONG_PI: '3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214' +\r\n                '808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196',\r\n        LONG_E: '2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466' +\r\n                '39193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901',\r\n        PI: Math.PI,\r\n        E: Math.E,\r\n        LOG: 'log',\r\n        LOG10: 'log10',\r\n        LOG10_LATEX: 'log_{10}',\r\n        MAX_EXP: 200000,\r\n        //The number of scientific place to round to\r\n        SCIENTIFIC_MAX_DECIMAL_PLACES: 14,\r\n        //True if ints should not be converted to\r\n        SCIENTIFIC_IGNORE_ZERO_EXPONENTS: true\r\n    };\r\n\r\n    (function () {\r\n        Settings.CACHE.roots = {};\r\n        var x = 40,\r\n                y = 40;\r\n        for(var i = 2; i <= x; i++) {\r\n            for(var j = 2; j <= y; j++) {\r\n                var nthpow = bigInt(i).pow(j);\r\n                Settings.CACHE.roots[nthpow + '-' + j] = i;\r\n            }\r\n        }\r\n    })();\r\n\r\n    //Add the groups. These have been reorganized as of v0.5.1 to make CP the highest group\r\n    //The groups that help with organizing during parsing. Note that for FN is still a function even\r\n    //when it's raised to a symbol, which typically results in an EX\r\n    var N = Groups.N = 1, // A number\r\n            P = Groups.P = 2, // A number with a rational power e.g. 2^(3/5).\r\n            S = Groups.S = 3, // A single variable e.g. x.\r\n            EX = Groups.EX = 4, // An exponential\r\n            FN = Groups.FN = 5, // A function\r\n            PL = Groups.PL = 6, // A symbol/expression having same name with different powers e.g. 1/x + x^2\r\n            CB = Groups.CB = 7, // A symbol/expression composed of one or more variables through multiplication e.g. x*y\r\n            CP = Groups.CP = 8; // A symbol/expression composed of one variable and any other symbol or number x+1 or x+y\r\n\r\n    var CONST_HASH = Settings.CONST_HASH = '#';\r\n\r\n    var PARENTHESIS = Settings.PARENTHESIS;\r\n\r\n    var SQRT = Settings.SQRT;\r\n\r\n    var ABS = Settings.ABS;\r\n\r\n    var FACTORIAL = Settings.FACTORIAL;\r\n\r\n    var DOUBLEFACTORIAL = Settings.DOUBLEFACTORIAL;\r\n\r\n    //the storage container \"memory\" for parsed expressions\r\n    var EXPRESSIONS = [];\r\n\r\n    //variables\r\n    var VARS = {};\r\n\r\n    //the container used to store all the reserved functions\r\n    var RESERVED = [];\r\n\r\n    var WARNINGS = [];\r\n\r\n    /**\r\n     * Use this when errors are suppressible\r\n     * @param {String} msg\r\n     * @param {object} ErrorObj\r\n     */\r\n    var err = function (msg, ErrorObj) {\r\n        if(!Settings.suppress_errors) {\r\n            if(ErrorObj)\r\n                throw new ErrorObj(msg);\r\n            else\r\n                throw new Error(msg);\r\n        }\r\n    };\r\n\r\n//Utils ========================================================================\r\n    var customError = function (name) {\r\n        var E = function (message) {\r\n            this.name = name;\r\n            this.message = message !== undefined ? message : '';\r\n            var error = new Error(this.message);\r\n            error.name = this.name;\r\n            this.stack = error.stack;\r\n        }; //create an empty error\r\n        E.prototype = Object.create(Error.prototype);\r\n        return E;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if value is one of nerdamer's reserved names\r\n     * @param {String} value\r\n     * @return boolean\r\n     */\r\n    var isReserved = function (value) {\r\n        return RESERVED.indexOf(value) !== -1;\r\n    };\r\n\r\n    /**\r\n     * Checks to see that all symbols in array are the same\r\n     * @param {Symbol[]} arr\r\n     * @returns {bool}\r\n     */\r\n    var allSame = function (arr) {\r\n        var last = arr[0];\r\n        for(var i = 1, l = arr.length; i < l; i++)\r\n            if(!arr[i].equals(last))\r\n                return false;\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Used to pass warnings or low severity errors about the library\r\n     * @param msg\r\n     */\r\n    var warn = function (msg) {\r\n        WARNINGS.push(msg);\r\n        if(Settings.SHOW_WARNINGS && console && console.warn) {\r\n            console.warn(msg);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Enforces rule: \"must start with a letter or underscore and\r\n     * can have any number of underscores, letters, and numbers thereafter.\"\r\n     * @param name The name of the symbol being checked\r\n     * @param {String} typ - The type of symbols that's being validated\r\n     * @throws {Exception}  - Throws an exception on fail\r\n     */\r\n    var validateName = function (name, typ) {\r\n        typ = typ || 'variable';\r\n        if(Settings.ALLOW_CHARS.indexOf(name) !== -1)\r\n            return;\r\n        var regex = Settings.VALIDATION_REGEX;\r\n        if(!(regex.test(name))) {\r\n            throw new InvalidVariableNameError(name + ' is not a valid ' + typ + ' name');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Convert number from scientific format to decimal format\r\n     * @param {Number} num\r\n     */\r\n    var scientificToDecimal = function (num) {\r\n        var nsign = Math.sign(num);\r\n        //remove the sign\r\n        num = Math.abs(num);\r\n        //if the number is in scientific notation remove it\r\n        if(/\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num)) {\r\n            var zero = '0',\r\n                    parts = String(num).toLowerCase().split('e'), //split into coeff and exponent\r\n                    e = parts.pop(), //store the exponential part\r\n                    l = Math.abs(e), //get the number of zeros\r\n                    sign = e / l,\r\n                    coeff_array = parts[0].split('.');\r\n            if(sign === -1) {\r\n                l = l - coeff_array[0].length;\r\n                if(l < 0) {\r\n                    num = coeff_array[0].slice(0, l) + '.' + coeff_array[0].slice(l) + (coeff_array.length === 2 ? coeff_array[1] : '');\r\n                }\r\n                else {\r\n                    num = zero + '.' + new Array(l + 1).join(zero) + coeff_array.join('');\r\n                }\r\n            }\r\n            else {\r\n                var dec = coeff_array[1];\r\n                if(dec)\r\n                    l = l - dec.length;\r\n                if(l < 0) {\r\n                    num = coeff_array[0] + dec.slice(0, l) + '.' + dec.slice(l);\r\n                }\r\n                else {\r\n                    num = coeff_array.join('') + new Array(l + 1).join(zero);\r\n                }\r\n            }\r\n        }\r\n\r\n        return nsign < 0 ? '-' + num : num;\r\n    };\r\n    /**\r\n     * Checks if number is a prime number\r\n     * @param {Number} n - the number to be checked\r\n     */\r\n    var isPrime = function (n) {\r\n        var q = Math.floor(Math.sqrt(n));\r\n        for(var i = 2; i <= q; i++) {\r\n            if(n % i === 0)\r\n                return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Generates an object with known variable value for evaluation\r\n     * @param {String} variable\r\n     * @param {any} value Any stringifyable object\r\n     * @returns {Object} \r\n     */\r\n    var knownVariable = function (variable, value) {\r\n        var o = {};\r\n        o[variable] = value;\r\n        return o;\r\n    };\r\n\r\n    /**\r\n     * Checks if n is a number\r\n     * @param {any} n\r\n     */\r\n    var isNumber = function (n) {\r\n        return /^\\d+\\.?\\d*$/.test(n);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if an array contains only numeric values\r\n     * @param {Array} arr\r\n     */\r\n    var allNumeric = function (arr) {\r\n        for(var i = 0; i < arr.length; i++)\r\n            if(!isNumber(arr[i]))\r\n                return false;\r\n        return true;\r\n    };\r\n    /**\r\n     * Checks to see if a number or Symbol is a fraction\r\n     * @param {Number|Symbol} num\r\n     * @returns {boolean}\r\n     */\r\n    var isFraction = function (num) {\r\n        if(isSymbol(num))\r\n            return isFraction(num.multiplier.toDecimal());\r\n        return (num % 1 !== 0);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is a Symbol\r\n     * @param {Object} obj\r\n     */\r\n    var isSymbol = function (obj) {\r\n        return (obj instanceof Symbol);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is an Expression\r\n     * @param {Object} obj\r\n     */\r\n    var isExpression = function (obj) {\r\n        return (obj instanceof Expression);\r\n    };\r\n\r\n    /**\r\n     * This method traverses the symbol structure and grabs all the variables in a symbol. The variable\r\n     * names are then returned in alphabetical order.\r\n     * @param {Symbol} obj\r\n     * @param {Boolean} poly\r\n     * @param {Object} vars - An object containing the variables. Do not pass this in as it generated\r\n     * automatically. In the future this will be a Collector object.\r\n     * @returns {String[]} - An array containing variable names\r\n     */\r\n    var variables = function (obj, poly, vars) {\r\n        vars = vars || {\r\n            c: [],\r\n            add: function (value) {\r\n                if(this.c.indexOf(value) === -1 && isNaN(value))\r\n                    this.c.push(value);\r\n            }\r\n        };\r\n\r\n        if(isSymbol(obj)) {\r\n            var group = obj.group,\r\n                    prevgroup = obj.previousGroup;\r\n            if(group === EX)\r\n                variables(obj.power, poly, vars);\r\n\r\n            if(group === CP || group === CB || prevgroup === CP || prevgroup === CB) {\r\n                for(var x in obj.symbols) {\r\n                    variables(obj.symbols[x], poly, vars);\r\n                }\r\n            }\r\n            else if(group === S || prevgroup === S) {\r\n                //very crude needs fixing. TODO\r\n                if(!(obj.value === 'e' || obj.value === 'pi' || obj.value === Settings.IMAGINARY))\r\n                    vars.add(obj.value);\r\n            }\r\n            else if(group === PL || prevgroup === PL) {\r\n                variables(firstObject(obj.symbols), poly, vars);\r\n            }\r\n            else if(group === EX) {\r\n                if(!isNaN(obj.value))\r\n                    vars.add(obj.value);\r\n                variables(obj.power, poly, vars);\r\n            }\r\n            else if(group === FN && !poly) {\r\n                for(var i = 0; i < obj.args.length; i++) {\r\n                    variables(obj.args[i], poly, vars);\r\n                }\r\n            }\r\n        }\r\n\r\n        return vars.c.sort();\r\n    };\r\n\r\n    /**\r\n     * Returns the sum of an array\r\n     * @param {Array} arr\r\n     * @param {boolean} toNumber\r\n     * @returns {Symbol}\r\n     */\r\n    var arraySum = function (arr, toNumber) {\r\n        var sum = new Symbol(0);\r\n        for(var i = 0; i < arr.length; i++) {\r\n            var x = arr[i];\r\n            // Convert to symbol if not\r\n            sum = _.add(sum, !isSymbol(x) ? _.parse(x) : x);\r\n        }\r\n\r\n        return toNumber ? Number(sum) : sum;\r\n    };\r\n\r\n    /**\r\n     * Separates out the variables into terms of variabls.\r\n     * e.g. x+y+x*y+sqrt(2)+pi returns\r\n     * {x: x, y: y, x y: x*y, constants: sqrt(2)+pi\r\n     * @param {type} symbol\r\n     * @param {type} o\r\n     * @returns {undefined}\r\n     * @throws {Error} for expontentials\r\n     */\r\n    var separate = function (symbol, o) {\r\n        symbol = _.expand(symbol);\r\n        o = o || {};\r\n        var insert = function (key, sym) {\r\n            if(!o[key])\r\n                o[key] = new Symbol(0);\r\n            o[key] = _.add(o[key], sym.clone());\r\n        };\r\n        symbol.each(function (x) {\r\n            if(x.isConstant('all')) {\r\n                insert('constants', x);\r\n            }\r\n            else if(x.group === S) {\r\n                insert(x.value, x);\r\n            }\r\n            else if(x.group === FN && (x.fname === ABS || x.fname === '')) {\r\n                separate(x.args[0]);\r\n            }\r\n            else if(x.group === EX || x.group === FN) {\r\n                throw new Error('Unable to separate. Term cannot be a function!');\r\n            }\r\n            else {\r\n                insert(variables(x).join(' '), x);\r\n            }\r\n        });\r\n\r\n        return o;\r\n    };\r\n\r\n    /**\r\n     * Fills holes in an array with zero symbol or generates one with n zeroes\r\n     * @param {Array} arr\r\n     * @param {Number} n\r\n     */\r\n    var fillHoles = function (arr, n) {\r\n        n = n || arr.length;\r\n        for(var i = 0; i < n; i++) {\r\n            var sym = arr[i];\r\n            if(!sym)\r\n                arr[i] = new Symbol(0);\r\n        }\r\n        return arr;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * Checks to see if the object provided is a Vector\r\n     * @param {Object} obj\r\n     */\r\n    var isVector = function (obj) {\r\n        return (obj instanceof Vector);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is a Matrix\r\n     * @param {Object} obj\r\n     */\r\n    var isMatrix = function (obj) {\r\n        return (obj instanceof Matrix);\r\n    };\r\n\r\n    var isSet = function (obj) {\r\n        return (obj instanceof Set);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a symbol is in group N\r\n     * @param {Symbol} symbol\r\n     */\r\n    var isNumericSymbol = function (symbol) {\r\n        return symbol.group === N || symbol.group === P;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a symbol is a variable with no multiplier nor power\r\n     * @param {Symbol} symbol\r\n     */\r\n    var isVariableSymbol = function (symbol) {\r\n        return symbol.group === S && symbol.multiplier.equals(1) && symbol.power.equals(1);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is an Array\r\n     * @param {Object} arr\r\n     */\r\n    var isArray = function (arr) {\r\n        return Array.isArray(arr);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a number is an integer\r\n     * @param {Number} num\r\n     */\r\n    var isInt = function (num) {\r\n        return /^[-+]?\\d+e?\\+?\\d*$/gim.test(num.toString());\r\n    };\r\n\r\n    /**\r\n     * @param {Number|Symbol} obj\r\n     * @returns {boolean}\r\n     */\r\n    var isNegative = function (obj) {\r\n        if(isSymbol(obj)) {\r\n            obj = obj.multiplier;\r\n        }\r\n        return obj.lessThan(0);\r\n    };\r\n    /**\r\n     * Safely stringify object\r\n     * @param o\r\n     */\r\n    var stringify = function (o) {\r\n        if(!o)\r\n            return o;\r\n        return String(o);\r\n    };\r\n\r\n    /**\r\n     * @param {String} str\r\n     * @returns {String} - returns a formatted string surrounded by brackets\r\n     */\r\n    var inBrackets = function (str) {\r\n        return '(' + str + ')';\r\n    };\r\n\r\n    /**\r\n     * A helper function to replace parts of string\r\n     * @param {String} str - The original string\r\n     * @param {Integer} from - The starting index\r\n     * @param {Integer} to - The ending index\r\n     * @param {String} with_str - The replacement string\r\n     * @returns {String} - A formatted string\r\n     */\r\n    var stringReplace = function (str, from, to, with_str) {\r\n        return str.substr(0, from) + with_str + str.substr(to, str.length);\r\n    };\r\n\r\n    /**\r\n     * the Parser uses this to check if it's allowed to convert the obj to type Symbol\r\n     * @param {Object} obj\r\n     * @returns {boolean}\r\n     */\r\n    var customType = function (obj) {\r\n        return obj !== undefined && obj.custom;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if numbers are both negative or are both positive\r\n     * @param {Number} a\r\n     * @param {Number} b\r\n     * @returns {boolean}\r\n     */\r\n    var sameSign = function (a, b) {\r\n        return (a < 0) === (b < 0);\r\n    };\r\n\r\n    /**\r\n     * A helper function to replace multiple occurences in a string. Takes multiple arguments\r\n     * @example format('{0} nice, {0} sweet', 'something')\r\n     * //returns 'something nice, something sweet'\r\n     */\r\n    var format = function () {\r\n        var args = [].slice.call(arguments),\r\n                str = args.shift();\r\n        var new_str = str.replace(/{(\\d+)}/g, function (match, index) {\r\n            var arg = args[index];\r\n            return typeof arg === 'function' ? arg() : arg;\r\n        });\r\n\r\n        return new_str;\r\n    };\r\n\r\n    /**\r\n     * Generates an array with values within a range. Multiplies by a step if provided\r\n     * @param {Number} start\r\n     * @param {Number} end\r\n     * @param {Number} step\r\n     */\r\n    var range = function (start, end, step) {\r\n        var arr = [];\r\n        step = step || 1;\r\n        for(var i = start; i <= end; i++)\r\n            arr.push(i * step);\r\n        return arr;\r\n    };\r\n\r\n    /**\r\n     * Returns an array of all the keys in an array\r\n     * @param {Object} obj\r\n     * @returns {Array}\r\n     */\r\n    var keys = Object.keys;\r\n\r\n    /**\r\n     * Returns the first encountered item in an object. Items do not have a fixed order in objects\r\n     * so only use if you need any first random or if there's only one item in the object\r\n     * @param {Object} obj\r\n     * @param {String} key Return this key as first object\r\n     * @param {Boolean} both\r\n     * @returns {*}\r\n     */\r\n    var firstObject = function (obj, key, both) {\r\n        for(var x in obj)\r\n            break;\r\n        if(key)\r\n            return x;\r\n        if(both)\r\n            return {\r\n                key: x,\r\n                obj: obj[x]\r\n            };\r\n        return obj[x];\r\n    };\r\n\r\n    /**\r\n     * Substitutes out variables for two symbols, parses them to a number and them compares them numerically\r\n     * @param {Symbol} sym1\r\n     * @param {Symbol} sym2\r\n     * @param {String[]} vars - an optional array of variables to use\r\n     * @returns {bool}\r\n     */\r\n    var compare = function (sym1, sym2, vars) {\r\n        var n = 5; //a random number between 1 and 5 is good enough\r\n        var scope = {}; // scope object with random numbers generated using vars\r\n        var comparison;\r\n        for(var i = 0; i < vars.length; i++)\r\n            scope[vars[i]] = new Symbol(Math.floor(Math.random() * n) + 1);\r\n        block('PARSE2NUMBER', function () {\r\n            comparison = _.parse(sym1, scope).equals(_.parse(sym2, scope));\r\n        });\r\n        return comparison;\r\n    };\r\n\r\n    /**\r\n     * Is used to set a user defined function using the function assign operator\r\n     * @param {String} name\r\n     * @param {String[]} params_array\r\n     * @param {String} body\r\n     * @returns {Boolean}\r\n     */\r\n    var setFunction = function (name, params_array, body) {\r\n        validateName(name);\r\n        if(!isReserved(name)) {\r\n            params_array = params_array || variables(_.parse(body));\r\n            // The function gets set to PARSER.mapped function which is just\r\n            // a generic function call.\r\n            _.functions[name] = [_.mapped_function, params_array.length, {\r\n                    name: name,\r\n                    params: params_array,\r\n                    body: body\r\n                }];\r\n\r\n            return body;\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Returns the minimum number in an array\r\n     * @param {Array} arr\r\n     * @returns {Number}\r\n     */\r\n    var arrayMax = function (arr) {\r\n        return Math.max.apply(undefined, arr);\r\n    };\r\n\r\n    /**\r\n     * Returns the maximum number in an array\r\n     * @param {Array} arr\r\n     * @returns {Number}\r\n     */\r\n    var arrayMin = function (arr) {\r\n        return Math.min.apply(undefined, arr);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if two arrays are equal\r\n     * @param {Array} arr1 \r\n     * @param {Array} arr2 \r\n     */\r\n    var arrayEqual = function (arr1, arr2) {\r\n        arr1.sort();\r\n        arr2.sort();\r\n\r\n        // The must be of the same length\r\n        if(arr1.length === arr2.length) {\r\n            for(var i = 0; i < arr1.length; i++) {\r\n                // If any two items don't match we're done\r\n                if(arr1[i] !== arr2[i]) {\r\n                    return false;\r\n                }\r\n            }\r\n            // Otherwise they're equal\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Clones array with clonable items\r\n     * @param {Array} arr\r\n     * @returns {Array}\r\n     */\r\n    var arrayClone = function (arr) {\r\n        var new_array = [], l = arr.length;\r\n        for(var i = 0; i < l; i++)\r\n            new_array[i] = arr[i].clone();\r\n        return new_array;\r\n    };\r\n\r\n    /**\r\n     * Fills numbers between array values\r\n     * @param {Numbers[]} arr\r\n     * @param {Integer} slices\r\n     */\r\n    var arrayAddSlices = function (arr, slices) {\r\n        slices = slices || 20;\r\n        var retval = [];\r\n        var c, delta, e;\r\n        retval.push(arr[0]); //push the beginning\r\n        for(var i = 0; i < arr.length - 1; i++) {\r\n            c = arr[i];\r\n            delta = arr[i + 1] - c; //get the difference\r\n            e = delta / slices; //chop it up in the desired number of slices\r\n            for(var j = 0; j < slices; j++) {\r\n                c += e; //add the mesh to the last slice\r\n                retval.push(c);\r\n            }\r\n        }\r\n\r\n        return retval;\r\n    };\r\n\r\n    /**\r\n     * Gets nth roots of a number\r\n     * @param {Symbol} symbol\r\n     * @returns {Vector}\r\n     */\r\n    var nroots = function (symbol) {\r\n        var a, b;\r\n\r\n        if(symbol.group === FN && symbol.fname === '') {\r\n            a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\r\n            b = _.parse(symbol.power);\r\n        }\r\n        else if(symbol.group === P) {\r\n            a = _.parse(symbol.value);\r\n            b = _.parse(symbol.power);\r\n        }\r\n\r\n        if(a && b && (a.group === N) && b.group === N && a.multiplier.isNegative()) {\r\n            var _roots = [];\r\n\r\n            var parts = Symbol.toPolarFormArray(evaluate(symbol));\r\n            var r = parts[0];\r\n\r\n            //var r = _.parse(a).abs().toString();\r\n\r\n            //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\r\n            var x = _.arg(a);\r\n            var n = b.multiplier.den.toString();\r\n            var p = b.multiplier.num.toString();\r\n\r\n            var formula = '(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})';\r\n\r\n            for(var i = 0; i < n; i++) {\r\n                var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\r\n                _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\r\n            }\r\n            return Vector.fromArray(_roots);\r\n        }\r\n        else if(symbol.isConstant(true, true)) {\r\n            var sign = symbol.sign();\r\n            var x = evaluate(symbol.abs());\r\n            var root = _.sqrt(x);\r\n\r\n            var _roots = [root.clone(), root.negate()];\r\n\r\n            if(sign < 0)\r\n                _roots = _roots.map(function (x) {\r\n                    return _.multiply(x, Symbol.imaginary());\r\n                });\r\n\r\n        }\r\n        else {\r\n            _roots = [_.parse(symbol)];\r\n        }\r\n\r\n        return Vector.fromArray(_roots);\r\n    };\r\n\r\n    /**\r\n     * Sorts and array given 2 parameters\r\n     * @param {String} a\r\n     * @param {String} b\r\n     */\r\n    var comboSort = function (a, b) {\r\n        var l = a.length,\r\n                combined = []; //the linker\r\n        for(var i = 0; i < a.length; i++) {\r\n            combined.push([a[i], b[i]]); //create the map\r\n        }\r\n\r\n        combined.sort(function (x, y) {\r\n            return x[0] - y[0];\r\n        });\r\n\r\n        var na = [], nb = [];\r\n\r\n        for(i = 0; i < l; i++) {\r\n            na.push(combined[i][0]);\r\n            nb.push(combined[i][1]);\r\n        }\r\n\r\n        return [na, nb];\r\n    };\r\n    /**\r\n     * TODO: Pick a more descriptive name and better description\r\n     * Breaks a function down into it's parts wrt to a variable, mainly coefficients\r\n     * Example a*x^2+b wrt x\r\n     * @param {Symbol} fn\r\n     * @param {String} wrt\r\n     * @param {bool} as_obj\r\n     */\r\n    var decompose_fn = function (fn, wrt, as_obj) {\r\n        wrt = String(wrt); //convert to string\r\n        var ax, a, x, b;\r\n        if(fn.group === CP) {\r\n            var t = _.expand(fn.clone()).stripVar(wrt);\r\n            ax = _.subtract(fn.clone(), t.clone());\r\n            b = t;\r\n        }\r\n        else\r\n            ax = fn.clone();\r\n        a = ax.stripVar(wrt);\r\n        x = _.divide(ax.clone(), a.clone());\r\n        b = b || new Symbol(0);\r\n        if(as_obj)\r\n            return {\r\n                a: a,\r\n                x: x,\r\n                ax: ax,\r\n                b: b\r\n            };\r\n        return [a, x, ax, b];\r\n    };\r\n    /**\r\n     * Rounds a number up to x decimal places\r\n     * @param {Number} x\r\n     * @param {Number} s\r\n     */\r\n    var nround = function (x, s) {\r\n        if(isInt(x)) {\r\n            if(x >= Number.MAX_VALUE)\r\n                return x.toString();\r\n            return Number(x);\r\n        }\r\n\r\n        s = typeof s === 'undefined' ? 14 : s;\r\n        return Math.round(x * Math.pow(10, s)) / Math.pow(10, s);\r\n    };\r\n\r\n    /**\r\n     * Is used for u-substitution. Gets a suitable u for substitution. If for\r\n     * instance a is used in the symbol then it keeps going down the line until\r\n     * one is found that's not in use. If all letters are taken then it\r\n     * starts appending numbers.\r\n     * IMPORTANT! It assumes that the substitution will be undone\r\n     * beore the user gets to interact with the object again.\r\n     * @param {Symbol} symbol\r\n     */\r\n    var getU = function (symbol) {\r\n        //start with u\r\n        var u = 'u', //start with u\r\n                v = u, //init with u\r\n                c = 0, //postfix number\r\n                vars = variables(symbol);\r\n        //make sure this variable isn't reserved and isn't in the variable list\r\n        while(!(RESERVED.indexOf(v) === - 1 && vars.indexOf(v) === - 1))\r\n            v = u + c++;\r\n        //get an empty slot. It seems easier to just push but the\r\n        //problem is that we may have some which are created by clearU\r\n        for(var i = 0, l = RESERVED.length; i <= l; i++)\r\n            //reserved cannot equals false or 0 so we can safely check for a falsy type\r\n            if(!RESERVED[i]) {\r\n                RESERVED[i] = v; //reserve the variable\r\n                break;\r\n            }\r\n        return v;\r\n    };\r\n\r\n    /**\r\n     * Clears the u variable so it's no longer reserved\r\n     * @param {String} u\r\n     */\r\n    var clearU = function (u) {\r\n        var indx = RESERVED.indexOf(u);\r\n        if(indx !== -1)\r\n            RESERVED[indx] = undefined;\r\n    };\r\n\r\n    /**\r\n     * Loops through each item in object and calls function with item as param\r\n     * @param {Object|Array} obj\r\n     * @param {Function} fn\r\n     */\r\n    var each = function (obj, fn) {\r\n        if(isArray(obj)) {\r\n            var l = obj.length;\r\n            for(var i = 0; i < l; i++)\r\n                fn.call(obj, i);\r\n        }\r\n        else {\r\n            for(var x in obj)\r\n                if(obj.hasOwnProperty(x))\r\n                    fn.call(obj, x);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a number is an even number\r\n     * @param {Number} num\r\n     * @returns {boolean}\r\n     */\r\n    var even = function (num) {\r\n        return num % 2 === 0;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a fraction is divisible by 2\r\n     * @param {Number} num\r\n     * @returns {boolean}\r\n     */\r\n    var evenFraction = function (num) {\r\n        return 1 / (num % 1) % 2 === 0;\r\n    };\r\n\r\n    /**\r\n     * Strips duplicates out of an array\r\n     * @param {Array} arr\r\n     */\r\n    var arrayUnique = function (arr) {\r\n        var l = arr.length, a = [];\r\n        for(var i = 0; i < l; i++) {\r\n            var item = arr[i];\r\n            if(a.indexOf(item) === -1)\r\n                a.push(item);\r\n        }\r\n        return a;\r\n    };\r\n\r\n    /**\r\n     * Gets all the variables in an array of Symbols\r\n     * @param {Symbol[]} arr \r\n     */\r\n    var arrayGetVariables = function (arr) {\r\n        var vars = variables(arr[0], null, null, true);\r\n\r\n        //get all variables\r\n        for(var i = 1, l = arr.length; i < l; i++)\r\n            vars = vars.concat(variables(arr[i]));\r\n        //remove duplicates\r\n        vars = arrayUnique(vars).sort();\r\n\r\n        //done\r\n        return vars;\r\n    };\r\n\r\n    /**\r\n     * Removes duplicates from an array. Returns a new array\r\n     * @param {Array} arr\r\n     * @param {Function} condition\r\n     */\r\n    var removeDuplicates = function (arr, condition) {\r\n        var conditionType = typeof condition;\r\n\r\n        if(conditionType !== 'function' || conditionType === 'undefined') {\r\n            condition = function (a, b) {\r\n                return a === b;\r\n            };\r\n        }\r\n\r\n        var seen = [];\r\n\r\n        while(arr.length) {\r\n            var a = arr[0];\r\n            //only one element left so we're done\r\n            if(arr.length === 1) {\r\n                seen.push(a);\r\n                break;\r\n            }\r\n            var temp = [];\r\n            seen.push(a); //we already scanned these\r\n            for(var i = 1; i < arr.length; i++) {\r\n                var b = arr[i];\r\n                //if the number is outside the specified tolerance\r\n                if(!condition(a, b))\r\n                    temp.push(b);\r\n            }\r\n            //start over with the remainder\r\n            arr = temp;\r\n        }\r\n\r\n        return seen;\r\n    };\r\n\r\n    /**\r\n     * Reserves the names in an object so they cannot be used as function names\r\n     * @param {Object} obj\r\n     */\r\n    var reserveNames = function (obj) {\r\n        var add = function (item) {\r\n            if(RESERVED.indexOf(item) === -1)\r\n                RESERVED.push(item);\r\n        };\r\n\r\n        if(typeof obj === 'string')\r\n            add(obj);\r\n        else {\r\n            each(obj, function (x) {\r\n                add(x);\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Removes an item from either an array or an object. If the object is an array, the index must be\r\n     * specified after the array. If it's an object then the key must be specified\r\n     * @param {Object|Array} obj\r\n     * @param {Integer} indexOrKey\r\n     */\r\n    var remove = function (obj, indexOrKey) {\r\n        var result;\r\n        if(isArray(obj)) {\r\n            result = obj.splice(indexOrKey, 1)[0];\r\n        }\r\n        else {\r\n            result = obj[indexOrKey];\r\n            delete obj[indexOrKey];\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a temporary block in which one of the global settings is temporarily modified while\r\n     * the function is called. For instance if you want to parse directly to a number rather than have a symbolic\r\n     * answer for a period you would set PARSE2NUMBER to true in the block.\r\n     * @example block('PARSE2NUMBER', function(){//symbol being parsed to number}, true);\r\n     * @param {String} setting - The setting being accessed\r\n     * @param {Function} f\r\n     * @param {boolean} opt - The value of the setting in the block\r\n     * @param {String} obj - The obj of interest. Usually a Symbol but could be any object\r\n     */\r\n    var block = function (setting, f, opt, obj) {\r\n        var current_setting = Settings[setting];\r\n        Settings[setting] = opt === undefined ? true : !!opt;\r\n        var retval = f.call(obj);\r\n        Settings[setting] = current_setting;\r\n        return retval;\r\n    };\r\n\r\n    /**\r\n     * provide a mechanism for accessing functions directly. Not yet complete!!!\r\n     * Some functions will return undefined. This can maybe just remove the\r\n     * function object at some point when all functions are eventually\r\n     * housed in the global function object. Returns ALL parser available\r\n     * functions. Parser.functions may not contain all functions\r\n     */\r\n    var importFunctions = function () {\r\n        var o = {};\r\n        for(var x in _.functions)\r\n            o[x] = _.functions[x][0];\r\n        return o;\r\n    };\r\n\r\n    /**\r\n     * Converts function arguments to an array. Now used by gcd and lcm in Algebra.js :)\r\n     * @param {Array|object} obj\r\n     */\r\n    var arguments2Array = function (obj) {\r\n        return [].slice.call(obj);\r\n    };\r\n\r\n    /**\r\n     * Returns the coefficients of a symbol given a variable. Given ax^2+b^x+c, it divides\r\n     * each nth term by x^n.\r\n     * @param {Symbol} symbol\r\n     * @param {Symbol} wrt\r\n     */\r\n    var getCoeffs = function (symbol, wrt, info) {\r\n        var coeffs = [];\r\n        //we loop through the symbols and stick them in their respective\r\n        //containers e.g. y*x^2 goes to index 2\r\n        symbol.each(function (term) {\r\n            if(term.contains(wrt)) {\r\n                //we want only the coefficient which in this case will be everything but the variable\r\n                //e.g. a*b*x -> a*b if the variable to solve for is x\r\n                var coeff = term.stripVar(wrt),\r\n                        x = _.divide(term.clone(), coeff.clone()),\r\n                        p = x.power.toDecimal();\r\n            }\r\n            else {\r\n                coeff = term;\r\n                p = 0;\r\n            }\r\n            var e = coeffs[p];\r\n            //if it exists just add it to it\r\n            coeffs[p] = e ? _.add(e, coeff) : coeff;\r\n\r\n        }, true);\r\n\r\n        for(var i = 0; i < coeffs.length; i++)\r\n            if(!coeffs[i])\r\n                coeffs[i] = new Symbol(0);\r\n        //fill the holes\r\n        return coeffs;\r\n    };\r\n\r\n    /**\r\n     * As the name states. It forces evaluation of the expression\r\n     * @param {Symbol} symbol\r\n     * @param {Symbol} o\r\n     */\r\n    var evaluate = function (symbol, o) {\r\n        return block('PARSE2NUMBER', function () {\r\n            return _.parse(symbol, o);\r\n        }, true);\r\n    };\r\n\r\n    /**\r\n     * Converts an array to a vector. Consider moving this to Vector.fromArray\r\n     * @param {String[]|String|Symbol|Number|Number[]} x\r\n     */\r\n    var convertToVector = function (x) {\r\n        if(isArray(x)) {\r\n            var vector = new Vector([]);\r\n            for(var i = 0; i < x.length; i++)\r\n                vector.elements.push(convertToVector(x[i]));\r\n            return vector;\r\n        }\r\n        //Ensure that a nerdamer ready object is returned\r\n        if(!isSymbol(x))\r\n            return _.parse(x);\r\n        return x;\r\n    };\r\n\r\n    /**\r\n     * Generates prime numbers up to a specified number\r\n     * @param {Number} upto\r\n     */\r\n    var generatePrimes = function (upto) {\r\n        //get the last prime in the array\r\n        var last_prime = PRIMES[PRIMES.length - 1] || 2;\r\n        //no need to check if we've already encountered the number. Just check the cache.\r\n        for(var i = last_prime; i < upto; i++) {\r\n            if(isPrime(i))\r\n                PRIMES.push(i);\r\n        }\r\n    };\r\n    /**\r\n     * Checks to see if all arguments are numbers\r\n     * @param {object} args\r\n     */\r\n    var allNumbers = function (args) {\r\n        for(var i = 0; i < args.length; i++)\r\n            if(args[i].group !== N)\r\n                return false;\r\n        return true;\r\n    };\r\n    /*\r\n     * Checks if all arguments aren't just all number but if they\r\n     * are constants as well e.g. pi, e.\r\n     * @param {object} args\r\n     */\r\n    var allConstants = function (args) {\r\n        for(var i = 0; i < args.length; i++) {\r\n            if(args[i].isPi() || args[i].isE())\r\n                continue;\r\n            if(!args[i].isConstant(true))\r\n                return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Used to multiply two expression in expanded form\r\n     * @param {Symbol} a\r\n     * @param {Symbol} b\r\n     */\r\n    var mix = function (a, b, opt) {\r\n        // Flip them if b is a CP or PL and a is not\r\n        if(b.isComposite() && !a.isComposite() || b.isLinear() && !a.isLinear()) {\r\n            [a, b] = [b, a];\r\n        }\r\n        // A temporary variable to hold the expanded terms\r\n        var t = new Symbol(0);\r\n        if(a.isLinear()) {\r\n            a.each(function (x) {\r\n                // If b is not a PL or a CP then simply multiply it\r\n                if(!b.isComposite()) {\r\n                    var term = _.multiply(_.parse(x), _.parse(b));\r\n                    t = _.add(t, _.expand(term, opt));\r\n                }\r\n                // Otherwise multiply out each term.\r\n                else if(b.isLinear()) {\r\n                    b.each(function (y) {\r\n                        var term = _.multiply(_.parse(x), _.parse(y));\r\n                        var expanded = _.expand(_.parse(term), opt);\r\n                        t = _.add(t, expanded);\r\n                    }, true);\r\n                }\r\n                else {\r\n                    t = _.add(t, _.multiply(x, _.parse(b)));\r\n                }\r\n            }, true);\r\n        }\r\n        else {\r\n            // Just multiply them together\r\n            t = _.multiply(a, b);\r\n        }\r\n\r\n        // The expanded function is now t\r\n        return t;\r\n    };\r\n\r\n//Exceptions ===================================================================\r\n    //Is thrown for division by zero\r\n    var DivisionByZero = customError('DivisionByZero');\r\n    // Is throw if an error occured during parsing\r\n    var ParseError = customError('ParseError');\r\n    // Is thrown if the expression results in undefined\r\n    var UndefinedError = customError('UndefinedError');\r\n    // Is throw input is out of the function domain\r\n    var OutOfFunctionDomainError = customError('OutOfFunctionDomainError');\r\n    // Is throw if a function exceeds x amount of iterations\r\n    var MaximumIterationsReached = customError('MaximumIterationsReached');\r\n    // Is thrown if the parser receives an incorrect type\r\n    var NerdamerTypeError = customError('NerdamerTypeError');\r\n    // Is thrown if bracket parity is not correct\r\n    var ParityError = customError('ParityError');\r\n    // Is thrown if an unexpectd or incorrect operator is encountered\r\n    var OperatorError = customError('OperatorError');\r\n    // Is thrown if an index is out of range.\r\n    var OutOfRangeError = customError('OutOfRangeError');\r\n    // Is thrown if dimensions are incorrect. Mostly for matrices\r\n    var DimensionError = customError('DimensionError');\r\n    // Is thrown if variable name violates naming rule\r\n    var InvalidVariableNameError = customError('InvalidVariableNameError');\r\n    // Is thrown if the limits of the library are exceeded for a function\r\n    // This can be that the function become unstable passed a value\r\n    var ValueLimitExceededError = customError('ValueLimitExceededError');\r\n    // Is throw if the value is an incorrect LH or RH value\r\n    var NerdamerValueError = customError('NerdamerValueError');\r\n    // Is thrown if the value is an incorrect LH or RH value\r\n    var SolveError = customError('SolveError');\r\n    // Is thrown for an infinite loop\r\n    var InfiniteLoopError = customError('InfiniteLoopError');\r\n    // Is thrown if an operator is found when there shouldn't be one\r\n    var UnexpectedTokenError = customError('UnexpectedTokenError');\r\n\r\n    var exceptions = {\r\n        DivisionByZero: DivisionByZero,\r\n        ParseError: ParseError,\r\n        OutOfFunctionDomainError: OutOfFunctionDomainError,\r\n        UndefinedError: UndefinedError,\r\n        MaximumIterationsReached: MaximumIterationsReached,\r\n        NerdamerTypeError: NerdamerTypeError,\r\n        ParityError: ParityError,\r\n        OperatorError: OperatorError,\r\n        OutOfRangeError: OutOfRangeError,\r\n        DimensionError: DimensionError,\r\n        InvalidVariableNameError: InvalidVariableNameError,\r\n        ValueLimitExceededError: ValueLimitExceededError,\r\n        NerdamerValueError: NerdamerValueError,\r\n        SolveError: SolveError,\r\n        InfiniteLoopError: InfiniteLoopError,\r\n        UnexpectedTokenError: UnexpectedTokenError\r\n    };\r\n//Math2 ========================================================================\r\n    //This object holds additional functions for nerdamer. Think of it as an extension of the Math object.\r\n    //I really don't like touching objects which aren't mine hence the reason for Math2. The names of the\r\n    //functions within are pretty self-explanatory.\r\n    //NOTE: DO NOT USE INLINE COMMENTS WITH THE MATH2 OBJECT! THIS BREAK DURING COMPILATION OF BUILDFUNCTION.\r\n    var Math2 = {\r\n        csc: function (x) {\r\n            return 1 / Math.sin(x);\r\n        },\r\n        sec: function (x) {\r\n            return 1 / Math.cos(x);\r\n        },\r\n        cot: function (x) {\r\n            return 1 / Math.tan(x);\r\n        },\r\n        acsc: function (x) {\r\n            return Math.asin(1 / x);\r\n        },\r\n        asec: function (x) {\r\n            return Math.acos(1 / x);\r\n        },\r\n        acot: function (x) {\r\n            return (Math.PI / 2) - Math.atan(x);\r\n        },\r\n        // https://gist.github.com/jiggzson/df0e9ae8b3b06ff3d8dc2aa062853bd8\r\n        erf: function (x) {\r\n            var t = 1 / (1 + 0.5 * Math.abs(x));\r\n            var result = 1 - t * Math.exp(-x * x - 1.26551223 +\r\n                    t * (1.00002368 +\r\n                            t * (0.37409196 +\r\n                                    t * (0.09678418 +\r\n                                            t * (-0.18628806 +\r\n                                                    t * (0.27886807 +\r\n                                                            t * (-1.13520398 +\r\n                                                                    t * (1.48851587 +\r\n                                                                            t * (-0.82215223 +\r\n                                                                                    t * (0.17087277)))))))))\r\n                    );\r\n            return x >= 0 ? result : -result;\r\n        },\r\n        diff: function (f) {\r\n            var h = 0.001;\r\n\r\n            var derivative = function (x) {\r\n                return (f(x + h) - f(x - h)) / (2 * h);\r\n            };\r\n\r\n            return derivative;\r\n        },\r\n        median: function (...values) {\r\n            values.sort(function (a, b) {\r\n                return a - b;\r\n            });\r\n\r\n            var half = Math.floor(values.length / 2);\r\n\r\n            if(values.length % 2)\r\n                return values[half];\r\n\r\n            return (values[half - 1] + values[half]) / 2.0;\r\n        },\r\n        /*\r\n         * Reverses continued fraction calculation\r\n         * @param {obj} contd\r\n         * @returns {Number}\r\n         */\r\n        fromContinued: function (contd) {\r\n            var arr = contd.fractions.slice();\r\n            var e = 1 / arr.pop();\r\n            for(var i = 0, l = arr.length; i < l; i++) {\r\n                e = 1 / (arr.pop() + e);\r\n            }\r\n            return contd.sign * (contd.whole + e);\r\n        },\r\n        /*\r\n         * Calculates continued fractions\r\n         * @param {Number} n\r\n         * @param {Number} x The number of places\r\n         * @returns {Number}\r\n         */\r\n        continuedFraction: function (n, x) {\r\n            x = x || 20;\r\n            var sign = Math.sign(n); /*store the sign*/\r\n            var absn = Math.abs(n); /*get the absolute value of the number*/\r\n            var whole = Math.floor(absn); /*get the whole*/\r\n            var ni = absn - whole; /*subtract the whole*/\r\n            var c = 0; /*the counter to keep track of iterations*/\r\n            var done = false;\r\n            var epsilon = 1e-14;\r\n            var max = 1e7;\r\n            var e, w;\r\n            var retval = {\r\n                whole: whole,\r\n                sign: sign,\r\n                fractions: []\r\n            };\r\n            /*start calculating*/\r\n            while(!done && ni !== 0) {\r\n                /*invert and get the whole*/\r\n                e = 1 / ni;\r\n                w = Math.floor(e);\r\n                if(w > max) {\r\n                    /*this signals that we may have already gone too far*/\r\n                    var d = Math2.fromContinued(retval) - n;\r\n                    if(d <= Number.EPSILON)\r\n                        break;\r\n                }\r\n                /*add to result*/\r\n                retval.fractions.push(w);\r\n                /*move the ni to the decimal*/\r\n                ni = e - w;\r\n                /*ni should always be a decimal. If we have a whole number then we're in the rounding errors*/\r\n                if(ni <= epsilon || c >= x - 1)\r\n                    done = true;\r\n                c++;\r\n            }\r\n            /*cleanup 1/(n+1/1) = 1/(n+1) so just move the last digit one over if it's one*/\r\n            var idx = retval.fractions.length - 1;\r\n            if(retval.fractions[idx] === 1) {\r\n                retval.fractions.pop();\r\n                /*increase the last one by one*/\r\n                retval.fractions[--idx]++;\r\n            }\r\n            return retval;\r\n        },\r\n        bigpow: function (n, p) {\r\n            if(!(n instanceof Frac))\r\n                n = Frac.create(n);\r\n            if(!(p instanceof Frac))\r\n                p = Frac.create(p);\r\n            var retval = new Frac(0);\r\n            if(p.isInteger()) {\r\n                retval.num = n.num.pow(p.toString());\r\n                retval.den = n.den.pow(p.toString());\r\n            }\r\n            else {\r\n                var num = Frac.create(Math.pow(n.num, p.num));\r\n                var den = Frac.create(Math.pow(n.den, p.num));\r\n\r\n                retval.num = Math2.nthroot(num, p.den.toString());\r\n                retval.den = Math2.nthroot(den, p.den);\r\n            }\r\n            return retval;\r\n        },\r\n        //http://stackoverflow.com/questions/15454183/how-to-make-a-function-that-computes-the-factorial-for-numbers-with-decimals\r\n        gamma: function (z) {\r\n            var g = 7;\r\n            var C = [\r\n                0.99999999999980993,\r\n                676.5203681218851,\r\n                -1259.1392167224028,\r\n                771.32342877765313,\r\n                -176.61502916214059,\r\n                12.507343278686905,\r\n                -0.13857109526572012,\r\n                9.9843695780195716e-6,\r\n                1.5056327351493116e-7]\r\n                    ;\r\n\r\n            if(z < 0.5)\r\n                return Math.PI / (Math.sin(Math.PI * z) * Math2.gamma(1 - z));\r\n            else {\r\n                z -= 1;\r\n\r\n                var x = C[0];\r\n                for(var i = 1; i < g + 2; i++)\r\n                    x += C[i] / (z + i);\r\n\r\n                var t = z + g + 0.5;\r\n                return Math.sqrt(2 * Math.PI) * Math.pow(t, (z + 0.5)) * Math.exp(-t) * x;\r\n            }\r\n        },\r\n        //factorial\r\n        bigfactorial: function (x) {\r\n            var retval = new bigInt(1);\r\n            for(var i = 2; i <= x; i++)\r\n                retval = retval.times(i);\r\n            return new Frac(retval);\r\n        },\r\n        //https://en.wikipedia.org/wiki/Logarithm#Calculation\r\n        bigLog: function (x) {\r\n            varr\n            if(CACHE[x]) {\r\n                return Frac.quick.apply(null, CACHE[x].split('/'));\r\n            }\r\n            x = new Frac(x);\r\n            var n = 80;\r\n            var retval = new Frac(0);\r\n            var a = x.subtract(new Frac(1));\r\n            var b = x.add(new Frac(1));\r\n            for(var i = 0; i < n; i++) {\r\n                var t = new Frac(2 * i + 1);\r\n                var k = Math2.bigpow(a.divide(b), t);\r\n                var r = t.clone().invert().multiply(k);\r\n                retval = retval.add(r);\r\n\r\n            }\r\n            return retval.multiply(new Frac(2));\r\n        },\r\n        //the factorial function but using the big library instead\r\n        factorial: function (x) {\r\n            var is_int = x % 1 === 0;\r\n\r\n            /*factorial for negative integers is complex infinity according to Wolfram Alpha*/\r\n            if(is_int && x < 0)\r\n                return NaN;\r\n\r\n            if(!is_int)\r\n                return Math2.gamma(x + 1);\r\n\r\n            var retval = 1;\r\n            for(var i = 2; i <= x; i++)\r\n                retval = retval * i;\r\n            return retval;\r\n        },\r\n        //double factorial\r\n        //http://mathworld.wolfram.com/DoubleFactorial.html\r\n        dfactorial: function (x) {\r\n            if(isInt(x)) {\r\n                var even = x % 2 === 0;\r\n                /* If x = even then n = x/2 else n = (x-1)/2*/\r\n                var n = even ? x / 2 : (x + 1) / 2;\r\n                /*the return value*/\r\n                var r = new Frac(1);\r\n                /*start the loop*/\r\n                if(even)\r\n                    for(var i = 1; i <= n; i++)\r\n                        r = r.multiply(new Frac(2).multiply(new Frac(i)));\r\n                else\r\n                    for(var i = 1; i <= n; i++)\r\n                        r = r.multiply(new Frac(2).multiply(new Frac(i)).subtract(new Frac(1)));\r\n            }\r\n            else {\r\n                /*Not yet extended to bigNum*/\r\n                r = Math.pow(2, (1 + 2 * x - Math.cos(Math.PI * x)) / 4) * Math.pow(Math.PI, (Math.cos(Math.PI * x) - 1) / 4) * Math2.gamma(1 + x / 2);\r\n            }\r\n\r\n            /*done*/\r\n            return r;\r\n        },\r\n        GCD: function () {\r\n            var args = arrayUnique([].slice.call(arguments)\r\n                    .map(function (x) {\r\n                        return Math.abs(x);\r\n                    })).sort(),\r\n                    a = Math.abs(args.shift()),\r\n                    n = args.length;\r\n\r\n            while(n-- > 0) {\r\n                var b = Math.abs(args.shift());\r\n                while(true) {\r\n                    a %= b;\r\n                    if(a === 0) {\r\n                        a = b;\r\n                        break;\r\n                    }\r\n                    b %= a;\r\n                    if(b === 0)\r\n                        break;\r\n                    ;\r\n                }\r\n            }\r\n            return a;\r\n        },\r\n        QGCD: function () {\r\n            var args = [].slice.call(arguments);\r\n            var a = args[0];\r\n            for(var i = 1; i < args.length; i++) {\r\n                var b = args[i];\r\n                var sign = a.isNegative() && b.isNegative() ? -1 : 1;\r\n                a = b.gcd(a);\r\n                if(sign < 0)\r\n                    a.negate();\r\n            }\r\n            return a;\r\n        },\r\n        LCM: function (a, b) {\r\n            return (a * b) / Math2.GCD(a, b);\r\n        },\r\n        //pow but with the handling of negative numbers\r\n        //http://stackoverflow.com/questions/12810765/calculating-cubic-root-for-negative-number\r\n        pow: function (b, e) {\r\n            if(b < 0) {\r\n                if(Math.abs(e) < 1) {\r\n                    /*nth root of a negative number is imaginary when n is even*/\r\n                    if(1 / e % 2 === 0)\r\n                        return NaN;\r\n                    return -Math.pow(Math.abs(b), e);\r\n                }\r\n            }\r\n            return Math.pow(b, e);\r\n        },\r\n        factor: function (n) {\r\n            n = Number(n);\r\n            var sign = Math.sign(n); /*store the sign*/\r\n            /*move the number to absolute value*/\r\n            n = Math.abs(n);\r\n            var ifactors = Math2.ifactor(n);\r\n            var factors = new Symbol();\r\n            factors.symbols = {};\r\n            factors.group = CB;\r\n            for(var x in ifactors) {\r\n                var factor = new Symbol(1);\r\n                factor.group = P; /*cheat a little*/\r\n                factor.value = x;\r\n                factor.power = new Symbol(ifactors[x]);\r\n                factors.symbols[x] = factor;\r\n            }\r\n            factors.updateHash();\r\n\r\n            if(n === 1) {\r\n                factors = new Symbol(n);\r\n            }\r\n\r\n            /*put back the sign*/\r\n            if(sign < 0)\r\n                factors.negate();\r\n\r\n            return factors;\r\n        },\r\n        /**\r\n         * Uses trial division\r\n         * @param {Integer} n - the number being factored\r\n         * @param {object} factors -  the factors object\r\n         * @returns {object}\r\n         */\r\n        sfactor: function (n, factors) {\r\n            factors = factors || {};\r\n            var r = Math.floor(Math.sqrt(n));\r\n            var lcprime = PRIMES[PRIMES.length - 1];\r\n            /*a one-time cost... Hopefully ... And don't bother for more than a million*/\r\n            /*takes too long*/\r\n            if(r > lcprime && n < 1e6)\r\n                generatePrimes(r);\r\n            var l = PRIMES.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var prime = PRIMES[i];\r\n                /*trial division*/\r\n                while(n % prime === 0) {\r\n                    n = n / prime;\r\n                    factors[prime] = (factors[prime] || 0) + 1;\r\n                }\r\n            }\r\n            if(n > 1)\r\n                factors[n] = 1;\r\n            return factors;\r\n        },\r\n        /**\r\n         * Pollard's rho\r\n         * @param {Integer} n\r\n         * @returns {object}\r\n         */\r\n        ifactor: function (n) {\r\n            var input = new bigInt(n);\r\n\r\n            n = String(n);\r\n\r\n            if(n === '0')\r\n                return {'0': 1};\r\n            n = new bigInt(n); /*convert to bigInt for safety*/\r\n            var sign = n.sign ? -1 : 1;\r\n            n = n.abs();\r\n            var factors = {}; /*factor object being returned.*/\r\n            if(n.lt('65536')) { /*less than 2^16 just use trial division*/\r\n                factors = Math2.sfactor(n, factors);\r\n            }\r\n            else {\r\n                var add = function (e) {\r\n                    if(!e.isPrime()) {\r\n                        factors = Math2.sfactor(e, factors);\r\n                    }\r\n                    else\r\n                        factors[e] = (factors[e] || 0) + 1;\r\n                };\r\n\r\n                try {\r\n                    //set a safety\r\n                    var max = 1e3;\r\n                    var safety = 0;\r\n\r\n                    while(!n.abs().equals(1)) {\r\n                        if(n.isPrime()) {\r\n                            add(n);\r\n                            break;\r\n                        }\r\n                        else {\r\n                            function rho(c) {\r\n                                var xf = new bigInt(c),\r\n                                        cz = 2,\r\n                                        x = new bigInt(c),\r\n                                        factor = new bigInt(1);\r\n\r\n                                while(factor.equals(1)) {\r\n                                    for(var i = 0; i <= cz && factor.equals(1); i++) {\r\n                                        //trigger the safety\r\n                                        if(safety++ > max)\r\n                                            throw new Error('stopping');\r\n\r\n                                        x = x.pow(2).add(1).mod(n);\r\n                                        factor = bigInt.gcd(x.minus(xf).abs(), n);\r\n                                    }\r\n\r\n                                    cz = cz * 2;\r\n                                    xf = x;\r\n                                }\r\n                                if(factor.equals(n)) {\r\n                                    return rho(c + 1);\r\n                                }\r\n                                return factor;\r\n                            }\r\n                            var factor = rho(2);\r\n                            add(factor);\r\n                            /*divide out the factor*/\r\n                            n = n.divide(factor);\r\n                        }\r\n                    }\r\n                }\r\n                catch(e) {\r\n                    //reset factors\r\n                    factors = {};\r\n                    add(input);\r\n                }\r\n\r\n            }\r\n\r\n            /*put the sign back*/\r\n            if(sign === -1) {\r\n                var sm = arrayMin(keys(factors)); /*/get the smallest number*/\r\n                factors['-' + sm] = factors[sm];\r\n                delete factors[sm];\r\n            }\r\n\r\n            return factors;\r\n        },\r\n        //factors a number into rectangular box. If sides are primes that this will be\r\n        //their prime factors. e.g. 21 -> (7)(3), 133 -> (7)(19)\r\n        boxfactor: function (n, max) {\r\n            max = max || 200; //stop after this number of iterations\r\n            var c, r,\r\n                    d = Math.floor((5 / 12) * n), //the divisor\r\n                    i = 0, //number of iterations\r\n                    safety = false;\r\n            while(true) {\r\n                c = Math.floor(n / d);\r\n                r = n % d;\r\n                if(r === 0)\r\n                    break; //we're done\r\n                if(safety)\r\n                    return [n, 1];\r\n                d = Math.max(r, d - r);\r\n                i++;\r\n                safety = i > max;\r\n            }\r\n            return [c, d, i];\r\n        },\r\n        fib: function (n) {\r\n            var sign = Math.sign(n);\r\n            n = Math.abs(n);\r\n            sign = even(n) ? sign : Math.abs(sign);\r\n            var a = 0, b = 1, f = 1;\r\n            for(var i = 2; i <= n; i++) {\r\n                f = a + b;\r\n                a = b;\r\n                b = f;\r\n            }\r\n            return f * sign;\r\n        },\r\n        mod: function (x, y) {\r\n            return x % y;\r\n        },\r\n        //http://mathworld.wolfram.com/IntegerPart.html\r\n        integer_part: function (x) {\r\n            var sign = Math.sign(x);\r\n            return sign * Math.floor(Math.abs(x));\r\n        },\r\n        simpson: function (f, a, b, step) {\r\n            var get_value = function (f, x, side) {\r\n                var v = f(x);\r\n                var d = 0.000000000001;\r\n                if(isNaN(v)) {\r\n                    v = f(side === 1 ? x + d : x - d);\r\n                }\r\n                return v;\r\n            };\r\n\r\n            step = step || 0.0001;\r\n            //calculate the number of intervals\r\n            var n = Math.abs(Math.floor((b - a) / step));\r\n            //simpson's rule requires an even number of intervals. If it's not then add 1\r\n            if(n % 2 !== 0)\r\n                n++;\r\n            //get the interval size\r\n            var dx = (b - a) / n;\r\n            //get x0\r\n            var retval = get_value(f, a, 1);\r\n\r\n            //get the middle part 4x1+2x2+4x3 ...\r\n            //but first set a flag to see if it's even or odd.\r\n            //The first one is odd so we start there\r\n            var even = false;\r\n            //get x1\r\n            var xi = a + dx;\r\n            //the coefficient\r\n            var c, k;\r\n            //https://en.wikipedia.org/wiki/Simpson%27s_rule\r\n            for(var i = 1; i < n; i++) {\r\n                c = even ? 2 : 4;\r\n                k = c * get_value(f, xi, 1);\r\n                retval += k;\r\n                //flip the even flag\r\n                even = !even;\r\n                //increment xi\r\n                xi += dx;\r\n            }\r\n\r\n            //add xn\r\n            return (retval + get_value(f, xi, 2)) * (dx / 3);\r\n\r\n        },\r\n        /**\r\n         * https://github.com/scijs/integrate-adaptive-simpson\r\n         * @param {Function} f - the function being integrated\r\n         * @param {Number} a - lower bound\r\n         * @param {Number} b - upper bound\r\n         * @param {Number} tol - step width\r\n         * @param {Number} maxdepth\r\n         * @returns {Number}\r\n         */\r\n        num_integrate: function (f, a, b, tol, maxdepth) {\r\n            if(maxdepth < 0)\r\n                throw new Error('max depth cannot be negative');\r\n\r\n            /* This algorithm adapted from pseudocode in:*/\r\n            /* http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf*/\r\n            function adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, depth, state) {\r\n                if(state.nanEncountered) {\r\n                    return NaN;\r\n                }\r\n                var h, f1, f2, sl, sr, s2, m, V1, V2, err;\r\n                h = b - a;\r\n                f1 = f(a + h * 0.25);\r\n                f2 = f(b - h * 0.25);\r\n                /* Simple check for NaN:*/\r\n                if(isNaN(f1)) {\r\n                    state.nanEncountered = true;\r\n                    return;\r\n                }\r\n                /* Simple check for NaN:*/\r\n                if(isNaN(f2)) {\r\n                    state.nanEncountered = true;\r\n                    return;\r\n                }\r\n\r\n                sl = h * (fa + 4 * f1 + fm) / 12;\r\n                sr = h * (fm + 4 * f2 + fb) / 12;\r\n                s2 = sl + sr;\r\n                err = (s2 - V0) / 15;\r\n\r\n                if(state.maxDepthCount > 1000 * maxdepth) {\r\n                    return;\r\n                }\r\n\r\n\r\n                if(depth > maxdepth) {\r\n                    state.maxDepthCount++;\r\n                    return s2 + err;\r\n                }\r\n                else if(Math.abs(err) < tol) {\r\n                    return s2 + err;\r\n                }\r\n                else {\r\n                    m = a + h * 0.5;\r\n                    V1 = adsimp(f, a, m, fa, f1, fm, sl, tol * 0.5, maxdepth, depth + 1, state);\r\n                    if(isNaN(V1)) {\r\n                        state.nanEncountered = true;\r\n                        return NaN;\r\n                    }\r\n                    V2 = adsimp(f, m, b, fm, f2, fb, sr, tol * 0.5, maxdepth, depth + 1, state);\r\n\r\n                    if(isNaN(V2)) {\r\n                        state.nanEncountered = true;\r\n                        return NaN;\r\n                    }\r\n\r\n                    return V1 + V2;\r\n                }\r\n            }\r\n\r\n            function integrate(f, a, b, tol, maxdepth) {\r\n                var state = {\r\n                    maxDepthCount: 0,\r\n                    nanEncountered: false\r\n                };\r\n\r\n                if(tol === undefined) {\r\n                    tol = 1e-9;\r\n                }\r\n                if(maxdepth === undefined) {\r\n                    /*Issue #458 - This was lowered because of performance issues. */\r\n                    /*This was suspected from before but is now confirmed with this issue*/\r\n                    maxdepth = 45;\r\n                }\r\n\r\n                var fa = f(a);\r\n                var fm = f(0.5 * (a + b));\r\n                var fb = f(b);\r\n\r\n                var V0 = (fa + 4 * fm + fb) * (b - a) / 6;\r\n\r\n                var result = adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, 1, state);\r\n\r\n                if(state.maxDepthCount > 0) {\r\n                    warn('integrate-adaptive-simpson: Warning: maximum recursion depth (' + maxdepth + ') reached ' + state.maxDepthCount + ' times');\r\n                }\r\n\r\n                if(state.nanEncountered) {\r\n                    throw new Error('Function does not converge over interval!');\r\n                }\r\n\r\n                return result;\r\n            }\r\n            var retval;\r\n\r\n            try {\r\n                retval = integrate(f, a, b, tol, maxdepth);\r\n            }\r\n            catch(e) {\r\n                /*fallback to non-adaptive*/\r\n                return Math2.simpson(f, a, b);\r\n            }\r\n            return nround(retval, 12);\r\n        },\r\n        //https://en.wikipedia.org/wiki/Trigonometric_integral\r\n        //CosineIntegral\r\n        Ci: function (x) {\r\n            var n = 20,\r\n                    /*roughly Euler–Mascheroni*/\r\n                    g = 0.5772156649015329,\r\n                    sum = 0;\r\n            for(var i = 1; i < n; i++) {\r\n                /*cache 2n*/\r\n                var n2 = 2 * i;\r\n                sum += (Math.pow(-1, i) * Math.pow(x, n2)) / (n2 * Math2.factorial(n2));\r\n            }\r\n            return Math.log(x) + g + sum;\r\n        },\r\n        /*SineIntegral*/\r\n        Si: function (x) {\r\n            var n = 20,\r\n                    sum = 0;\r\n            for(var i = 0; i < n; i++) {\r\n                var n2 = 2 * i;\r\n                sum += (Math.pow(-1, i) * Math.pow(x, n2 + 1)) / ((n2 + 1) * Math2.factorial(n2 + 1));\r\n            }\r\n            return sum;\r\n        },\r\n        /*ExponentialIntegral*/\r\n        Ei: function (x) {\r\n            if(Number(x) === 0)\r\n                return -Infinity;\r\n            var n = 30,\r\n                    g = 0.5772156649015328606, /*roughly Euler–Mascheroni*/\r\n                    sum = 0;\r\n            for(var i = 1; i < n; i++) {\r\n                sum += Math.pow(x, i) / (i * Math2.factorial(i));\r\n            }\r\n            return g + Math.abs(Math.log(x)) + sum;\r\n        },\r\n        /*Hyperbolic Sine Integral*/\r\n        /*http://mathworld.wolfram.com/Shi.html*/\r\n        Shi: function (x) {\r\n            var n = 30,\r\n                    sum = 0,\r\n                    k, t;\r\n            for(var i = 0; i < n; i++) {\r\n                k = 2 * i;\r\n                t = k + 1;\r\n                sum += Math.pow(x, t) / (t * t * Math2.factorial(k));\r\n            }\r\n            return sum;\r\n        },\r\n        /*the cosine integral function*/\r\n        Chi: function (x) {\r\n            var dx, g, f;\r\n            dx = 0.001;\r\n            g = 0.5772156649015328606;\r\n            f = function (t) {\r\n                return (Math.cosh(t) - 1) / t;\r\n            };\r\n            return Math.log(x) + g + Math2.num_integrate(f, 0.002, x, dx);\r\n        },\r\n        /*the log integral*/\r\n        Li: function (x) {\r\n            return Math2.Ei(Math2.bigLog(x));\r\n        },\r\n        /*the gamma incomplete function*/\r\n        gamma_incomplete: function (n, x) {\r\n            var t = n - 1,\r\n                    sum = 0,\r\n                    x = x || 0;\r\n            for(var i = 0; i < t; i++) {\r\n                sum += Math.pow(x, i) / Math2.factorial(i);\r\n            }\r\n            return Math2.factorial(t) * Math.exp(-x) * sum;\r\n        },\r\n        /*\r\n         * Heaviside step function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/HeavisideStepFunction.html\r\n         * if x > 0 then 1\r\n         * if x == 0 then 1/2\r\n         * if x < 0 then 0\r\n         */\r\n        step: function (x) {\r\n            if(x > 0)\r\n                return 1;\r\n            if(x < 0)\r\n                return 0;\r\n            return 0.5;\r\n        },\r\n        /*\r\n         * Rectangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/RectangleFunction.html\r\n         * if |x| > 1/2 then 0\r\n         * if |x| == 1/2 then 1/2\r\n         * if |x| < 1/2 then 1\r\n         */\r\n        rect: function (x) {\r\n            var x = Math.abs(x);\r\n            if(x === 0.5)\r\n                return x;\r\n            if(x > 0.5)\r\n                return 0;\r\n            return 1;\r\n        },\r\n        /*\r\n         * Sinc function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/SincFunction.html\r\n         * if x == 0 then 1\r\n         * otherwise sin(x)/x\r\n         */\r\n        sinc: function (x) {\r\n            if(x.equals(0))\r\n                return 1;\r\n            return Math.sin(x) / x;\r\n        },\r\n        /*\r\n         * Triangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/TriangleFunction.html\r\n         * if |x| >= 1 then 0\r\n         * if |x| < then 1-|x|\r\n         */\r\n        tri: function (x) {\r\n            x = Math.abs(x);\r\n            if(x >= 1)\r\n                return 0;\r\n            return 1 - x;\r\n        },\r\n        //https://en.wikipedia.org/wiki/Nth_root_algorithm\r\n        nthroot: function (A, n) {\r\n            /*make sure the input is of type Frac*/\r\n            if(!(A instanceof Frac))\r\n                A = new Frac(A.toString());\r\n            if(!(n instanceof Frac))\r\n                n = new Frac(n.toString());\r\n            if(n.equals(1))\r\n                return A;\r\n            /*begin algorithm*/\r\n            var xk = A.divide(new Frac(2)); /*x0*/\r\n            var e = new Frac(1e-15);\r\n            var dk, dk0, d0;\r\n            var a = n.clone().invert(),\r\n                    b = n.subtract(new Frac(1));\r\n            do {\r\n                var powb = Math2.bigpow(xk, b);\r\n                var dk_dec = a.multiply(A.divide(powb).subtract(xk)).toDecimal(25);\r\n                dk = Frac.create(dk_dec);\r\n                if(d0)\r\n                    break;\r\n\r\n                xk = xk.add(dk);\r\n                /*check to see if there's no change from the last xk*/\r\n                var dk_dec = dk.toDecimal();\r\n                d0 = dk0 ? dk0 === dk_dec : false;\r\n                dk0 = dk_dec;\r\n            }\r\n            while(dk.abs().gte(e))\r\n\r\n            return xk;\r\n        },\r\n        /*https://gist.github.com/jiggzson/0c5b33cbcd7b52b36132b1e96573285f*/\r\n        /*Just the square root function but big :)*/\r\n        sqrt: function (n) {\r\n            if(!(n instanceof Frac))\r\n                n = new Frac(n);\r\n            var xn, d, ld, same_delta;\r\n            var c = 0; /*counter*/\r\n            var done = false;\r\n            var delta = new Frac(1e-20);\r\n            xn = n.divide(new Frac(2));\r\n            var safety = 1000;\r\n            do {\r\n                /*break if we're not converging*/\r\n                if(c > safety)\r\n                    throw new Error('Unable to calculate square root for ' + n);\r\n                xn = xn.add(n.divide(xn)).divide(new Frac(2));\r\n                xn = new Frac(xn.decimal(30));\r\n                /*get the difference from the true square*/\r\n                d = n.subtract(xn.multiply(xn));\r\n                /*if the square of the calculated number is close enough to the number*/\r\n                /*we're getting the square root or the last delta was the same as the new delta*/\r\n                /*then we're done*/\r\n                same_delta = ld ? ld.equals(d) : false;\r\n                if(d.clone().abs().lessThan(delta) || same_delta)\r\n                    done = true;\r\n                /*store the calculated delta*/\r\n                ld = d;\r\n                c++; /*increase the counter*/\r\n            }\r\n            while(!done)\r\n\r\n            return xn;\r\n        }\r\n    };\r\n    //link the Math2 object to Settings.FUNCTION_MODULES\r\n    Settings.FUNCTION_MODULES.push(Math2);\r\n    reserveNames(Math2); //reserve the names in Math2\r\n\r\n\r\n//Polyfills ====================================================================\r\n    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/\r\n    Math.sign = Math.sign || function (x) {\r\n        x = +x; // convert to a number\r\n        if(x === 0 || isNaN(x)) {\r\n            return x;\r\n        }\r\n        return x > 0 ? 1 : -1;\r\n    };\r\n\r\n    Math.cosh = Math.cosh || function (x) {\r\n        var y = Math.exp(x);\r\n        return (y + 1 / y) / 2;\r\n    };\r\n\r\n    Math.sech = Math.sech || function (x) {\r\n        return 1 / Math.cosh(x);\r\n    };\r\n\r\n    Math.csch = Math.csch || function (x) {\r\n        return 1 / Math.sinh(x);\r\n    };\r\n\r\n    Math.coth = Math.coth || function (x) {\r\n        return 1 / Math.tanh(x);\r\n    };\r\n\r\n    Math.sinh = Math.sinh || function (x) {\r\n        var y = Math.exp(x);\r\n        return (y - 1 / y) / 2;\r\n    };\r\n\r\n    Math.tanh = Math.tanh || function (x) {\r\n        if(x === Infinity) {\r\n            return 1;\r\n        }\r\n        else if(x === -Infinity) {\r\n            return -1;\r\n        }\r\n        else {\r\n            var y = Math.exp(2 * x);\r\n            return (y - 1) / (y + 1);\r\n        }\r\n    };\r\n\r\n    Math.asinh = Math.asinh || function (x) {\r\n        if(x === -Infinity) {\r\n            return x;\r\n        }\r\n        else {\r\n            return Math.log(x + Math.sqrt(x * x + 1));\r\n        }\r\n    };\r\n\r\n    Math.acosh = Math.acosh || function (x) {\r\n        return Math.log(x + Math.sqrt(x * x - 1));\r\n    };\r\n\r\n    Math.atanh = Math.atanh || function (x) {\r\n        return Math.log((1 + x) / (1 - x)) / 2;\r\n    };\r\n\r\n    Math.log10 = Math.log10 || function (x) {\r\n        return Math.log(x) * Math.LOG10E;\r\n    };\r\n\r\n    Math.trunc = Math.trunc || function (x) {\r\n        if(isNaN(x)) {\r\n            return NaN;\r\n        }\r\n        if(x > 0) {\r\n            return Math.floor(x);\r\n        }\r\n        return Math.ceil(x);\r\n    };\r\n\r\n//Global functions =============================================================\r\n    /**\r\n     * This method will return a hash or a text representation of a Symbol, Matrix, or Vector.\r\n     * If all else fails it *assumes* the object has a toString method and will call that.\r\n     *\r\n     * @param {Object} obj\r\n     * @param {String} option get is as a hash\r\n     * @param {int} useGroup\r\n     * @returns {String}\r\n     */\r\n    function text(obj, option, useGroup, decp) { \r\n        var asHash = option === 'hash',\r\n                //whether to wrap numbers in brackets\r\n                wrapCondition = undefined,\r\n                opt = asHash ? undefined : option,\r\n                asDecimal = opt === 'decimal' || opt === 'decimals';\r\n\r\n        if(asDecimal && typeof decp === 'undefined')\r\n            decp = Settings.DEFAULT_DECP;\r\n\r\n        function toString(obj) {\r\n            switch(option)\r\n            {\r\n                case 'decimals':\r\n                case 'decimal':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return false;\r\n                    };\r\n                    return obj.valueOf();\r\n                case 'recurring':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return str.indexOf(\"'\") !== -1;\r\n                    };\r\n\r\n                    var str = obj.toString();\r\n                    //verify that the string is actually a fraction\r\n                    var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\r\n                    if(frac.length === 0)\r\n                        return str;\r\n\r\n                    //split the fraction into the numerator and denominator\r\n                    var parts = frac[0].split('/');\r\n                    var negative = false;\r\n                    var m = Number(parts[0]);\r\n                    if(m < 0) {\r\n                        m = -m;\r\n                        negative = true;\r\n                    }\r\n                    var n = Number(parts[1]);\r\n                    if(!n)\r\n                        n = 1;\r\n\r\n                    //https://softwareengineering.stackexchange.com/questions/192070/what-is-a-efficient-way-to-find-repeating-decimal#comment743574_192081\r\n                    var quotient = Math.floor(m / n), c = 10 * (m - quotient * n);\r\n                    quotient = quotient.toString() + \".\";\r\n                    while(c && c < n) {\r\n                        c *= 10;\r\n                        quotient += \"0\";\r\n                    }\r\n                    var digits = \"\", passed = [], i = 0;\r\n                    while(true) {\r\n                        if(typeof passed[c] !== 'undefined') {\r\n                            var prefix = digits.slice(0, passed[c]),\r\n                                    cycle = digits.slice(passed[c]),\r\n                                    result = quotient + prefix + \"'\" + cycle + \"'\";\r\n                            return (negative ? \"-\" : \"\") + result.replace(\"'0'\", \"\").replace(/\\.$/, \"\");\r\n                        }\r\n                        var q = Math.floor(c / n), r = c - q * n;\r\n                        passed[c] = i;\r\n                        digits += q.toString();\r\n                        i += 1;\r\n                        c = 10 * r;\r\n                    }\r\n                case 'mixed':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return str.indexOf('/') !== -1;\r\n                    };\r\n\r\n                    var str = obj.toString();\r\n                    //verify that the string is actually a fraction\r\n                    var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\r\n                    if(frac.length === 0)\r\n                        return str;\r\n\r\n                    //split the fraction into the numerator and denominator\r\n                    var parts = frac[0].split('/');\r\n                    var numer = new bigInt(parts[0]);\r\n                    var denom = new bigInt(parts[1]);\r\n                    if(denom.equals(0))\r\n                        denom = new bigInt(1);\r\n\r\n                    //return the quotient plus the remainder\r\n                    var divmod = numer.divmod(denom);\r\n                    var quotient = divmod.quotient;\r\n                    var remainder = divmod.remainder;\r\n                    var operator = parts[0][0] === '-' || quotient.equals(0) || remainder.equals(0) ? '' : '+';\r\n                    return (quotient.equals(0) ? '' : quotient.toString()) + operator + (remainder.equals(0) ? '' : (remainder.toString() + '/' + parts[1]));\r\n                case 'scientific':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return false;\r\n                    };\r\n                    return new Scientific(obj.valueOf()).toString(Settings.SCIENTIFIC_MAX_DECIMAL_PLACES);\r\n                default:\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return str.indexOf('/') !== -1;\r\n                    };\r\n\r\n                    return obj.toString();\r\n            }\r\n        }\r\n\r\n        //if the object is a symbol\r\n        if(isSymbol(obj)) {\r\n            var multiplier = '',\r\n                    power = '',\r\n                    sign = '',\r\n                    group = obj.group || useGroup,\r\n                    value = obj.value;\r\n\r\n            //if the value is to be used as a hash then the power and multiplier need to be suppressed\r\n            if(!asHash) {\r\n                //use asDecimal to get the object back as a decimal\r\n                var om = toString(obj.multiplier);\r\n                if(om == '-1' && String(obj.multiplier) === '-1') {\r\n                    sign = '-';\r\n                    om = '1';\r\n                }\r\n                //only add the multiplier if it's not 1\r\n                if(om != '1')\r\n                    multiplier = om;\r\n                //use asDecimal to get the object back as a decimal\r\n                var p = obj.power ? toString(obj.power) : '';\r\n                //only add the multiplier\r\n                if(p != '1') {\r\n                    //is it a symbol\r\n                    if(isSymbol(p)) {\r\n                        power = text(p, opt);\r\n                    }\r\n                    else {\r\n                        power = p;\r\n                    }\r\n                }\r\n            }\r\n\r\n            switch(group) {\r\n                case N:\r\n                    multiplier = '';\r\n                    //round if requested\r\n                    var m = decp && asDecimal ? obj.multiplier.toDecimal(decp) : toString(obj.multiplier);\r\n                    //if it's numerical then all we need is the multiplier\r\n                    value = String(obj.multiplier) == '-1' ? '1' : m;\r\n                    power = '';\r\n                    break;\r\n                case PL:\r\n                    value = obj.collectSymbols().map(function (x) {\r\n                        var txt = text(x, opt, useGroup, decp);\r\n                        if(txt == '0')\r\n                            txt = '';\r\n                        return txt;\r\n                    }).sort().join('+').replace(/\\+\\-/g, '-');\r\n                    break;\r\n                case CP:\r\n                    value = obj.collectSymbols().map(function (x) {\r\n                        var txt = text(x, opt, useGroup, decp);\r\n                        if(txt == '0')\r\n                            txt = '';\r\n                        return txt;\r\n                    }).sort().join('+').replace(/\\+\\-/g, '-');\r\n                    break;\r\n                case CB:\r\n                    value = obj.collectSymbols(function (symbol) {\r\n                        var g = symbol.group;\r\n                        //both groups will already be in brackets if their power is greater than 1\r\n                        //so skip it.\r\n                        if((g === PL || g === CP) && (symbol.power.equals(1) && symbol.multiplier.equals(1))) {\r\n                            return inBrackets(text(symbol, opt));\r\n                        }\r\n                        return text(symbol, opt);\r\n                    }).join('*');\r\n                    break;\r\n                case EX:\r\n                    var pg = obj.previousGroup,\r\n                            pwg = obj.power.group;\r\n\r\n                    //PL are the exception. It's simpler to just collect and set the value\r\n                    if(pg === PL)\r\n                        value = obj.collectSymbols(text, opt).join('+').replace('+-', '-');\r\n                    if(!(pg === N || pg === S || pg === FN) && !asHash) {\r\n                        value = inBrackets(value);\r\n                    }\r\n\r\n                    if((pwg === CP || pwg === CB || pwg === PL || obj.power.multiplier.toString() != '1') && power) {\r\n                        power = inBrackets(power);\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            if(group === FN) {\r\n                value = obj.fname + inBrackets(obj.args.map(function (symbol) {\r\n                    return text(symbol, opt);\r\n                }).join(','));\r\n            }\r\n            //TODO: Needs to be more efficient. Maybe.\r\n            if(group === FN && obj.fname in CUSTOM_OPERATORS) {\r\n                var a = text(obj.args[0]);\r\n                var b = text(obj.args[1]);\r\n                if(obj.args[0].isComposite()) //preserve the brackets\r\n                    a = inBrackets(a);\r\n                if(obj.args[1].isComposite()) //preserve the brackets\r\n                    b = inBrackets(b);\r\n                value = a + CUSTOM_OPERATORS[obj.fname] + b;\r\n            }\r\n            //wrap the power since / is less than ^\r\n            //TODO: introduce method call isSimple\r\n            if(power && group !== EX && wrapCondition(power)) {\r\n                power = inBrackets(power);\r\n            }\r\n\r\n            //the following groups are held together by plus or minus. They can be raised to a power or multiplied\r\n            //by a multiplier and have to be in brackets to preserve the order of precedence\r\n            if(((group === CP || group === PL) && (multiplier && multiplier != '1' || sign === '-'))\r\n                    || ((group === CB || group === CP || group === PL) && (power && power != '1'))\r\n                    || !asHash && group === P && value == -1\r\n                    || obj.fname === PARENTHESIS) {\r\n\r\n                value = inBrackets(value);\r\n            }\r\n\r\n            if(decp && (option === 'decimal' || option === 'decimals' && multiplier)) {\r\n                multiplier = nround(multiplier, decp);\r\n            }\r\n\r\n\r\n            //add the sign back\r\n            var c = sign + multiplier;\r\n\r\n            if(multiplier && wrapCondition(multiplier))\r\n                c = inBrackets(c);\r\n\r\n            if(power < 0)\r\n                power = inBrackets(power);\r\n\r\n            //add the multiplication back\r\n            if(multiplier)\r\n                c = c + '*';\r\n\r\n            if(power) {\r\n                if(value === 'e' && Settings.E_TO_EXP) {\r\n                    return c + 'exp' + inBrackets(power);\r\n                }\r\n                power = Settings.POWER_OPERATOR + power;\r\n            }\r\n\r\n            //this needs serious rethinking. Must fix\r\n            if(group === EX && value.charAt(0) === '-') {\r\n                value = inBrackets(value);\r\n            }\r\n\r\n            var cv = c + value;\r\n\r\n            if(obj.parens) {\r\n                cv = inBrackets(cv);\r\n            }\r\n\r\n            return cv + power;\r\n        }\r\n        else if(isVector(obj)) {\r\n            var l = obj.elements.length,\r\n                    c = [];\r\n            for(var i = 0; i < l; i++)\r\n                c.push(obj.elements[i].text(option));\r\n            return '[' + c.join(',') + ']';\r\n        }\r\n        else {\r\n            try {\r\n                return obj.toString();\r\n            }\r\n            catch(e) {\r\n                return '';\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calculates prime factors for a number. It first checks if the number\r\n     * is a prime number. If it's not then it will calculate all the primes \r\n     * for that number.\r\n     * @param {int} num\r\n     * @returns {Array}\r\n     */\r\n\r\n    function primeFactors(num) {\r\n        if(isPrime(num)) {\r\n            return [num];\r\n        }\r\n\r\n        var l = num, i = 1, factors = [],\r\n                epsilon = 2.2204460492503130808472633361816E-16;\r\n        while(i < l) {\r\n            var quotient = num / i;\r\n            var whole = Math.floor(quotient);\r\n            var remainder = quotient - whole;\r\n\r\n            if(remainder <= epsilon && i > 1) {\r\n                // If the prime wasn't found but calculated then save it and\r\n                // add it as a factor.\r\n                if(isPrime(i)) {\r\n                    if(PRIMES.indexOf(i) === -1) {\r\n                        PRIMES.push(i);\r\n                    }\r\n                    factors.push(i);\r\n                }\r\n\r\n                // Check if the remainder is a prime\r\n                if(isPrime(whole)) {\r\n                    factors.push(whole);\r\n                    break;\r\n                }\r\n\r\n                l = whole;\r\n            }\r\n            i++;\r\n        }\r\n\r\n        return factors.sort(function (a, b) {\r\n            return a - b;\r\n        });\r\n    }\r\n    ;\r\n    primeFactors(314146179365)\r\n//Expression ===================================================================\r\n    /**\r\n     * This is what nerdamer returns. It's sort of a wrapper around the symbol class and\r\n     * provides the user with some useful functions. If you want to provide the user with extra\r\n     * library functions then add them to this class's prototype.\r\n     * @param {Symbol} symbol\r\n     * @returns {Expression} wraps around the Symbol class\r\n     */\r\n    function Expression(symbol) {\r\n        //we don't want arrays wrapped\r\n        this.symbol = symbol;\r\n    }\r\n    /**\r\n     * Returns stored expression at index. For first index use 1 not 0.\r\n     * @param {bool} asType\r\n     * @param {Integer} expression_number\r\n     */\r\n    Expression.getExpression = function (expression_number, asType) {\r\n        if(expression_number === 'last' || !expression_number)\r\n            expression_number = EXPRESSIONS.length;\r\n        if(expression_number === 'first')\r\n            expression_number = 1;\r\n        var index = expression_number - 1,\r\n                expression = EXPRESSIONS[index],\r\n                retval = expression ? new Expression(expression) : expression;\r\n        return retval;\r\n    };\r\n    Expression.prototype = {\r\n        /**\r\n         * Returns the text representation of the expression\r\n         * @param {String} opt - option of formatting numbers\r\n         * @param {Number} n The number of significant figures\r\n         * @returns {String}\r\n         */\r\n        text: function (opt, n) {\r\n            n = n || Settings.EXPRESSION_DECP;\r\n            opt = opt || 'decimals';\r\n            if(this.symbol.text_)\r\n                return this.symbol.text_(opt);\r\n\r\n            return text(this.symbol, opt, undefined, n);\r\n        },\r\n        /**\r\n         * Returns the latex representation of the expression\r\n         * @param {String} option - option for formatting numbers\r\n         * @returns {String}\r\n         */\r\n        latex: function (option) {\r\n            if(this.symbol.latex)\r\n                return this.symbol.latex(option);\r\n            return LaTeX.latex(this.symbol, option);\r\n        },\r\n        valueOf: function () {\r\n            return this.symbol.valueOf();\r\n        },\r\n\r\n        /**\r\n         * Evaluates the expression and tries to reduce it to a number if possible.\r\n         * If an argument is given in the form of %{integer} it will evaluate that expression.\r\n         * Other than that it will just use it's own text and reparse\r\n         * @returns {Expression}\r\n         */\r\n        evaluate: function () {\r\n\r\n            // Don't evaluate an empty vector\r\n            if(isVector(this.symbol) && this.symbol.dimensions() === 0) {\r\n                return this;\r\n            }\r\n\r\n            var first_arg = arguments[0], expression, idx = 1;\r\n\r\n            //Enable getting of expressions using the % so for example %1 should get the first expression\r\n            if(typeof first_arg === 'string') {\r\n                expression = (first_arg.charAt(0) === '%') ? Expression.getExpression(first_arg.substr(1)).text() : first_arg;\r\n            }\r\n            else if(first_arg instanceof Expression || isSymbol(first_arg)) {\r\n                expression = first_arg.text();\r\n            }\r\n            else {\r\n                expression = this.symbol.text();\r\n                idx--;\r\n            }\r\n\r\n            var subs = arguments[idx] || {};\r\n\r\n            var retval = new Expression(block('PARSE2NUMBER', function () {\r\n                return _.parse(expression, subs);\r\n            }, true));\r\n\r\n            return retval;\r\n        },\r\n        /**\r\n         * Converts a symbol to a JS function. Pass in an array of variables to use that order instead of\r\n         * the default alphabetical order\r\n         * @param vars {Array}\r\n         */\r\n        buildFunction: function (vars) {\r\n            return Build.build(this.symbol, vars);\r\n        },\r\n        /**\r\n         * Checks to see if the expression is just a plain old number\r\n         * @returns {boolean}\r\n         */\r\n        isNumber: function () {\r\n            return isNumericSymbol(this.symbol);\r\n        },\r\n        /**\r\n         * Checks to see if the expression is infinity\r\n         * @returns {boolean}\r\n         */\r\n        isInfinity: function () {\r\n            return Math.abs(this.symbol.multiplier) === Infinity;\r\n        },\r\n        /**\r\n         * Checks to see if the expression contains imaginary numbers\r\n         * @returns {boolean}\r\n         */\r\n        isImaginary: function () {\r\n            return evaluate(_.parse(this.symbol)).isImaginary();\r\n        },\r\n        /**\r\n         * Returns all the variables in the expression\r\n         * @returns {Array}\r\n         */\r\n        variables: function () {\r\n            return variables(this.symbol);\r\n        },\r\n\r\n        toString: function () {\r\n            try {\r\n                if(isArray(this.symbol))\r\n                    return '[' + this.symbol.toString() + ']';\r\n                return this.symbol.toString();\r\n            }\r\n            catch(e) {\r\n                return '';\r\n            }\r\n        },\r\n        //forces the symbol to be returned as a decimal\r\n        toDecimal: function (prec) {\r\n            Settings.precision = prec;\r\n            var dec = text(this.symbol, 'decimals');\r\n            Settings.precision = undefined;\r\n            return dec;\r\n        },\r\n        //checks to see if the expression is a fraction\r\n        isFraction: function () {\r\n            return isFraction(this.symbol);\r\n        },\r\n        //checks to see if the symbol is a multivariate polynomial\r\n        isPolynomial: function () {\r\n            return this.symbol.isPoly();\r\n        },\r\n        //performs a substitution\r\n        sub: function (symbol, for_symbol) {\r\n            return new Expression(this.symbol.sub(_.parse(symbol), _.parse(for_symbol)));\r\n        },\r\n        operation: function (otype, symbol) {\r\n            if(isExpression(symbol))\r\n                symbol = symbol.symbol;\r\n            else if(!isSymbol(symbol))\r\n                symbol = _.parse(symbol);\r\n            return new Expression(_[otype](this.symbol.clone(), symbol.clone()));\r\n        },\r\n        add: function (symbol) {\r\n            return this.operation('add', symbol);\r\n        },\r\n        subtract: function (symbol) {\r\n            return this.operation('subtract', symbol);\r\n        },\r\n        multiply: function (symbol) {\r\n            return this.operation('multiply', symbol);\r\n        },\r\n        divide: function (symbol) {\r\n            return this.operation('divide', symbol);\r\n        },\r\n        pow: function (symbol) {\r\n            return this.operation('pow', symbol);\r\n        },\r\n        expand: function () {\r\n            return new Expression(_.expand(this.symbol));\r\n        },\r\n        each: function (callback, i) {\r\n            if(this.symbol.each)\r\n                this.symbol.each(callback, i);\r\n            else if(isArray(this.symbol)) {\r\n                for(var i = 0; i < this.symbol.length; i++)\r\n                    callback.call(this.symbol, this.symbol[i], i);\r\n            }\r\n            else\r\n                callback.call(this.symbol);\r\n        },\r\n        eq: function (value) {\r\n            if(!isSymbol(value))\r\n                value = _.parse(value);\r\n            try {\r\n                var d = _.subtract(this.symbol.clone(), value);\r\n                return d.equals(0);\r\n            }\r\n            catch(e) {\r\n                return false;\r\n            }\r\n            ;\r\n        },\r\n        lt: function (value) {\r\n            if(!isSymbol(value))\r\n                value = _.parse(value);\r\n            try {\r\n                var d = evaluate(_.subtract(this.symbol.clone(), value));\r\n                return d.lessThan(0);\r\n            }\r\n            catch(e) {\r\n                return false;\r\n            }\r\n            ;\r\n        },\r\n        gt: function (value) {\r\n            if(!isSymbol(value))\r\n                value = _.parse(value);\r\n            try {\r\n                var d = evaluate(_.subtract(this.symbol.clone(), value));\r\n                return d.greaterThan(0);\r\n            }\r\n            catch(e) {\r\n                return false;\r\n            }\r\n        },\r\n        gte: function (value) {\r\n            return this.gt(value) || this.eq(value);\r\n        },\r\n        lte: function (value) {\r\n            return this.lt(value) || this.eq(value);\r\n        },\r\n\r\n        numerator: function () {\r\n            return new Expression(this.symbol.getNum());\r\n        },\r\n        denominator: function () {\r\n            return new Expression(this.symbol.getDenom());\r\n        },\r\n        hasFunction: function (f) {\r\n            return this.symbol.containsFunction(f);\r\n        },\r\n        contains: function (variable) {\r\n            return this.symbol.contains(variable);\r\n        }\r\n    };\r\n    //Aliases\r\n    Expression.prototype.toTeX = Expression.prototype.latex;\r\n\r\n    \r\n//Scientific ===================================================================\r\n    /*\r\n     * Javascript has the toExponential method but this allows you to work with string and therefore any number of digits of your choosing\r\n     * For example Scientific('464589498449496467924197545625247695464569568959124568489548454');\r\n     */\r\n\r\n    function Scientific(num) {\r\n        if(!(this instanceof Scientific))\r\n            return new Scientific(num);\r\n\r\n        num = String(typeof num === 'undefined' ? 0 : num); //convert to a string\r\n\r\n        //remove the sign\r\n        if(num.startsWith('-')) {\r\n            this.sign = -1;\r\n            //remove the sign\r\n            num = num.substr(1, num.length);\r\n        }\r\n        else {\r\n            this.sign = 1;\r\n        }\r\n\r\n        if(Scientific.isScientific(num)) {\r\n            this.fromScientific(num);\r\n        }\r\n        else {\r\n            this.convert(num);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    Scientific.prototype = {\r\n        fromScientific: function (num) {\r\n            var parts = String(num).toLowerCase().split('e');\r\n            this.coeff = parts[0];\r\n            this.exponent = parts[1];\r\n\r\n            return this;\r\n        },\r\n        convert: function (num) {\r\n            //get wholes and decimals\r\n            var parts = num.split('.');\r\n            //make zero go away\r\n            var w = parts[0] || '';\r\n            var d = parts[1] || '';\r\n            //convert zero to blank strings\r\n            w = Scientific.removeLeadingZeroes(w);\r\n            d = Scientific.removeTrailingZeroes(d);\r\n            //find the location of the decimal place which is right after the wholes\r\n            var dot_location = w.length;\r\n            //add them together so we can move the dot\r\n            var n = w + d;\r\n            //find the next number\r\n            var zeroes = Scientific.leadingZeroes(n).length;\r\n            //set the exponent\r\n            this.exponent = dot_location - (zeroes + 1);\r\n            //set the coeff but first remove leading zeroes\r\n            var coeff = Scientific.removeLeadingZeroes(n);\r\n            this.coeff = coeff.charAt(0) + '.' + (coeff.substr(1, coeff.length) || '0');\r\n\r\n            //the coeff decimal places\r\n            var dec = this.coeff.split('.')[1] || ''; //if it's undefined or zero it's going to blank\r\n\r\n            this.decp = dec === '0' ? 0 : dec.length;\r\n            //decimals\r\n            this.dec = d;\r\n            //wholes\r\n            this.wholes = w;\r\n\r\n            return this;\r\n        },\r\n        round: function (num) {\r\n            var n = this.copy();\r\n\r\n            num = Number(num); //cast to number for safety\r\n            //since we know it guaranteed to be in the format {digit}{optional dot}{optional digits}\r\n            //we can round based on this\r\n            if(num === 0)\r\n                n.coeff = n.coeff.charAt(0);\r\n            else {\r\n                //get up to n-1 digits\r\n                var rounded = this.coeff.substring(0, num + 1);\r\n                //get the next two\r\n                var next_two = this.coeff.substring(num + 1, num + 3);\r\n                //the extra digit\r\n                var ed = next_two.charAt(0);\r\n\r\n                if(next_two.charAt(1) > 4)\r\n                    ed++;\r\n\r\n                n.coeff = rounded + ed;\r\n            }\r\n\r\n            return n;\r\n        },\r\n        copy: function () {\r\n            var n = new Scientific(0);\r\n            n.coeff = this.coeff;\r\n            n.exponent = this.exponent;\r\n            n.sign = this.sign;\r\n            return n;\r\n        },\r\n        toString: function (n) {\r\n            var retval;\r\n\r\n            if(Settings.SCIENTIFIC_IGNORE_ZERO_EXPONENTS && this.exponent === 0 && this.decp < n) {\r\n                if(this.decp === 0)\r\n                    retval = this.wholes;\r\n                else\r\n                    retval = this.coeff;\r\n            }\r\n            else {\r\n                var coeff = typeof n === 'undefined' ? this.coeff : Scientific.round(this.coeff, Math.min(n, this.decp || 1));\r\n                retval = this.exponent === 0 ? coeff : coeff + 'e' + this.exponent;\r\n            }\r\n\r\n            return (this.sign === -1 ? '-' : '') + retval;\r\n        }\r\n    };\r\n\r\n    Scientific.isScientific = function (num) {\r\n        return /\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num);\r\n    };\r\n    Scientific.leadingZeroes = function (num) {\r\n        var match = num.match(/^(0*).*$/);\r\n        return match ? match[1] : '';\r\n    };\r\n    Scientific.removeLeadingZeroes = function (num) {\r\n        var match = num.match(/^0*(.*)$/);\r\n        return match ? match[1] : '';\r\n    };\r\n\r\n    Scientific.removeTrailingZeroes = function (num) {\r\n        var match = num.match(/0*$/);\r\n        return match ? num.substring(0, num.length - match[0].length) : '';\r\n    };\r\n\r\n    Scientific.round = function (c, n) {\r\n        var coeff = nround(c, n);\r\n        var m = String(coeff).split('.').pop();\r\n        var d = n - m.length;\r\n        //if we're asking for more significant figures\r\n        if(d > 0) {\r\n            coeff = coeff + (new Array(d + 1).join(0));\r\n        }\r\n        return coeff;\r\n    };\r\n\r\n//Frac =========================================================================\r\n    function Frac(n) {\r\n        if(n instanceof Frac)\r\n            return n;\r\n        if(n === undefined)\r\n            return this;\r\n        try {\r\n            if(isInt(n)) {\r\n                try {\r\n                    this.num = bigInt(n);\r\n                    this.den = bigInt(1);\r\n                }\r\n                catch(e) {\r\n                    return Frac.simple(n);\r\n                }\r\n            }\r\n            else {\r\n                var frac = n instanceof bigDec ? Fraction.quickConversion(n) : Fraction.convert(n);\r\n                this.num = new bigInt(frac[0]);\r\n                this.den = new bigInt(frac[1]);\r\n            }\r\n        }\r\n        catch(e) {\r\n            return Frac.simple(n);\r\n        }\r\n\r\n    }\r\n    //safe to use with negative numbers or other types\r\n    Frac.create = function (n) {\r\n        if(n instanceof Frac)\r\n            return n;\r\n        n = n.toString();\r\n        var is_neg = n.charAt(0) === '-'; //check if it's negative\r\n        if(is_neg)\r\n            n = n.substr(1, n.length - 1); //remove the sign\r\n        var frac = new Frac(n);\r\n        //put the sign back\r\n        if(is_neg)\r\n            frac.negate();\r\n        return frac;\r\n    };\r\n    Frac.isFrac = function (o) {\r\n        return (o instanceof Frac);\r\n    };\r\n    Frac.quick = function (n, d) {\r\n        var frac = new Frac();\r\n        frac.num = new bigInt(n);\r\n        frac.den = new bigInt(d);\r\n        return frac;\r\n    };\r\n    Frac.simple = function (n) {\r\n        var nstr = String(scientificToDecimal(n)),\r\n                m_dc = nstr.split('.'),\r\n                num = m_dc.join(''),\r\n                den = 1,\r\n                l = (m_dc[1] || '').length;\r\n        for(var i = 0; i < l; i++)\r\n            den += '0';\r\n        var frac = Frac.quick(num, den);\r\n        return frac.simplify();\r\n    };\r\n    Frac.prototype = {\r\n        multiply: function (m) {\r\n            if(this.isOne()) {\r\n                return m.clone();\r\n            }\r\n            if(m.isOne()) {\r\n                return this.clone();\r\n            }\r\n\r\n            var c = this.clone();\r\n            c.num = c.num.multiply(m.num);\r\n            c.den = c.den.multiply(m.den);\r\n\r\n            return c.simplify();\r\n        },\r\n        divide: function (m) {\r\n            if(m.equals(0))\r\n                throw new DivisionByZero('Division by zero not allowed!');\r\n            return this.clone().multiply(m.clone().invert()).simplify();\r\n        },\r\n        subtract: function (m) {\r\n            return this.clone().add(m.clone().neg());\r\n        },\r\n        neg: function () {\r\n            this.num = this.num.multiply(-1);\r\n            return this;\r\n        },\r\n        add: function (m) {\r\n            var n1 = this.den, n2 = m.den, c = this.clone();\r\n            var a = c.num, b = m.num;\r\n            if(n1.equals(n2)) {\r\n                c.num = a.add(b);\r\n            }\r\n            else {\r\n                c.num = a.multiply(n2).add(b.multiply(n1));\r\n                c.den = n1.multiply(n2);\r\n            }\r\n\r\n            return c.simplify();\r\n        },\r\n        mod: function (m) {\r\n            var a = this.clone(),\r\n                    b = m.clone();\r\n            //make their denominators even and return the mod of their numerators\r\n            a.num = a.num.multiply(b.den);\r\n            a.den = a.den.multiply(b.den);\r\n            b.num = b.num.multiply(this.den);\r\n            b.den = b.den.multiply(this.den);\r\n            a.num = a.num.mod(b.num);\r\n            return a.simplify();\r\n        },\r\n        simplify: function () {\r\n            var gcd = bigInt.gcd(this.num, this.den);\r\n\r\n            this.num = this.num.divide(gcd);\r\n            this.den = this.den.divide(gcd);\r\n            return this;\r\n        },\r\n        clone: function () {\r\n            var m = new Frac();\r\n            m.num = new bigInt(this.num);\r\n            m.den = new bigInt(this.den);\r\n            return m;\r\n        },\r\n        decimal: function (prec) {\r\n            var sign = this.num.isNegative() ? '-' : '';\r\n            if(this.num.equals(this.den)) {\r\n                return '1';\r\n            }\r\n            //go plus one for rounding\r\n            prec = prec || Settings.PRECISION;\r\n            prec++;\r\n            var narr = [],\r\n                    n = this.num.abs(),\r\n                    d = this.den;\r\n            for(var i = 0; i < prec; i++) {\r\n                var w = n.divide(d), //divide out whole\r\n                        r = n.subtract(w.multiply(d)); //get remainder\r\n\r\n                narr.push(w);\r\n                if(r.equals(0))\r\n                    break;\r\n                n = r.times(10); //shift one dec place\r\n            }\r\n            var whole = narr.shift();\r\n            if(narr.length === 0) {\r\n                return sign + whole.toString();\r\n            }\r\n\r\n            if(i === prec) {\r\n                var lt = [];\r\n                //get the last two so we can round it\r\n                for(var i = 0; i < 2; i++)\r\n                    lt.unshift(narr.pop());\r\n                //put the last digit back by rounding the last two\r\n                narr.push(Math.round(lt.join('.')));\r\n            }\r\n\r\n            var dec = whole.toString() + '.' + narr.join('');\r\n            return sign + dec;\r\n        },\r\n        toDecimal: function (prec) { \r\n            prec = prec || Settings.PRECISION;\r\n            if(prec) {\r\n                return this.decimal(prec);\r\n            }\r\n            else {\r\n                return this.num / this.den;\r\n            }\r\n        },\r\n        qcompare: function (n) {\r\n            return [this.num.multiply(n.den), n.num.multiply(this.den)];\r\n        },\r\n        equals: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].equals(q[1]);\r\n        },\r\n        absEquals: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].abs().equals(q[1]);\r\n        },\r\n        //lazy check to be fixed. Sufficient for now but will cause future problems\r\n        greaterThan: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].gt(q[1]);\r\n        },\r\n        gte: function (n) {\r\n            return this.greaterThan(n) || this.equals(n);\r\n        },\r\n        lte: function (n) {\r\n            return this.lessThan(n) || this.equals(n);\r\n        },\r\n        lessThan: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].lt(q[1]);\r\n        },\r\n        isInteger: function () {\r\n            return this.den.equals(1);\r\n        },\r\n        negate: function () {\r\n            this.num = this.num.multiply(-1);\r\n            return this;\r\n        },\r\n        invert: function () {\r\n            var t = this.den;\r\n            //why invert 0/1? It'll become 1/0 and that's a lie.\r\n            if(!this.num.equals(0)) {\r\n                var isnegative = this.num.isNegative();\r\n                this.den = this.num.abs();\r\n                this.num = t;\r\n                if(isnegative)\r\n                    this.num = this.num.multiply(-1);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        isOne: function () {\r\n            return this.num.equals(1) && this.den.equals(1);\r\n        },\r\n        sign: function () {\r\n            return this.num.isNegative() ? -1 : 1;\r\n        },\r\n        abs: function () {\r\n            this.num = this.num.abs();\r\n            return this;\r\n        },\r\n        gcd: function (f) {\r\n            return Frac.quick(bigInt.gcd(f.num, this.num), bigInt.lcm(f.den, this.den));\r\n        },\r\n        toString: function () {\r\n            return !this.den.equals(1) ? this.num.toString() + '/' + this.den.toString() : this.num.toString();\r\n        },\r\n        valueOf: function () {\r\n//            if(this.num == 24) throw new Error(999)\r\n            if(Settings.USE_BIG)\r\n                return new bigDec(this.num.toString()).div(new bigDec(this.den.toString()));\r\n            var retval = this.num / this.den;\r\n            return retval;\r\n        },\r\n        isNegative: function () {\r\n            return this.toDecimal() < 0;\r\n        }\r\n    };\r\n\r\n//Symbol =======================================================================\r\n    /**\r\n     * All symbols e.g. x, y, z, etc or functions are wrapped in this class. All symbols have a multiplier and a group.\r\n     * All symbols except for \"numbers (group N)\" have a power.\r\n     * @class Primary data type for the Parser.\r\n     * @param {String} obj\r\n     * @returns {Symbol}\r\n     */\r\n    function Symbol(obj) {\r\n        var isInfinity = obj === 'Infinity';\r\n        // This enables the class to be instantiated without the new operator\r\n        if(!(this instanceof Symbol)) {\r\n            return new Symbol(obj);\r\n        }\r\n        // Convert big numbers to a string\r\n        if(obj instanceof bigDec) {\r\n            obj = obj.toString();\r\n        }\r\n        //define numeric symbols\r\n        if(/^(\\-?\\+?\\d+)\\.?\\d*e?\\-?\\+?\\d*/i.test(obj) || obj instanceof bigDec) {\r\n            this.group = N;\r\n            this.value = CONST_HASH;\r\n            this.multiplier = new Frac(obj);\r\n        }\r\n        //define symbolic symbols\r\n        else {\r\n            this.group = S;\r\n            validateName(obj);\r\n            this.value = obj;\r\n            this.multiplier = new Frac(1);\r\n            this.imaginary = obj === Settings.IMAGINARY;\r\n            this.isInfinity = isInfinity;\r\n        }\r\n\r\n        //As of 6.0.0 we switched to infinite precision so all objects have a power\r\n        //Although this is still redundant in constants, it simplifies the logic in\r\n        //other parts so we'll keep it\r\n        this.power = new Frac(1);\r\n\r\n        // Added to silence the strict warning.\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns vanilla imaginary symbol\r\n     * @returns {Symbol}\r\n     */\r\n    Symbol.imaginary = function () {\r\n        var s = new Symbol(Settings.IMAGINARY);\r\n        s.imaginary = true;\r\n        return s;\r\n    };\r\n    /**\r\n     * Return nerdamer's representation of Infinity\r\n     * @param {int} negative -1 to return negative infinity\r\n     * @returns {Symbol}\r\n     */\r\n    Symbol.infinity = function (negative) {\r\n        var v = new Symbol('Infinity');\r\n        if(negative === -1)\r\n            v.negate();\r\n        return v;\r\n    };\r\n    Symbol.shell = function (group, value) {\r\n        var symbol = new Symbol(value);\r\n        symbol.group = group;\r\n        symbol.symbols = {};\r\n        symbol.length = 0;\r\n        return symbol;\r\n    };\r\n    //sqrt(x) -> x^(1/2)\r\n    Symbol.unwrapSQRT = function (symbol, all) {\r\n        var p = symbol.power;\r\n        if(symbol.fname === SQRT && (symbol.isLinear() || all)) {\r\n            var t = symbol.args[0].clone();\r\n            t.power = t.power.multiply(new Frac(1 / 2));\r\n            t.multiplier = t.multiplier.multiply(symbol.multiplier);\r\n            symbol = t;\r\n            if(all)\r\n                symbol.power = p.multiply(new Frac(1 / 2));\r\n        }\r\n\r\n        return symbol;\r\n    };\r\n    Symbol.hyp = function (a, b) {\r\n        a = a || new Symbol(0);\r\n        b = b || new Symbol(0);\r\n        return _.sqrt(_.add(_.pow(a.clone(), new Symbol(2)), _.pow(b.clone(), new Symbol(2))));\r\n    };\r\n    //converts to polar form array\r\n    Symbol.toPolarFormArray = function (symbol) {\r\n        var re, im, r, theta;\r\n        re = symbol.realpart();\r\n        im = symbol.imagpart();\r\n        r = Symbol.hyp(re, im);\r\n        theta = re.equals(0) ? _.parse('pi/2') : _.trig.atan(_.divide(im, re));\r\n        return [r, theta];\r\n    };\r\n    //removes parentheses\r\n    Symbol.unwrapPARENS = function (symbol) {\r\n        if(symbol.fname === '') {\r\n            var r = symbol.args[0];\r\n            r.power = r.power.multiply(symbol.power);\r\n            r.multiplier = r.multiplier.multiply(symbol.multiplier);\r\n            if(symbol.fname === '')\r\n                return Symbol.unwrapPARENS(r);\r\n            return r;\r\n        }\r\n        return symbol;\r\n    };\r\n    //quickly creates a Symbol\r\n    Symbol.create = function (value, power) {\r\n        power = power === undefined ? 1 : power;\r\n        return _.parse('(' + value + ')^(' + power + ')');\r\n    };\r\n    Symbol.prototype = {\r\n        /**\r\n         * Gets nth root accounting for rounding errors\r\n         * @param {Number} n\r\n         * @return {Number}\r\n         */\r\n        getNth: function (n) {\r\n            // First calculate the root\r\n            var root = evaluate(_.pow(_.parse(this.multiplier), _.parse(n).invert()));\r\n            // Round of any errors\r\n            var rounded = _.parse(nround(root));\r\n            // Reverse the root\r\n            var e = evaluate(_.pow(rounded, _.parse(n)));\r\n            // If the rounded root equals the original number then we're good \r\n            if(e.equals(_.parse(this.multiplier))) {\r\n                return rounded;\r\n            }\r\n            // Otherwise return the unrounded version\r\n            return root;\r\n        },\r\n        /**\r\n         * Checks if symbol is to the nth power\r\n         * @returns {Boolean}\r\n         */\r\n        isToNth: function (n) {\r\n            // Start by check in the multiplier for squareness\r\n            // First get the root but round it because currently we still depend \r\n            var root = this.getNth(n);\r\n            var nthMultiplier = isInt(root);\r\n            var nthPower;\r\n\r\n            if(this.group === CB) {\r\n                // Start by assuming that all will be square.\r\n                nthPower = true;\r\n                // All it takes is for one of the symbols to not have an even power\r\n                // e.g. x^n1*y^n2 requires that both n1 and n2 are even\r\n                this.each(function (x) {\r\n                    var isNth = x.isToNth(n);\r\n\r\n                    if(!isNth) {\r\n                        nthPower = false;\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                // Check if the power is divisible by n if it's not a number.\r\n                nthPower = this.group === N ? true : isInt(_.divide(_.parse(this.power), _.parse(n)));\r\n            }\r\n\r\n            return nthMultiplier && nthPower;\r\n        },\r\n        /**\r\n         * Checks if a symbol is square\r\n         * @return {Boolean}\r\n         */\r\n        isSquare: function () {\r\n            return this.isToNth(2);\r\n        },\r\n        /**\r\n         * Checks if a symbol is cube\r\n         * @return {Boolean}\r\n         */\r\n        isCube: function () {\r\n            return this.isToNth(3);\r\n        },\r\n        /**\r\n         * Checks if a symbol is a bare variable\r\n         * @return {Boolean}\r\n         */\r\n        isSimple: function () {\r\n            return this.power.equals(1) && this.multiplier.equals(1);\r\n        },\r\n        /**\r\n         * Simplifies the power of the symbol\r\n         * @returns {Symbol} a clone of the symbol\r\n         */\r\n        powSimp: function () {\r\n            if(this.group === CB) {\r\n                var powers = [],\r\n                        sign = this.multiplier.sign();\r\n                this.each(function (x) {\r\n                    var p = x.power;\r\n                    //why waste time if I can't do anything anyway\r\n                    if(isSymbol(p) || p.equals(1))\r\n                        return this.clone();\r\n                    powers.push(p);\r\n                });\r\n                var min = new Frac(arrayMin(powers));\r\n\r\n                //handle the coefficient\r\n                //handle the multiplier\r\n                var sign = this.multiplier.sign(),\r\n                        m = this.multiplier.clone().abs(),\r\n                        mfactors = Math2.ifactor(m);\r\n                //if we have a multiplier of 6750 and a min of 2 then the factors are 5^3*5^3*2\r\n                //we can then reduce it to 2*3*5*(15)^2\r\n                var out_ = new Frac(1);\r\n                var in_ = new Frac(1);\r\n\r\n                for(var x in mfactors) {\r\n                    var n = new Frac(mfactors[x]);\r\n                    if(!n.lessThan(min)) {\r\n                        n = n.divide(min).subtract(new Frac(1));\r\n                        in_ = in_.multiply(new Frac(x)); //move the factor inside the bracket\r\n                    }\r\n\r\n                    out_ = out_.multiply(_.parse(inBrackets(x) + '^' + inBrackets(n)).multiplier);\r\n                }\r\n                var t = new Symbol(in_);\r\n                this.each(function (x) {\r\n                    x = x.clone();\r\n                    x.power = x.power.divide(min);\r\n                    t = _.multiply(t, x);\r\n                });\r\n\r\n                var xt = _.symfunction(PARENTHESIS, [t]);\r\n                xt.power = min;\r\n                xt.multiplier = sign < 0 ? out_.negate() : out_;\r\n\r\n                return xt;\r\n            }\r\n            return this.clone();\r\n        },\r\n        /**\r\n         * Checks to see if two functions are of equal value\r\n         * @param {Symbol} symbol\r\n         */\r\n        equals: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.value === symbol.value && this.power.equals(symbol.power)\r\n                    && this.multiplier.equals(symbol.multiplier)\r\n                    && this.group === symbol.group;\r\n        },\r\n        abs: function () {\r\n            var e = this.clone();\r\n            e.multiplier.abs();\r\n            return e;\r\n        },\r\n        // Greater than\r\n        gt: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\r\n        },\r\n        // Greater than\r\n        gte: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.equals(symbol) ||\r\n                    this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\r\n        },\r\n        // Less than\r\n        lt: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\r\n        },\r\n        // Less than\r\n        lte: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.equals(symbol) ||\r\n                    this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\r\n        },\r\n        /**\r\n         * Because nerdamer doesn't group symbols by polynomials but\r\n         * rather a custom grouping method, this has to be\r\n         * reinserted in order to make use of most algorithms. This function\r\n         * checks if the symbol meets the criteria of a polynomial.\r\n         * @param {bool} multivariate\r\n         * @returns {boolean}\r\n         */\r\n        isPoly: function (multivariate) {\r\n            var g = this.group,\r\n                    p = this.power;\r\n            //the power must be a integer so fail if it's not\r\n            if(!isInt(p) || p < 0)\r\n                return false;\r\n            //constants and first orders\r\n            if(g === N || g === S || this.isConstant(true))\r\n                return true;\r\n            var vars = variables(this);\r\n            if(g === CB && vars.length === 1) {\r\n                //the variable is assumed the only one that was found\r\n                var v = vars[0];\r\n                //if no variable then guess what!?!? We're done!!! We have a polynomial.\r\n                if(!v)\r\n                    return true;\r\n                for(var x in this.symbols) {\r\n                    var sym = this.symbols[x];\r\n                    //sqrt(x)\r\n                    if(sym.group === FN && !sym.args[0].isConstant())\r\n                        return false;\r\n                    if(!sym.contains(v) && !sym.isConstant(true))\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n            //PL groups. These only fail if a power is not an int\r\n            //this should handle cases such as x^2*t\r\n            if(this.isComposite() || g === CB && multivariate) {\r\n                //fail if we're not checking for multivariate polynomials\r\n                if(!multivariate && vars.length > 1)\r\n                    return false;\r\n                //loop though the symbols and check if they qualify\r\n                for(var x in this.symbols) {\r\n                    //we've already the symbols if we're not checking for multivariates at this point\r\n                    //so we check the sub-symbols\r\n                    if(!this.symbols[x].isPoly(multivariate))\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n\r\n            /*\r\n             //all tests must have passed so we must be dealing with a polynomial\r\n             return true;\r\n             */\r\n        },\r\n        //removes the requested variable from the symbol and returns the remainder\r\n        stripVar: function (x, exclude_x) {\r\n            var retval;\r\n            if((this.group === PL || this.group === S) && this.value === x)\r\n                retval = new Symbol(exclude_x ? 0 : this.multiplier);\r\n            else if(this.group === CB && this.isLinear()) {\r\n                retval = new Symbol(1);\r\n                this.each(function (s) {\r\n                    if(!s.contains(x, true))\r\n                        retval = _.multiply(retval, s.clone());\r\n                });\r\n                retval.multiplier = retval.multiplier.multiply(this.multiplier);\r\n            }\r\n            else if(this.group === CP && !this.isLinear()) {\r\n                retval = new Symbol(this.multiplier);\r\n            }\r\n            else if(this.group === CP && this.isLinear()) {\r\n                retval = new Symbol(0);\r\n                this.each(function (s) {\r\n                    if(!s.contains(x)) {\r\n                        var t = s.clone();\r\n                        t.multiplier = t.multiplier.multiply(this.multiplier);\r\n                        retval = _.add(retval, t);\r\n                    }\r\n                });\r\n                //BIG TODO!!! It doesn't make much sense\r\n                if(retval.equals(0))\r\n                    retval = new Symbol(this.multiplier);\r\n            }\r\n            else if(this.group === EX && this.power.contains(x, true)) {\r\n                retval = new Symbol(this.multiplier);\r\n            }\r\n            else if(this.group === FN && this.contains(x)) {\r\n                retval = new Symbol(this.multiplier);\r\n            }\r\n            else\r\n                //wth? This should technically be the multiplier.\r\n                //Unfortunately this method wasn't very well thought out :`(.\r\n                //should be: retval = new Symbol(this.multiplier);\r\n                //use: ((1+x^2)*sqrt(-1+x^2))^(-1) for correction.\r\n                //this will break a bunch of unit tests so be ready to for the long haul\r\n                retval = this.clone();\r\n\r\n\r\n            return retval;\r\n        },\r\n        //returns symbol in array form with x as base e.g. a*x^2+b*x+c = [c, b, a].\r\n        toArray: function (v, arr) {\r\n            arr = arr || {\r\n                arr: [],\r\n                add: function (x, idx) {\r\n                    var e = this.arr[idx];\r\n                    this.arr[idx] = e ? _.add(e, x) : x;\r\n                }\r\n            };\r\n            var g = this.group;\r\n\r\n            if(g === S && this.contains(v)) {\r\n                arr.add(new Symbol(this.multiplier), this.power);\r\n            }\r\n            else if(g === CB) {\r\n                var a = this.stripVar(v),\r\n                        x = _.divide(this.clone(), a.clone());\r\n                var p = x.isConstant() ? 0 : x.power;\r\n                arr.add(a, p);\r\n            }\r\n            else if(g === PL && this.value === v) {\r\n                this.each(function (x, p) {\r\n                    arr.add(x.stripVar(v), p);\r\n                });\r\n            }\r\n            else if(g === CP) {\r\n                //the logic: they'll be broken into symbols so e.g. (x^2+x)+1 or (a*x^2+b*x+c)\r\n                //each case is handled above\r\n                this.each(function (x) {\r\n                    x.toArray(v, arr);\r\n                });\r\n            }\r\n            else if(this.contains(v)) {\r\n                throw new NerdamerTypeError('Cannot convert to array! Exiting');\r\n            }\r\n            else {\r\n                arr.add(this.clone(), 0); //it's just a constant wrt to v\r\n            }\r\n            //fill the holes\r\n            arr = arr.arr; //keep only the array since we don't need the object anymore\r\n            for(var i = 0; i < arr.length; i++)\r\n                if(!arr[i])\r\n                    arr[i] = new Symbol(0);\r\n            return arr;\r\n        },\r\n        //checks to see if a symbol contans a function\r\n        hasFunc: function (v) {\r\n            var fn_group = this.group === FN || this.group === EX;\r\n            if(fn_group && !v || fn_group && this.contains(v))\r\n                return true;\r\n            if(this.symbols) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].hasFunc(v))\r\n                        return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        sub: function (a, b) {\r\n            a = !isSymbol(a) ? _.parse(a) : a.clone();\r\n            b = !isSymbol(b) ? _.parse(b) : b.clone();\r\n            if(a.group === N || a.group === P)\r\n                err('Cannot substitute a number. Must be a variable');\r\n            var same_pow = false,\r\n                    a_is_unit_multiplier = a.multiplier.equals(1),\r\n                    m = this.multiplier.clone(),\r\n                    retval;\r\n            /*\r\n             * In order to make the substitution the bases have to first match take\r\n             * (x+1)^x -> (x+1)=y || x^2 -> x=y^6\r\n             * In both cases the first condition is that the bases match so we begin there\r\n             * Either both are PL or both are not PL but we cannot have PL and a non-PL group match\r\n             */\r\n            if(this.value === a.value && (this.group !== PL && a.group !== PL || this.group === PL && a.group === PL)) {\r\n                //we cleared the first hurdle but a subsitution may not be possible just yet\r\n                if(a_is_unit_multiplier || a.multiplier.equals(this.multiplier)) {\r\n                    if(a.isLinear()) {\r\n                        retval = b;\r\n                    }\r\n                    else if(a.power.equals(this.power)) {\r\n                        retval = b;\r\n                        same_pow = true;\r\n                    }\r\n                    if(a.multiplier.equals(this.multiplier))\r\n                        m = new Frac(1);\r\n                }\r\n            }\r\n            //the next thing is to handle CB\r\n            else if(this.group === CB || this.previousGroup === CB) {\r\n                retval = new Symbol(1);\r\n                this.each(function (x) {\r\n                    var subbed = _.parse(x.sub(a, b)); //parse it again for safety\r\n                    retval = _.multiply(retval, subbed);\r\n\r\n                });\r\n            }\r\n            else if(this.isComposite()) {\r\n                var symbol = this.clone();\r\n\r\n                if(a.isComposite() && symbol.isComposite() && symbol.isLinear() && a.isLinear()) {\r\n                    var find = function (stack, needle) {\r\n                        for(var x in stack.symbols) {\r\n                            var sym = stack.symbols[x];\r\n                            //if the symbol equals the needle or it's within the sub-symbols we're done\r\n                            if(sym.isComposite() && find(sym, needle) || sym.equals(needle))\r\n                                return true;\r\n                        }\r\n                        return false;\r\n                    };\r\n                    //go fish\r\n                    for(var x in a.symbols) {\r\n                        if(!find(symbol, a.symbols[x]))\r\n                            return symbol.clone();\r\n                    }\r\n                    retval = _.add(_.subtract(symbol.clone(), a), b);\r\n                }\r\n                else {\r\n                    retval = new Symbol(0);\r\n                    symbol.each(function (x) {\r\n                        retval = _.add(retval, x.sub(a, b));\r\n                    });\r\n                }\r\n            }\r\n            else if(this.group === EX) {\r\n                // the parsed value could be a function so parse and sub\r\n                retval = _.parse(this.value).sub(a, b);\r\n            }\r\n            else if(this.group === FN) {\r\n                var nargs = [];\r\n                for(var i = 0; i < this.args.length; i++) {\r\n                    var arg = this.args[i];\r\n                    if(!isSymbol(arg))\r\n                        arg = _.parse(arg);\r\n                    nargs.push(arg.sub(a, b));\r\n                }\r\n                retval = _.symfunction(this.fname, nargs);\r\n            }\r\n            //if we did manage a substitution\r\n            if(retval) {\r\n                if(!same_pow) {\r\n                    //substitute the power\r\n                    var p = this.group === EX ? this.power.sub(a, b) : _.parse(this.power);\r\n                    //now raise the symbol to that power\r\n                    retval = _.pow(retval, p);\r\n                }\r\n\r\n                //transfer the multiplier\r\n                retval.multiplier = retval.multiplier.multiply(m);\r\n\r\n                //done\r\n                return retval;\r\n            }\r\n            //if all else fails\r\n            return this.clone();\r\n        },\r\n        isMonomial: function () {\r\n            if(this.group === S)\r\n                return true;\r\n            if(this.group === CB) {\r\n                for(var x in this.symbols)\r\n                    if(this.symbols[x].group !== S)\r\n                        return false;\r\n            }\r\n            else\r\n                return false;\r\n            return true;\r\n        },\r\n        isPi: function () {\r\n            return this.group === S && this.value === 'pi';\r\n        },\r\n        sign: function () {\r\n            return this.multiplier.sign();\r\n        },\r\n        isE: function () {\r\n            return this.value === 'e';\r\n        },\r\n        isSQRT: function () {\r\n            return this.fname === SQRT;\r\n        },\r\n        isConstant: function (check_all, check_symbols) {\r\n            if(check_symbols && this.group === CB) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].isConstant(true))\r\n                        return true;\r\n                }\r\n            }\r\n\r\n            if(check_all === 'functions' && this.isComposite()) {\r\n                var isConstant = true;\r\n\r\n                this.each(function (x) {\r\n                    if(!x.isConstant(check_all, check_symbols)) {\r\n                        isConstant = false;\r\n                    }\r\n                }, true);\r\n\r\n                return isConstant;\r\n            }\r\n\r\n            if(check_all === 'all' && (this.isPi() || this.isE())) {\r\n                return true;\r\n            }\r\n\r\n            if(check_all && this.group === FN) {\r\n                for(var i = 0; i < this.args.length; i++) {\r\n                    if(!this.args[i].isConstant(check_all))\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n\r\n            if(check_all)\r\n                return isNumericSymbol(this);\r\n            return this.value === CONST_HASH;\r\n        },\r\n        //the symbols is imaginary if\r\n        //1. n*i\r\n        //2. a+b*i\r\n        //3. a*i\r\n        isImaginary: function () {\r\n            if(this.imaginary)\r\n                return true;\r\n            else if(this.symbols) {\r\n                for(var x in this.symbols)\r\n                    if(this.symbols[x].isImaginary())\r\n                        return true;\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Returns the real part of a symbol\r\n         * @returns {Symbol}\r\n         */\r\n        realpart: function () {\r\n            if(this.isConstant()) {\r\n                return this.clone();\r\n            }\r\n            else if(this.imaginary)\r\n                return new Symbol(0);\r\n            else if(this.isComposite()) {\r\n                var retval = new Symbol(0);\r\n                this.each(function (x) {\r\n                    retval = _.add(retval, x.realpart());\r\n                });\r\n                return retval;\r\n            }\r\n            else if(this.isImaginary())\r\n                return new Symbol(0);\r\n            return this.clone();\r\n        },\r\n        /*\r\n         * Return imaginary part of a symbol\r\n         * @returns {Symbol}\r\n         */\r\n        imagpart: function () {\r\n            if(this.group === S && this.isImaginary())\r\n                return new Symbol(this.multiplier);\r\n            if(this.isComposite()) {\r\n                var retval = new Symbol(0);\r\n                this.each(function (x) {\r\n                    retval = _.add(retval, x.imagpart());\r\n                });\r\n                return retval;\r\n            }\r\n            if(this.group === CB)\r\n                return this.stripVar(Settings.IMAGINARY);\r\n            return new Symbol(0);\r\n        },\r\n        isInteger: function () {\r\n            return this.isConstant() && this.multiplier.isInteger();\r\n        },\r\n        isLinear: function (wrt) {\r\n            if(wrt) {\r\n                if(this.isConstant())\r\n                    return true;\r\n                if(this.group === S) {\r\n                    if(this.value === wrt)\r\n                        return this.power.equals(1);\r\n                    else\r\n                        return true;\r\n                }\r\n\r\n                if(this.isComposite() && this.power.equals(1)) {\r\n                    for(var x in this.symbols) {\r\n                        if(!this.symbols[x].isLinear(wrt))\r\n                            return false;\r\n                    }\r\n                    return true;\r\n                }\r\n\r\n                if(this.group === CB && this.symbols[wrt])\r\n                    return this.symbols[wrt].isLinear(wrt);\r\n                return false;\r\n            }\r\n            else\r\n                return this.power.equals(1);\r\n        },\r\n        /**\r\n         * Checks to see if a symbol has a function by a specified name or within a specified list\r\n         * @param {String|String[]} names\r\n         * @returns {Boolean}\r\n         */\r\n        containsFunction: function (names) {\r\n            if(typeof names === 'string')\r\n                names = [names];\r\n            if(this.group === FN && names.indexOf(this.fname) !== -1)\r\n                return true;\r\n            if(this.symbols) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].containsFunction(names))\r\n                        return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        multiplyPower: function (p2) {\r\n            //leave out 1\r\n            if(this.group === N && this.multiplier.equals(1))\r\n                return this;\r\n\r\n            var p1 = this.power;\r\n\r\n            if(this.group !== EX && p2.group === N) {\r\n                var p = p2.multiplier;\r\n                if(this.group === N && !p.isInteger()) {\r\n                    this.convert(P);\r\n                }\r\n\r\n                this.power = p1.equals(1) ? p.clone() : p1.multiply(p);\r\n\r\n                if(this.group === P && isInt(this.power)) {\r\n                    //bring it back to an N\r\n                    this.value = Math.pow(this.value, this.power);\r\n                    this.toLinear();\r\n                    this.convert(N);\r\n                }\r\n            }\r\n            else {\r\n                if(this.group !== EX) {\r\n                    p1 = new Symbol(p1);\r\n                    this.convert(EX);\r\n                }\r\n                this.power = _.multiply(p1, p2);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        setPower: function (p, retainSign) {\r\n            //leave out 1\r\n            if(this.group === N && this.multiplier.equals(1)) {\r\n                return this;\r\n            }\r\n            if(this.group === EX && !isSymbol(p)) {\r\n                this.group = this.previousGroup;\r\n                delete this.previousGroup;\r\n                if(this.group === N) {\r\n                    this.multiplier = new Frac(this.value);\r\n                    this.value = CONST_HASH;\r\n                }\r\n                else\r\n                    this.power = p;\r\n            }\r\n            else {\r\n                var isSymbolic = false;\r\n                if(isSymbol(p)) {\r\n                    if(p.group === N) {\r\n                        //p should be the multiplier instead\r\n                        p = p.multiplier;\r\n\r\n                    }\r\n                    else {\r\n                        isSymbolic = true;\r\n                    }\r\n                }\r\n                var group = isSymbolic ? EX : P;\r\n                this.power = p;\r\n                if(this.group === N && group)\r\n                    this.convert(group, retainSign);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /**\r\n         * Checks to see if symbol is located in the denominator\r\n         * @returns {boolean}\r\n         */\r\n        isInverse: function () {\r\n            if(this.group === EX)\r\n                return (this.power.multiplier.lessThan(0));\r\n            return this.power < 0;\r\n        },\r\n        /**\r\n         * Make a duplicate of a symbol by copying a predefined list of items.\r\n         * The name 'copy' would probably be a more appropriate name.\r\n         * to a new symbol\r\n         * @param {Symbol} c\r\n         * @returns {Symbol}\r\n         */\r\n        clone: function (c) {\r\n            var clone = c || new Symbol(0),\r\n                    //list of properties excluding power as this may be a symbol and would also need to be a clone.\r\n                    properties = [\r\n                        'value', 'group', 'length', 'previousGroup', 'imaginary', 'fname', 'args', 'isInfinity', 'scientific'],\r\n                    l = properties.length, i;\r\n            if(this.symbols) {\r\n                clone.symbols = {};\r\n                for(var x in this.symbols) {\r\n                    clone.symbols[x] = this.symbols[x].clone();\r\n                }\r\n            }\r\n\r\n            for(i = 0; i < l; i++) {\r\n                if(this[properties[i]] !== undefined) {\r\n                    clone[properties[i]] = this[properties[i]];\r\n                }\r\n            }\r\n\r\n            clone.power = this.power.clone();\r\n            clone.multiplier = this.multiplier.clone();\r\n            //add back the flag to track if this symbol is a conversion symbol\r\n            if(this.isConversion)\r\n                clone.isConversion = this.isConversion;\r\n\r\n            if(this.isUnit)\r\n                clone.isUnit = this.isUnit;\r\n\r\n            return clone;\r\n        },\r\n        /**\r\n         * Converts a symbol multiplier to one.\r\n         * @param {Boolean} keepSign Keep the multiplier as negative if the multiplier is negative and keepSign is true\r\n         * @returns {Symbol}\r\n         */\r\n        toUnitMultiplier: function (keepSign) {\r\n            this.multiplier.num = new bigInt(this.multiplier.num.isNegative() && keepSign ? -1 : 1);\r\n            this.multiplier.den = new bigInt(1);\r\n            return this;\r\n        },\r\n        /**\r\n         * Converts a Symbol's power to one.\r\n         * @returns {Symbol}\r\n         */\r\n        toLinear: function () {\r\n            // Do nothing if it's already linear\r\n            if(this.power.equals(1)) {\r\n                return this;\r\n            }\r\n            this.setPower(new Frac(1));\r\n            return this;\r\n        },\r\n        /**\r\n         * Iterates over all the sub-symbols. If no sub-symbols exist then it's called on itself\r\n         * @param {Function} fn\r\n         * @@param {Boolean} deep If true it will itterate over the sub-symbols their symbols as well\r\n         */\r\n        each: function (fn, deep) {\r\n            if(!this.symbols) {\r\n                fn.call(this, this, this.value);\r\n            }\r\n            else {\r\n                for(var x in this.symbols) {\r\n                    var sym = this.symbols[x];\r\n                    if(sym.group === PL && deep) {\r\n                        for(var y in sym.symbols) {\r\n                            fn.call(x, sym.symbols[y], y);\r\n                        }\r\n                    }\r\n                    else\r\n                        fn.call(this, sym, x);\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * A numeric value to be returned for Javascript. It will try to\r\n         * return a number as far a possible but in case of a pure symbolic\r\n         * symbol it will just return its text representation\r\n         * @returns {String|Number}\r\n         */\r\n        valueOf: function () {\r\n            if(this.group === N)\r\n                return this.multiplier.valueOf();\r\n            else if(this.power === 0) {\r\n                return 1;\r\n            }\r\n            else if(this.multiplier === 0) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return text(this, 'decimals');\r\n            }\r\n        },\r\n        /**\r\n         * Checks to see if a symbols has a particular variable within it.\r\n         * Pass in true as second argument to include the power of exponentials\r\n         * which aren't check by default.\r\n         * @example var s = _.parse('x+y+z'); s.contains('y');\r\n         * //returns true\r\n         * @param {any} variable\r\n         * @param {boolean} all\r\n         * @returns {boolean}\r\n         */\r\n        contains: function (variable, all) {\r\n            //contains expects a string\r\n            variable = String(variable);\r\n            var g = this.group;\r\n            if(this.value === variable)\r\n                return true;\r\n            if(this.symbols) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].contains(variable, all))\r\n                        return true;\r\n                }\r\n            }\r\n            if(g === FN || this.previousGroup === FN) {\r\n                for(var i = 0; i < this.args.length; i++) {\r\n                    if(this.args[i].contains(variable, all))\r\n                        return true;\r\n                }\r\n            }\r\n\r\n            if(g === EX) {\r\n                //exit only if it does\r\n                if(all && this.power.contains(variable, all)) {\r\n                    return true;\r\n                }\r\n                if(this.value === variable)\r\n                    return true;\r\n\r\n            }\r\n\r\n            return this.value === variable;\r\n        },\r\n        /**\r\n         * Negates a symbols\r\n         * @returns {boolean}\r\n         */\r\n        negate: function () {\r\n            this.multiplier.negate();\r\n            if(this.group === CP || this.group === PL)\r\n                this.distributeMultiplier();\r\n            return this;\r\n        },\r\n        /**\r\n         * Inverts a symbol\r\n         * @param {boolean} power_only\r\n         * @param {boolean} all\r\n         * @returns {boolean}\r\n         */\r\n        invert: function (power_only, all) {\r\n            //invert the multiplier\r\n            if(!power_only)\r\n                this.multiplier = this.multiplier.invert();\r\n            //invert the rest\r\n            if(isSymbol(this.power)) {\r\n                this.power.negate();\r\n            }\r\n            else if(this.group === CB && all) {\r\n                this.each(function (x) {\r\n                    return x.invert();\r\n                });\r\n            }\r\n            else {\r\n                if(this.power && this.group !== N)\r\n                    this.power.negate();\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * Symbols of group CP or PL may have the multiplier being carried by\r\n         * the top level symbol at any given time e.g. 2*(x+y+z). This is\r\n         * convenient in many cases, however in some cases the multiplier needs\r\n         * to be carried individually e.g. 2*x+2*y+2*z.\r\n         * This method distributes the multiplier over the entire symbol\r\n         * @param {boolean} all\r\n         * @returns {Symbol}\r\n         */\r\n        distributeMultiplier: function (all) {\r\n            var is_one = all ? this.power.absEquals(1) : this.power.equals(1);\r\n            if(this.symbols && is_one && this.group !== CB && !this.multiplier.equals(1)) {\r\n                for(var x in this.symbols) {\r\n                    var s = this.symbols[x];\r\n                    s.multiplier = s.multiplier.multiply(this.multiplier);\r\n                    s.distributeMultiplier();\r\n                }\r\n                this.toUnitMultiplier();\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /**\r\n         * This method expands the exponent over the entire symbol just like\r\n         * distributeMultiplier\r\n         * @returns {Symbol}\r\n         */\r\n        distributeExponent: function () {\r\n            if(!this.power.equals(1)) {\r\n                var p = this.power;\r\n                for(var x in this.symbols) {\r\n                    var s = this.symbols[x];\r\n                    if(s.group === EX) {\r\n                        s.power = _.multiply(s.power, new Symbol(p));\r\n                    }\r\n                    else {\r\n                        this.symbols[x].power = this.symbols[x].power.multiply(p);\r\n                    }\r\n                }\r\n                this.toLinear();\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * This method will attempt to up-convert or down-convert one symbol\r\n         * from one group to another. Not all symbols are convertible from one\r\n         * group to another however. In that case the symbol will remain\r\n         * unchanged.\r\n         * @param {int} group\r\n         * @param {string} imaginary\r\n         */\r\n        convert: function (group, imaginary) {\r\n            if(group > FN) {\r\n                //make a clone of this symbol;\r\n                var cp = this.clone();\r\n\r\n                //attach a symbols object and upgrade the group\r\n                this.symbols = {};\r\n\r\n                if(group === CB) {\r\n                    //symbol of group CB hold symbols bound together through multiplication\r\n                    //because of commutativity this multiplier can technically be anywhere within the group\r\n                    //to keep track of it however it's easier to always have the top level carry it\r\n                    cp.toUnitMultiplier();\r\n                }\r\n                else {\r\n                    //reset the symbol\r\n                    this.toUnitMultiplier();\r\n                }\r\n\r\n                if(this.group === FN) {\r\n                    cp.args = this.args;\r\n                    delete this.args;\r\n                    delete this.fname;\r\n                }\r\n\r\n                //the symbol may originate from the symbol i but this property no longer holds true\r\n                //after copying\r\n                if(this.isImgSymbol)\r\n                    delete this.isImgSymbol;\r\n\r\n                this.toLinear();\r\n                //attach a clone of this symbol to the symbols object using its proper key\r\n                this.symbols[cp.keyForGroup(group)] = cp;\r\n                this.group = group;\r\n                //objects by default don't have a length property. However, in order to keep track of the number\r\n                //of sub-symbols we have to impliment our own.\r\n                this.length = 1;\r\n            }\r\n            else if(group === EX) {\r\n                //1^x is just one so check and make sure\r\n                if(!(this.group === N && this.multiplier.equals(1))) {\r\n                    if(this.group !== EX)\r\n                        this.previousGroup = this.group;\r\n                    if(this.group === N) {\r\n                        this.value = this.multiplier.num.toString();\r\n                        this.toUnitMultiplier();\r\n                    }\r\n                    //update the hash to reflect the accurate hash\r\n                    else\r\n                        this.value = text(this, 'hash');\r\n\r\n                    this.group = EX;\r\n                }\r\n            }\r\n            else if(group === N) {\r\n                var m = this.multiplier.toDecimal();\r\n                if(this.symbols)\r\n                    this.symbols = undefined;\r\n                new Symbol(this.group === P ? m * Math.pow(this.value, this.power) : m).clone(this);\r\n            }\r\n            else if(group === P && this.group === N) {\r\n                this.value = imaginary ? this.multiplier.num.toString() : Math.abs(this.multiplier.num.toString());\r\n                this.toUnitMultiplier(!imaginary);\r\n                this.group = P;\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * This method is one of the principal methods to make it all possible.\r\n         * It performs cleanup and prep operations whenever a symbols is\r\n         * inserted. If the symbols results in a 1 in a CB (multiplication)\r\n         * group for instance it will remove the redundant symbol. Similarly\r\n         * in a symbol of group PL or CP (symbols glued by multiplication) it\r\n         * will remove any dangling zeroes from the symbol. It will also\r\n         * up-convert or down-convert a symbol if it detects that it's\r\n         * incorrectly grouped. It should be noted that this method is not\r\n         * called directly but rather by the 'attach' method for addition groups\r\n         * and the 'combine' method for multiplication groups.\r\n         * @param {Symbol} symbol\r\n         * @param {String} action\r\n         */\r\n        insert: function (symbol, action) {\r\n            //this check can be removed but saves a lot of aggravation when trying to hunt down\r\n            //a bug. If left, you will instantly know that the error can only be between 2 symbols.\r\n            if(!isSymbol(symbol))\r\n                err('Object ' + symbol + ' is not of type Symbol!');\r\n            if(this.symbols) {\r\n                var group = this.group;\r\n                if(group > FN) {\r\n                    var key = symbol.keyForGroup(group);\r\n                    var existing = key in this.symbols ? this.symbols[key] : false; //check if there's already a symbol there\r\n                    if(action === 'add') {\r\n                        var hash = key;\r\n                        if(existing) {\r\n                            //add them together using the parser\r\n                            this.symbols[hash] = _.add(existing, symbol);\r\n                            //if the addition resulted in a zero multiplier remove it\r\n                            if(this.symbols[hash].multiplier.equals(0)) {\r\n                                delete this.symbols[hash];\r\n                                this.length--;\r\n\r\n                                if(this.length === 0) {\r\n                                    this.convert(N);\r\n                                    this.multiplier = new Frac(0);\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.symbols[key] = symbol;\r\n                            this.length++;\r\n                        }\r\n                    }\r\n                    else {\r\n                        //check if this is of group P and unwrap before inserting\r\n                        if(symbol.group === P && isInt(symbol.power)) {\r\n                            symbol.convert(N);\r\n                        }\r\n\r\n                        //transfer the multiplier to the upper symbol but only if the symbol numeric\r\n                        if(symbol.group !== EX) {\r\n                            this.multiplier = this.multiplier.multiply(symbol.multiplier);\r\n                            symbol.toUnitMultiplier();\r\n                        }\r\n                        else {\r\n                            symbol.parens = symbol.multiplier.lessThan(0);\r\n                            this.multiplier = this.multiplier.multiply(symbol.multiplier.clone().abs());\r\n                            symbol.toUnitMultiplier(true);\r\n                        }\r\n\r\n                        if(existing) {\r\n                            //remove because the symbol may have changed\r\n                            symbol = _.multiply(remove(this.symbols, key), symbol);\r\n                            if(symbol.isConstant()) {\r\n                                this.multiplier = this.multiplier.multiply(symbol.multiplier);\r\n                                symbol = new Symbol(1); //the dirty work gets done down the line when it detects 1\r\n                            }\r\n\r\n                            this.length--;\r\n                            //clean up\r\n                        }\r\n\r\n                        //don't insert the symbol if it's 1\r\n                        if(!symbol.isOne(true)) {\r\n                            this.symbols[key] = symbol;\r\n                            this.length++;\r\n                        }\r\n                        else if(symbol.multiplier.lessThan(0)) {\r\n                            this.negate(); //put back the sign\r\n                        }\r\n                    }\r\n\r\n                    //clean up\r\n                    if(this.length === 0)\r\n                        this.convert(N);\r\n                    //update the hash\r\n                    if(this.group === CP || this.group === CB) {\r\n                        this.updateHash();\r\n                    }\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n        //the insert method for addition\r\n        attach: function (symbol) {\r\n            if(isArray(symbol)) {\r\n                for(var i = 0; i < symbol.length; i++)\r\n                    this.insert(symbol[i], 'add');\r\n                return this;\r\n            }\r\n            return this.insert(symbol, 'add');\r\n        },\r\n        //the insert method for multiplication\r\n        combine: function (symbol) {\r\n            if(isArray(symbol)) {\r\n                for(var i = 0; i < symbol.length; i++)\r\n                    this.insert(symbol[i], 'multiply');\r\n                return this;\r\n            }\r\n            return this.insert(symbol, 'multiply');\r\n        },\r\n        /**\r\n         * This method should be called after any major \"surgery\" on a symbol.\r\n         * It updates the hash of the symbol for example if the fname of a\r\n         * function has changed it will update the hash of the symbol.\r\n         */\r\n        updateHash: function () {\r\n            if(this.group === N)\r\n                return;\r\n\r\n            if(this.group === FN) {\r\n                var contents = '',\r\n                        args = this.args,\r\n                        is_parens = this.fname === PARENTHESIS;\r\n                for(var i = 0; i < args.length; i++)\r\n                    contents += (i === 0 ? '' : ',') + text(args[i]);\r\n                var fn_name = is_parens ? '' : this.fname;\r\n                this.value = fn_name + (is_parens ? contents : inBrackets(contents));\r\n            }\r\n            else if(!(this.group === S || this.group === PL)) {\r\n                this.value = text(this, 'hash');\r\n            }\r\n        },\r\n        /**\r\n         * this function defines how every group in stored within a group of\r\n         * higher order think of it as the switchboard for the library. It\r\n         * defines the hashes for symbols.\r\n         * @param {int} group\r\n         */\r\n        keyForGroup: function (group) {\r\n            var g = this.group;\r\n            var key;\r\n\r\n            if(g === N) {\r\n                key = this.value;\r\n            }\r\n            else if(g === S || g === P) {\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = this.value;\r\n            }\r\n            else if(g === FN) {\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = text(this, 'hash');\r\n            }\r\n            else if(g === PL) {\r\n                //if the order is reversed then we'll assume multiplication\r\n                //TODO: possible future dilemma\r\n                if(group === CB)\r\n                    key = text(this, 'hash');\r\n                else if(group === CP) {\r\n                    if(this.power.equals(1))\r\n                        key = this.value;\r\n                    else\r\n                        key = inBrackets(text(this, 'hash')) + Settings.POWER_OPERATOR + this.power.toDecimal();\r\n                }\r\n                else if(group === PL)\r\n                    key = this.power.toString();\r\n                else\r\n                    key = this.value;\r\n                return key;\r\n            }\r\n            else if(g === CP) {\r\n                if(group === CP) {\r\n                    key = text(this, 'hash');\r\n                }\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = this.value;\r\n            }\r\n            else if(g === CB) {\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = text(this, 'hash');\r\n            }\r\n            else if(g === EX) {\r\n                if(group === PL)\r\n                    key = text(this.power);\r\n                else\r\n                    key = text(this, 'hash');\r\n            }\r\n\r\n            return key;\r\n        },\r\n        /**\r\n         * Symbols are typically stored in an object which works fine for most\r\n         * cases but presents a problem when the order of the symbols makes\r\n         * a difference. This function simply collects all the symbols and\r\n         * returns them as an array. If a function is supplied then that\r\n         * function is called on every symbol contained within the object.\r\n         * @param {Function} fn\r\n         * @param {Object} opt\r\n         * @param {Function} sort_fn\r\n         * @@param {Boolean} expand_symbol\r\n         * @returns {Array}\r\n         */\r\n        collectSymbols: function (fn, opt, sort_fn, expand_symbol) {\r\n            var collected = [];\r\n            if(!this.symbols)\r\n                collected.push(this);\r\n            else {\r\n                for(var x in this.symbols) {\r\n                    var symbol = this.symbols[x];\r\n                    if(expand_symbol && (symbol.group === PL || symbol.group === CP)) {\r\n                        collected = collected.concat(symbol.collectSymbols());\r\n                    }\r\n                    else\r\n                        collected.push(fn ? fn(symbol, opt) : symbol);\r\n                }\r\n            }\r\n            if(sort_fn === null)\r\n                sort_fn = undefined; //WTF Firefox? Seriously?\r\n\r\n            return collected.sort(sort_fn);//sort hopefully gives us some sort of consistency\r\n        },\r\n        /**\r\n         * Returns the latex representation of the symbol\r\n         * @param {String} option\r\n         * @returns {String}\r\n         */\r\n        latex: function (option) {\r\n            return LaTeX.latex(this, option);\r\n        },\r\n        /**\r\n         * Returns the text representation of a symbol\r\n         * @param {String} option\r\n         * @returns {String}\r\n         */\r\n        text: function (option) {\r\n            return text(this, option);\r\n        },\r\n        /**\r\n         * Checks if the function evaluates to 1. e.g. x^0 or 1 :)\r\n         * @@param {bool} abs Compares the absolute value\r\n         */\r\n        isOne: function (abs) {\r\n            var f = abs ? 'absEquals' : 'equals';\r\n            if(this.group === N)\r\n                return this.multiplier[f](1);\r\n            else\r\n                return this.power.equals(0);\r\n        },\r\n        isComposite: function () {\r\n            var g = this.group,\r\n                    pg = this.previousGroup;\r\n            return g === CP || g === PL || pg === PL || pg === CP;\r\n        },\r\n        isCombination: function () {\r\n            var g = this.group,\r\n                    pg = this.previousGroup;\r\n            return g === CB || pg === CB;\r\n        },\r\n        lessThan: function (n) {\r\n            return this.multiplier.lessThan(n);\r\n        },\r\n        greaterThan: function (n) {\r\n            if(!isSymbol(n)) {\r\n                n = new Symbol(n);\r\n            }\r\n\r\n            // We can't tell for sure if a is greater than be if they're not both numbers\r\n            if(!this.isConstant(true) || !n.isConstant(true)) {\r\n                return false;\r\n            }\r\n\r\n            return this.multiplier.greaterThan(n.multiplier);\r\n        },\r\n        /**\r\n         * Get's the denominator of the symbol if the symbol is of class CB (multiplication)\r\n         * with other classes the symbol is either the denominator or not.\r\n         * Take x^-1+x^-2. If the symbol was to be mixed such as x+x^-2 then the symbol doesn't have have an exclusive\r\n         * denominator and has to be found by looking at the actual symbols themselves.\r\n         */\r\n        getDenom: function () {\r\n            var retval, symbol;\r\n            symbol = this.clone();\r\n            //e.g. 1/(x*(x+1))\r\n            if(this.group === CB && this.power.lessThan(0))\r\n                symbol = _.expand(symbol);\r\n\r\n            //if the symbol already is the denominator... DONE!!!\r\n            if(symbol.power.lessThan(0) || symbol.group === EX && symbol.power.multiplier.lessThan(0)) {\r\n                var d = _.parse(symbol.multiplier.den);\r\n                retval = symbol.toUnitMultiplier();\r\n                retval.power.negate();\r\n                retval = _.multiply(d, retval); //put back the coeff\r\n            }\r\n            else if(symbol.group === CB) {\r\n                retval = _.parse(symbol.multiplier.den);\r\n                for(var x in symbol.symbols) {\r\n                    var s = symbol.symbols[x];\r\n                    if(s.power < 0 || s.group === EX && s.power.multiplier.lessThan(0))\r\n                        retval = _.multiply(retval, symbol.symbols[x].clone().invert());\r\n                }\r\n            }\r\n            else {\r\n                retval = _.parse(symbol.multiplier.den);\r\n            }\r\n            return retval;\r\n        },\r\n        getNum: function () {\r\n            var retval, symbol;\r\n            symbol = this.clone();\r\n            //e.g. 1/(x*(x+1))\r\n            if(symbol.group === CB && symbol.power.lessThan(0))\r\n                symbol = _.expand(symbol);\r\n            //if the symbol already is the denominator... DONE!!!\r\n            if(symbol.power.greaterThan(0) && symbol.group !== CB || symbol.group === EX && symbol.power.multiplier.greaterThan(0)) {\r\n                retval = _.multiply(_.parse(symbol.multiplier.num), symbol.toUnitMultiplier());\r\n            }\r\n            else if(symbol.group === CB) {\r\n                retval = _.parse(symbol.multiplier.num);\r\n                symbol.each(function (x) {\r\n                    if(x.power > 0 || x.group === EX && x.power.multiplier > 0) {\r\n                        retval = _.multiply(retval, x.clone());\r\n                    }\r\n                });\r\n            }\r\n//            else if(symbol.group === EX && this.previousGroup === S) {\r\n//                retval = _.multiply(_.parse(symbol.multiplier.num), symbol.toUnitMultiplier());\r\n//            }\r\n            else {\r\n                retval = _.parse(symbol.multiplier.num);\r\n            }\r\n            return retval;\r\n        },\r\n        toString: function () {\r\n            return this.text();\r\n        }\r\n    };\r\n\r\n//Parser =======================================================================\r\n    //Uses modified Shunting-yard algorithm. http://en.wikipedia.org/wiki/Shunting-yard_algorithm\r\n    function Parser() {\r\n        //Point to the local parser instead of the global one\r\n        var _ = this;\r\n        var bin = {};\r\n        var preprocessors = {names: [], actions: []};\r\n\r\n//Parser.classes ===============================================================\r\n        function Slice(upper, lower) {\r\n            this.start = upper;\r\n            this.end = lower;\r\n        }\r\n        ;\r\n        Slice.prototype.isConstant = function () {\r\n            return this.start.isConstant() && this.end.isConstant();\r\n        };\r\n        Slice.prototype.text = function () {\r\n            return text(this.start) + ':' + text(this.end);\r\n        };\r\n\r\n        /**\r\n         * Class used to collect arguments for functions\r\n         * @returns {Parser.Collection}\r\n         */\r\n        function Collection() {\r\n            this.elements = [];\r\n        }\r\n        Collection.prototype.append = function (e) {\r\n            this.elements.push(e);\r\n        };\r\n        Collection.prototype.getItems = function () {\r\n            return this.elements;\r\n        };\r\n        Collection.prototype.toString = function () {\r\n            return _.pretty_print(this.elements);\r\n        };\r\n        Collection.create = function (e) {\r\n            var collection = new Collection();\r\n            if(e)\r\n                collection.append(e);\r\n            return collection;\r\n        };\r\n\r\n        function Token(node, node_type, column) {\r\n            this.type = node_type;\r\n            this.value = node;\r\n            if(column !== undefined)\r\n                this.column = column + 1;\r\n            if(node_type === Token.OPERATOR) {\r\n                //copy everything over from the operator\r\n                var operator = operators[node];\r\n                for(var x in operator)\r\n                    this[x] = operator[x];\r\n\r\n            }\r\n            else if(node_type === Token.FUNCTION) {\r\n                this.precedence = Token.MAX_PRECEDENCE; //leave enough roon\r\n                this.leftAssoc = false;\r\n            }\r\n        }\r\n        Token.prototype.toString = function () {\r\n            return this.value;\r\n        };\r\n        Token.prototype.toString = function () {\r\n            if(this.is_prefix)\r\n                return '`' + this.value;\r\n            return this.value;\r\n        };\r\n        //some constants\r\n        Token.OPERATOR = 'OPERATOR';\r\n        Token.VARIABLE_OR_LITERAL = 'VARIABLE_OR_LITERAL';\r\n        Token.FUNCTION = 'FUNCTION';\r\n        Token.UNIT = 'UNIT';\r\n        Token.KEYWORD = 'KEYWORD';\r\n        Token.MAX_PRECEDENCE = 999;\r\n        //create link to classes\r\n        this.classes = {\r\n            Collection: Collection,\r\n            Slice: Slice,\r\n            Token: Token\r\n        };\r\n//Parser.modules ===============================================================\r\n        //object for functions which handle complex number\r\n        var complex = {\r\n            prec: undefined,\r\n            cos: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.cos(r) * Math.cosh(i));\r\n                im = _.parse(Math.sin(r) * Math.sinh(i));\r\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sin: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sin(r) * Math.cosh(i));\r\n                im = _.parse(Math.cos(r) * Math.sinh(i));\r\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            tan: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sin(2 * r) / (Math.cos(2 * r) + Math.cosh(2 * i)));\r\n                im = _.parse(Math.sinh(2 * i) / (Math.cos(2 * r) + Math.cosh(2 * i)));\r\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sec: function (r, i) {\r\n                var t = this.removeDen(this.cos(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            csc: function (r, i) {\r\n                var t = this.removeDen(this.sin(r, i));\r\n                return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            cot: function (r, i) {\r\n                var t = this.removeDen(this.tan(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            acos: function (r, i) {\r\n                var symbol, sq, a, b, c, squared;\r\n                symbol = this.fromArray([r, i]);\r\n                squared = _.pow(symbol.clone(), new Symbol(2));\r\n                sq = _.expand(squared); //z*z\r\n                a = _.multiply(sqrt(_.subtract(new Symbol(1), sq)), Symbol.imaginary());\r\n                b = _.expand(_.add(symbol.clone(), a));\r\n                c = log(b);\r\n                return _.expand(_.multiply(Symbol.imaginary().negate(), c));\r\n            },\r\n            asin: function (r, i) {\r\n                return _.subtract(_.parse('pi/2'), this.acos(r, i));\r\n            },\r\n            atan: function (r, i) {\r\n                // Handle i and -i\r\n                if(r.equals(0) && (i.equals(1) || i.equals(-1))) {\r\n                    // Just copy Wolfram Alpha for now. The parenthesis \r\n                    return _.parse(`${Symbol.infinity()}*${Settings.IMAGINARY}*${i}`);\r\n                }\r\n                var a, b, c, symbol;\r\n                symbol = complex.fromArray([r, i]);\r\n                a = _.expand(_.multiply(Symbol.imaginary(), symbol.clone()));\r\n                b = log(_.expand(_.subtract(new Symbol(1), a.clone())));\r\n                c = log(_.expand(_.add(new Symbol(1), a.clone())));\r\n                return _.expand(_.multiply(_.divide(Symbol.imaginary(), new Symbol(2)), _.subtract(b, c)));\r\n            },\r\n            asec: function (r, i) {\r\n                var d = this.removeDen([r, i]);\r\n                d[1].negate();\r\n                return this.acos.apply(this, d);\r\n            },\r\n            acsc: function (r, i) {\r\n                var d = this.removeDen([r, i]);\r\n                d[1].negate();\r\n                return this.asin.apply(this, d);\r\n            },\r\n            acot: function (r, i) {\r\n                var d = this.removeDen([r, i]);\r\n                d[1].negate();\r\n                return this.atan.apply(this, d);\r\n            },\r\n            //Hyperbolic trig\r\n            cosh: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.cosh(r) * Math.cos(i));\r\n                im = _.parse(Math.sinh(r) * Math.sin(i));\r\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sinh: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sinh(r) * Math.cos(i));\r\n                im = _.parse(Math.cosh(r) * Math.sin(i));\r\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            tanh: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sinh(2 * r) / (Math.cos(2 * i) + Math.cosh(2 * r)));\r\n                im = _.parse(Math.sin(2 * i) / (Math.cos(2 * i) + Math.cosh(2 * r)));\r\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sech: function (r, i) {\r\n                var t = this.removeDen(this.cosh(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            csch: function (r, i) {\r\n                var t = this.removeDen(this.sinh(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            coth: function (r, i) {\r\n                var t = this.removeDen(this.tanh(r, i));\r\n                return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            acosh: function (r, i) {\r\n                var a, b, z;\r\n                z = this.fromArray([r, i]);\r\n                a = sqrt(_.add(z.clone(), new Symbol(1)));\r\n                b = sqrt(_.subtract(z.clone(), new Symbol(1)));\r\n                return _.expand(log(_.add(z, _.expand(_.multiply(a, b)))));\r\n            },\r\n            asinh: function (r, i) {\r\n                var a, z;\r\n                z = this.fromArray([r, i]);\r\n                a = sqrt(_.add(new Symbol(1), _.expand(_.pow(z.clone(), new Symbol(2)))));\r\n                return _.expand(log(_.add(z, a)));\r\n            },\r\n            atanh: function (r, i) {\r\n                var a, b, z;\r\n                z = this.fromArray([r, i]);\r\n                a = log(_.add(z.clone(), new Symbol(1)));\r\n                b = log(_.subtract(new Symbol(1), z));\r\n                return _.expand(_.divide(_.subtract(a, b), new Symbol(2)));\r\n            },\r\n            asech: function (r, i) {\r\n                var t = this.removeDen([r, i]);\r\n                t[1].negate();\r\n                return this.acosh.apply(this, t);\r\n            },\r\n            acsch: function (r, i) {\r\n                var t = this.removeDen([r, i]);\r\n                t[1].negate();\r\n                return this.asinh.apply(this, t);\r\n            },\r\n            acoth: function (r, i) {\r\n                var t = this.removeDen([r, i]);\r\n                t[1].negate();\r\n                return this.atanh.apply(this, t);\r\n            },\r\n            sqrt: function (symbol) {\r\n                var re, im, h, a, d;\r\n                re = symbol.realpart();\r\n                im = symbol.imagpart();\r\n                h = Symbol.hyp(re, im);\r\n                a = _.add(re.clone(), h);\r\n                d = sqrt(_.multiply(new Symbol(2), a.clone()));\r\n                return _.add(_.divide(a.clone(), d.clone()), _.multiply(_.divide(im, d), Symbol.imaginary()));\r\n            },\r\n            log: function (r, i) {\r\n                var re, im, phi;\r\n                re = log(Symbol.hyp(r, i));\r\n                phi = Settings.USE_BIG ? Symbol(bigDec.atan2(i.multiplier.toDecimal(), r.multiplier.toDecimal())) : Math.atan2(i, r);\r\n                im = _.parse(phi);\r\n                return _.add(re, _.multiply(Symbol.imaginary(), im));\r\n            },\r\n            erf(symbol, n) {\r\n                //Do nothing for now. Revisit this in the future.\r\n                return _.symfunction('erf', [symbol]);\r\n\r\n                n = n || 30;\r\n\r\n                var f = function (R, I) {\r\n                    return block('PARSE2NUMBER', function () {\r\n                        var retval = new Symbol(0);\r\n                        for(var i = 0; i < n; i++) {\r\n                            var a, b;\r\n                            a = _.parse(bigDec.exp(bigDec(i).toPower(2).neg().dividedBy(bigDec(n).pow(2).plus(bigDec(R).toPower(2).times(4)))));\r\n                            b = _.parse(format('2*({1})-e^(-(2*{0}*{1}*{2}))*(2*{1}*cosh({2}*{3})-{0}*{3}*sinh({3}*{2}))', Settings.IMAGINARY, R, I, i));\r\n                            retval = _.add(retval, _.multiply(a, b));\r\n                        }\r\n                        return _.multiply(retval, new Symbol(2));\r\n                    }, true);\r\n                };\r\n                var re, im, a, b, c, k;\r\n                re = symbol.realpart();\r\n                im = symbol.imagpart();\r\n\r\n                k = _.parse(format('(e^(-{0}^2))/pi', re));\r\n                a = _.parse(format('(1-e^(-(2*{0}*{1}*{2})))/(2*{1})', Settings.IMAGINARY, re, im));\r\n                b = f(re.toString(), im.toString());\r\n\r\n                return _.add(_.parse(Math2.erf(re.toString())), _.multiply(k, _.add(a, b)));\r\n            },\r\n            removeDen: function (symbol) {\r\n                var den, r, i, re, im;\r\n                if(isArray(symbol)) {\r\n                    r = symbol[0];\r\n                    i = symbol[1];\r\n                }\r\n                else {\r\n                    r = symbol.realpart();\r\n                    i = symbol.imagpart();\r\n                }\r\n\r\n                den = Math.pow(r, 2) + Math.pow(i, 2);\r\n                re = _.parse(r / den);\r\n                im = _.parse(i / den);\r\n                return [re, im];\r\n            },\r\n            fromArray: function (arr) {\r\n                return _.add(arr[0], _.multiply(Symbol.imaginary(), arr[1]));\r\n            },\r\n            evaluate: function (symbol, f) {\r\n                var re, im, sign;\r\n\r\n                sign = symbol.power.sign();\r\n                //remove it from under the denominator\r\n                symbol.power = symbol.power.abs();\r\n                //expand\r\n                if(symbol.power.greaterThan(1))\r\n                    symbol = _.expand(symbol);\r\n                //remove the denominator\r\n                if(sign < 0) {\r\n                    var d = this.removeDen(symbol);\r\n                    re = d[0];\r\n                    im = d[1];\r\n                }\r\n                else {\r\n                    re = symbol.realpart();\r\n                    im = symbol.imagpart();\r\n                }\r\n\r\n                if(re.isConstant('all') && im.isConstant('all'))\r\n                    return this[f].call(this, re, im);\r\n\r\n                return _.symfunction(f, [symbol]);\r\n            }\r\n        };\r\n        //object for functions which handle trig\r\n        var trig = this.trig = {\r\n            //container for trigonometric function\r\n            cos: function (symbol) {\r\n                if(symbol.equals('pi') && symbol.multiplier.den.equals(2))\r\n                    return new Symbol(0);\r\n\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.equals(new Symbol(Settings.PI / 2)))\r\n                        return new Symbol(0);\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.cos(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.cos(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'cos');\r\n                    }\r\n                }\r\n                if(symbol.equals(0))\r\n                    return new Symbol(1);\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier.abs();\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 1 or -1 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(even(m) ? 1 : -1);\r\n                    }\r\n                    else {\r\n                        var n = Number(m.num), d = Number(m.den);\r\n                        if(d === 2)\r\n                            retval = new Symbol(0);\r\n                        else if(d === 3) {\r\n                            retval = _.parse('1/2');\r\n                            c = true;\r\n                        }\r\n                        else if(d === 4) {\r\n                            retval = _.parse('1/sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d === 6) {\r\n                            retval = _.parse('sqrt(3)/2');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('cos', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(c && (q === 2 || q === 3))\r\n                    retval.negate();\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('cos', [symbol]);\r\n\r\n                return retval;\r\n            },\r\n            sin: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        if(symbol % Math.PI === 0) {\r\n                            return new Symbol(0);\r\n                        }\r\n\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.sin(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.sin(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'sin');\r\n                }\r\n\r\n                if(symbol.equals(0))\r\n                    return new Symbol(0);\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        sign = symbol.multiplier.sign(),\r\n                        m = symbol.multiplier.abs();\r\n                symbol.multiplier = m;\r\n                if(symbol.equals('pi'))\r\n                    retval = new Symbol(0);\r\n                else if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 0 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(0);\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 3) {\r\n                            retval = _.parse('sqrt(3)/2');\r\n                            c = true\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = _.parse('1/sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('1/2');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\r\n\r\n                if(c && (q === 3 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            tan: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol % Math.PI === 0 && symbol.isLinear()) {\r\n                        return new Symbol(0);\r\n                    }\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.tan(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.tan(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'tan');\r\n                }\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier;\r\n\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return 0 for all multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(0);\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2)\r\n                            throw new UndefinedError('tan is undefined for ' + symbol.toString());\r\n                        else if(d == 3) {\r\n                            retval = _.parse('sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('1/sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('tan', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('tan', [symbol]);\r\n\r\n                if(c && (q === 2 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            sec: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(new bigDec(1).dividedBy(bigDec.cos(symbol.multiplier.toDecimal())));\r\n                        }\r\n\r\n                        return new Symbol(Math2.sec(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'sec');\r\n                    return _.parse(format('1/cos({0})', symbol));\r\n                }\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier.abs();\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 1 or -1 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(even(m) ? 1 : -1);\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2)\r\n                            throw new UndefinedError('sec is undefined for ' + symbol.toString());\r\n                        else if(d == 3) {\r\n                            retval = new Symbol(2);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = _.parse('sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('2/sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('sec', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(c && (q === 2 || q === 3))\r\n                    retval.negate();\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('sec', [symbol]);\r\n\r\n                return retval;\r\n            },\r\n            csc: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(new bigDec(1).dividedBy(bigDec.sin(symbol.multiplier.toDecimal())));\r\n                        }\r\n\r\n                        return new Symbol(Math2.csc(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'csc');\r\n                    return _.parse(format('1/sin({0})', symbol));\r\n                }\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        sign = symbol.multiplier.sign(),\r\n                        m = symbol.multiplier.abs();\r\n\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 0 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        throw new UndefinedError('csc is undefined for ' + symbol.toString());\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 3) {\r\n                            retval = _.parse('2/sqrt(3)');\r\n                            c = true\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = _.parse('sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = new Symbol(2);\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\r\n\r\n                if(c && (q === 3 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            cot: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol % (Math.PI/2) === 0) {\r\n                        return new Symbol(0);\r\n                    }\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(new bigDec(1).dividedBy(bigDec.tan(symbol.multiplier.toDecimal())));\r\n                        }\r\n\r\n                        return new Symbol(Math2.cot(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'cot');\r\n                    return _.parse(format('1/tan({0})', symbol));\r\n                }\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier;\r\n\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return 0 for all multiples of pi\r\n                    if(isInt(m)) {\r\n                        throw new UndefinedError('cot is undefined for ' + symbol.toString());\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2)\r\n                            retval = new Symbol(0);\r\n                        else if(d == 3) {\r\n                            retval = _.parse('1/sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('cot', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('cot', [symbol]);\r\n\r\n                if(c && (q === 2 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            acos: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        // Handle values in the complex domain\r\n                        if(symbol.gt(1) || symbol.lt(-1)) {\r\n                            var x = symbol.toString();\r\n                            return expand(evaluate(`pi/2-asin(${x})`));\r\n                        }\r\n                        // Handle big numbers\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.acos(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.acos(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'acos');\r\n                }\r\n                return _.symfunction('acos', arguments);\r\n            },\r\n            asin: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        // Handle values in the complex domain\r\n                        if(symbol.gt(1) || symbol.lt(-1)) {\r\n                            var i = Settings.IMAGINARY;\r\n                            var x = symbol.multiplier.toDecimal();\r\n                            return expand(evaluate(`${i}*log(sqrt(1-${x}^2)-${i}*${x})`));\r\n                        }\r\n                        // Handle big numbers\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.asin(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.asin(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'asin');\r\n                }\r\n                return _.symfunction('asin', arguments);\r\n            },\r\n            atan: function (symbol) {\r\n                var retval;\r\n                if(symbol.equals(0))\r\n                    retval = new Symbol(0);\r\n                else if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        // Handle big numbers\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.atan(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.atan(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'atan');\r\n                    return _.symfunction('atan', arguments);\r\n                }\r\n                else if(symbol.equals(-1))\r\n                    retval = _.parse('-pi/4');\r\n                else\r\n                    retval = _.symfunction('atan', arguments);\r\n                return retval;\r\n            },\r\n            asec: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.equals(0)) {\r\n                        throw new OutOfFunctionDomainError('Input is out of the domain of sec!');\r\n                    }\r\n                    if(symbol.isConstant()) {\r\n                        return trig.acos(symbol.invert());\r\n                    }\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'asec');\r\n                    }\r\n                }\r\n                return _.symfunction('asec', arguments);\r\n            },\r\n            acsc: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        return trig.asin(symbol.invert());\r\n                    }\r\n\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'acsc');\r\n                }\r\n                return _.symfunction('acsc', arguments);\r\n            },\r\n            acot: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        return new _.add(_.parse('pi/2'), trig.atan(symbol).negate());\r\n                    }\r\n\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'acot');\r\n                }\r\n                return _.symfunction('acot', arguments);\r\n            },\r\n            atan2: function (a, b) {\r\n                if(a.equals(0) && b.equals(0))\r\n                    throw new UndefinedError('atan2 is undefined for 0, 0');\r\n\r\n                if(Settings.PARSE2NUMBER && a.isConstant() && b.isConstant()) {\r\n                    return new Symbol(Math.atan2(a, b));\r\n                }\r\n                return _.symfunction('atan2', arguments);\r\n            }\r\n        };\r\n        //object for functions which handle hyperbolic trig\r\n        var trigh = this.trigh = {\r\n            //container for hyperbolic trig function\r\n            cosh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.cosh(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'cosh');\r\n                    }\r\n                }\r\n\r\n                return retval = _.symfunction('cosh', arguments);\r\n            },\r\n            sinh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.sinh(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'sinh');\r\n                    }\r\n                }\r\n\r\n                return retval = _.symfunction('sinh', arguments);\r\n            },\r\n            tanh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.tanh(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'tanh');\r\n                    }\r\n                }\r\n\r\n                return retval = _.symfunction('tanh', arguments);\r\n            },\r\n            sech: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        return new Symbol(Math.sech(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'sech');\r\n                    }\r\n                    return _.parse(format('1/cosh({0})', symbol));\r\n                }\r\n\r\n                return retval = _.symfunction('sech', arguments);\r\n            },\r\n            csch: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.csch(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'csch');\r\n                    }\r\n                    return _.parse(format('1/sinh({0})', symbol));\r\n                }\r\n\r\n                return retval = _.symfunction('csch', arguments);\r\n            },\r\n            coth: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.coth(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'coth');\r\n                    }\r\n                    return _.parse(format('1/tanh({0})', symbol));\r\n                }\r\n\r\n                return retval = _.symfunction('coth', arguments);\r\n            },\r\n            acosh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'acosh');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(_.parse(format(Settings.LOG + '(({0})+sqrt(({0})^2-1))', symbol.toString())));\r\n                else\r\n                    retval = _.symfunction('acosh', arguments);\r\n                return retval;\r\n            },\r\n            asinh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'asinh');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(_.parse(format(Settings.LOG + '(({0})+sqrt(({0})^2+1))', symbol.toString())));\r\n                else\r\n                    retval = _.symfunction('asinh', arguments);\r\n                return retval;\r\n            },\r\n            atanh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'atanh');\r\n                else if(Settings.PARSE2NUMBER) {\r\n                    retval = evaluate(_.parse(format('(1/2)*' + Settings.LOG + '((1+({0}))/(1-({0})))', symbol.toString())));\r\n                }\r\n                else\r\n                    retval = _.symfunction('atanh', arguments);\r\n                return retval;\r\n            },\r\n            asech: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'asech');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(log(_.add(symbol.clone().invert(), sqrt(_.subtract(_.pow(symbol, new Symbol(-2)), new Symbol(1))))));\r\n                else\r\n                    retval = _.symfunction('asech', arguments);\r\n                return retval;\r\n            },\r\n            acsch: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'acsch');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(_.parse(format(Settings.LOG + '((1+sqrt(1+({0})^2))/({0}))', symbol.toString())));\r\n                else\r\n                    retval = _.symfunction('acsch', arguments);\r\n                return retval;\r\n            },\r\n            acoth: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'acoth');\r\n                else if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.equals(1))\r\n                        retval = Symbol.infinity();\r\n                    else\r\n                        retval = evaluate(\r\n                                _.divide(\r\n                                        log(_.divide(_.add(symbol.clone(), new Symbol(1)), _.subtract(symbol.clone(), new Symbol(1)))),\r\n                                        new Symbol(2)));\r\n                }\r\n                else\r\n                    retval = _.symfunction('acoth', arguments);\r\n                return retval;\r\n            }\r\n        };\r\n        //list of supported units\r\n        this.units = {};\r\n        //list all the supported operators\r\n        var operators = {\r\n            '\\\\': {\r\n                precedence: 8,\r\n                operator: '\\\\',\r\n                action: 'slash',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return e; //bypass the slash\r\n                }\r\n            },\r\n            '!!': {\r\n                precedence: 7,\r\n                operator: '!!',\r\n                action: 'dfactorial',\r\n                prefix: false,\r\n                postfix: true,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return _.symfunction(Settings.DOUBLEFACTORIAL, [e]); //wrap it in a factorial function\r\n                }\r\n            },\r\n            '!': {\r\n                precedence: 7,\r\n                operator: '!',\r\n                action: 'factorial',\r\n                prefix: false,\r\n                postfix: true,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return factorial(e); //wrap it in a factorial function\r\n                }\r\n            },\r\n            '^': {\r\n                precedence: 6,\r\n                operator: '^',\r\n                action: 'pow',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: true\r\n            },\r\n            '**': {\r\n                precedence: 6,\r\n                operator: '**',\r\n                action: 'pow',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: true\r\n            },\r\n            '%': {\r\n                precedence: 4,\r\n                operator: '%',\r\n                action: 'percent',\r\n                prefix: false,\r\n                postfix: true,\r\n                leftAssoc: true,\r\n                overloaded: true,\r\n                overloadAction: 'mod',\r\n                overloadLeftAssoc: false,\r\n                operation: function (x) {\r\n                    return _.divide(x, new Symbol(100));\r\n                }\r\n            },\r\n            '*': {\r\n                precedence: 4,\r\n                operator: '*',\r\n                action: 'multiply',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '/': {\r\n                precedence: 4,\r\n                operator: '/',\r\n                action: 'divide',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '+': {\r\n                precedence: 3,\r\n                operator: '+',\r\n                action: 'add',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                operation: function (x) {\r\n                    return x;\r\n                }\r\n            },\r\n            'plus': {\r\n                precedence: 3,\r\n                operator: 'plus',\r\n                action: 'add',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                operation: function (x) {\r\n                    return x;\r\n                }\r\n            },\r\n            '-': {\r\n                precedence: 3,\r\n                operator: '-',\r\n                action: 'subtract',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                operation: function (x) {\r\n                    return x.negate();\r\n                }\r\n            },\r\n            '=': {\r\n                precedence: 2,\r\n                operator: '=',\r\n                action: 'equals',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '==': {\r\n                precedence: 1,\r\n                operator: '==',\r\n                action: 'eq',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '<': {\r\n                precedence: 1,\r\n                operator: '<',\r\n                action: 'lt',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '<=': {\r\n                precedence: 1,\r\n                operator: '<=',\r\n                action: 'lte',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '>': {\r\n                precedence: 1,\r\n                operator: '>',\r\n                action: 'gt',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '=>': {\r\n                precedence: 1,\r\n                operator: '=>',\r\n                action: 'gte',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            ',': {\r\n                precedence: 0,\r\n                operator: ',',\r\n                action: 'comma',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            ':': {\r\n                precedence: 0,\r\n                operator: ',',\r\n                action: 'assign',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                vectorFn: 'slice'\r\n            },\r\n            ':=': {\r\n                precedence: 0,\r\n                operator: ',',\r\n                action: 'function_assign',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: true\r\n            }\r\n        };\r\n        //brackets\r\n        var brackets = {\r\n            '(': {\r\n                type: 'round',\r\n                id: 1,\r\n                is_open: true,\r\n                is_close: false\r\n            },\r\n            ')': {\r\n                type: 'round',\r\n                id: 2,\r\n                is_open: false,\r\n                is_close: true\r\n            },\r\n            '[': {\r\n                type: 'square',\r\n                id: 3,\r\n                is_open: true,\r\n                is_close: false,\r\n                maps_to: 'vector'\r\n            },\r\n            ']': {\r\n                type: 'square',\r\n                id: 4,\r\n                is_open: false,\r\n                is_close: true\r\n            },\r\n            '{': {\r\n                type: 'curly',\r\n                id: 5,\r\n                is_open: true,\r\n                is_close: false,\r\n                maps_to: 'Set'\r\n            },\r\n            '}': {\r\n                type: 'curly',\r\n                id: 6,\r\n                is_open: false,\r\n                is_close: true\r\n            }\r\n        };\r\n        // Supported functions.\r\n        // Format: function_name: [mapped_function, number_of_parameters]\r\n        var functions = this.functions = {\r\n            'cos': [trig.cos, 1],\r\n            'sin': [trig.sin, 1],\r\n            'tan': [trig.tan, 1],\r\n            'sec': [trig.sec, 1],\r\n            'csc': [trig.csc, 1],\r\n            'cot': [trig.cot, 1],\r\n            'acos': [trig.acos, 1],\r\n            'asin': [trig.asin, 1],\r\n            'atan': [trig.atan, 1],\r\n            'arccos': [trig.acos, 1],\r\n            'arcsin': [trig.asin, 1],\r\n            'arctan': [trig.atan, 1],\r\n            'asec': [trig.asec, 1],\r\n            'acsc': [trig.acsc, 1],\r\n            'acot': [trig.acot, 1],\r\n            'atan2': [trig.atan2, 2],\r\n            'acoth': [trigh.acoth, 1],\r\n            'asech': [trigh.asech, 1],\r\n            'acsch': [trigh.acsch, 1],\r\n            'sinh': [trigh.sinh, 1],\r\n            'cosh': [trigh.cosh, 1],\r\n            'tanh': [trigh.tanh, 1],\r\n            'asinh': [trigh.asinh, 1],\r\n            'sech': [trigh.sech, 1],\r\n            'csch': [trigh.csch, 1],\r\n            'coth': [trigh.coth, 1],\r\n            'acosh': [trigh.acosh, 1],\r\n            'atanh': [trigh.atanh, 1],\r\n            'log10': [, 1],\r\n            'exp': [exp, 1],\r\n            'radians': [radians, 1],\r\n            'degrees': [degrees, 1],\r\n            'min': [min, -1],\r\n            'max': [max, -1],\r\n            'erf': [, 1],\r\n            'floor': [, 1],\r\n            'ceil': [, 1],\r\n            'trunc': [, 1],\r\n            'Si': [, 1],\r\n            'step': [, 1],\r\n            'rect': [, 1],\r\n            'sinc': [sinc, 1],\r\n            'tri': [, 1],\r\n            'sign': [sign, 1],\r\n            'Ci': [, 1],\r\n            'Ei': [, 1],\r\n            'Shi': [, 1],\r\n            'Chi': [, 1],\r\n            'Li': [, 1],\r\n            'fib': [, 1],\r\n            'fact': [factorial, 1],\r\n            'factorial': [factorial, 1],\r\n            'continued_fraction': [continued_fraction, [1, 2]],\r\n            'dfactorial': [, 1],\r\n            'gamma_incomplete': [, [1, 2]],\r\n            'round': [round, [1, 2]],\r\n            'scientific': [scientific, [1, 2]],\r\n            'mod': [mod, 2],\r\n            'pfactor': [pfactor, 1],\r\n            'vector': [vector, -1],\r\n            'matrix': [matrix, -1],\r\n            'Set': [set, -1],\r\n            'imatrix': [imatrix, -1],\r\n            'parens': [parens, -1],\r\n            'sqrt': [sqrt, 1],\r\n            'cbrt': [cbrt, 1],\r\n            'nthroot': [nthroot, 2],\r\n            'log': [log, [1, 2]],\r\n            'expand': [expandall, 1],\r\n            'abs': [abs, 1],\r\n            'invert': [invert, 1],\r\n            'determinant': [determinant, 1],\r\n            'size': [size, 1],\r\n            'transpose': [transpose, 1],\r\n            'dot': [dot, 2],\r\n            'cross': [cross, 2],\r\n            'vecget': [vecget, 2],\r\n            'vecset': [vecset, 3],\r\n            'vectrim': [vectrim, [1, 2]],\r\n            'matget': [matget, 3],\r\n            'matset': [matset, 4],\r\n            'matgetrow': [matgetrow, 2],\r\n            'matsetrow': [matsetrow, 3],\r\n            'matgetcol': [matgetcol, 2],\r\n            'matsetcol': [matsetcol, 3],\r\n            'rationalize': [rationalize, 1],\r\n            'IF': [IF, 3],\r\n            'is_in': [is_in, 2],\r\n            //imaginary support\r\n            'realpart': [realpart, 1],\r\n            'imagpart': [imagpart, 1],\r\n            'conjugate': [conjugate, 1],\r\n            'arg': [arg, 1],\r\n            'polarform': [polarform, 1],\r\n            'rectform': [rectform, 1],\r\n            'sort': [sort, [1, 2]],\r\n            'integer_part': [, 1],\r\n            'union': [union, 2],\r\n            'contains': [contains, 2],\r\n            'intersection': [intersection, 2],\r\n            'difference': [difference, 2],\r\n            'intersects': [intersects, 2],\r\n            'is_subset': [is_subset, 2],\r\n            //system support\r\n            'print': [print, -1]\r\n        };\r\n\r\n        //error handler\r\n        this.error = err;\r\n        //this function is used to comb through the function modules and find a function given its name\r\n        var findFunction = function (fname) {\r\n            var fmodules = Settings.FUNCTION_MODULES,\r\n                    l = fmodules.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var fmodule = fmodules[i];\r\n                if(fname in fmodule)\r\n                    return fmodule[fname];\r\n            }\r\n            err('The function ' + fname + ' is undefined!');\r\n        };\r\n\r\n        /**\r\n         * This method gives the ability to override operators with new methods.\r\n         * @param {String} which\r\n         * @param {Function} with_what\r\n         */\r\n        this.override = function (which, with_what) {\r\n            if(!bin[which])\r\n                bin[which] = [];\r\n            bin[which].push(this[which]);\r\n            this[which] = with_what;\r\n        };\r\n\r\n        /**\r\n         * Restores a previously overridden operator\r\n         * @param {String} what\r\n         */\r\n        this.restore = function (what) {\r\n            if(this[what])\r\n                this[what] = bin[what].pop();\r\n        };\r\n\r\n        /**\r\n         * This method is supposed to behave similarly to the override method but it does not override\r\n         * the existing function rather it only extends it\r\n         * @param {String} what\r\n         * @param {Function} with_what\r\n         * @param {boolean} force_call\r\n         */\r\n        this.extend = function (what, with_what, force_call) {\r\n            var _ = this,\r\n                    extended = this[what];\r\n            if(typeof extended === 'function' && typeof with_what === 'function') {\r\n                var f = this[what];\r\n                this[what] = function (a, b) {\r\n                    if(isSymbol(a) && isSymbol(b) && !force_call)\r\n                        return f.call(_, a, b);\r\n                    else\r\n                        return with_what.call(_, a, b, f);\r\n                };\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Generates library's representation of a function. It's a fancy way of saying a symbol with\r\n         * a few extras. The most important thing is that that it gives a fname and\r\n         * an args property to the symbols in addition to changing its group to FN\r\n         * @param {String} fn_name\r\n         * @param {Array} params\r\n         * @returns {Symbol}\r\n         */\r\n        this.symfunction = function (fn_name, params) {\r\n            //call the proper function and return the result;\r\n            var f = new Symbol(fn_name);\r\n            f.group = FN;\r\n            if(typeof params === 'object')\r\n                params = [].slice.call(params);//ensure an array\r\n            f.args = params;\r\n            f.fname = fn_name === PARENTHESIS ? '' : fn_name;\r\n            f.updateHash();\r\n            return f;\r\n        };\r\n\r\n        /**\r\n         * An internal function call for the Parser. This will either trigger a real\r\n         * function call if it can do so or just return a symbolic representation of the\r\n         * function using symfunction.\r\n         * @param {String} fn_name\r\n         * @param {Array} args\r\n         * @param {int} allowed_args\r\n         * @returns {Symbol}\r\n         */\r\n        this.callfunction = function (fn_name, args, allowed_args) {\r\n            var fn_settings = functions[fn_name];\r\n\r\n            if(!fn_settings)\r\n                err('Nerdamer currently does not support the function ' + fn_name);\r\n\r\n            var num_allowed_args = fn_settings[1] || allowed_args, //get the number of allowed arguments\r\n                    fn = fn_settings[0], //get the mapped function\r\n                    retval;\r\n            //We want to be able to call apply on the arguments or create a symfunction. Both require\r\n            //an array so make sure to wrap the argument in an array.\r\n            if(!(args instanceof Array))\r\n                args = args !== undefined ? [args] : [];\r\n\r\n            if(num_allowed_args !== -1) {\r\n                var is_array = isArray(num_allowed_args),\r\n                        min_args = is_array ? num_allowed_args[0] : num_allowed_args,\r\n                        max_args = is_array ? num_allowed_args[1] : num_allowed_args,\r\n                        num_args = args.length;\r\n\r\n                var error_msg = fn_name + ' requires a {0} of {1} arguments. {2} provided!';\r\n\r\n                if(num_args < min_args)\r\n                    err(format(error_msg, 'minimum', min_args, num_args));\r\n                if(num_args > max_args)\r\n                    err(format(error_msg, 'maximum', max_args, num_args));\r\n            }\r\n\r\n            /*\r\n             * The following are very important to the how nerdamer constructs functions!\r\n             * Assumption 1 - if fn is undefined then handling of the function is purely numeric. This\r\n             *     enables us to reuse Math, Math2, ..., any function from Settings.FUNCTIONS_MODULES entry\r\n             * Assumption 2 - if fn is defined then that function takes care of EVERYTHING including symbolics\r\n             * Assumption 3 - if the user calls symbolics on a function that returns a numeric value then\r\n             *     they are expecting a symbolic output.\r\n             */\r\n            //check if arguments are all numers\r\n            var numericArgs = allNumbers(args);\r\n            //Big number support. Check if Big number is requested and the arguments are all numeric and, not imaginary\r\n//            if (Settings.USE_BIG && numericArgs) {\r\n//                retval = Big[fn_name].apply(undefined, args);\r\n//            }\r\n//            else {\r\n            if(!fn) {\r\n                //Remember assumption 1. No function defined so it MUST be numeric in nature\r\n                fn = findFunction(fn_name);\r\n                if(Settings.PARSE2NUMBER && numericArgs)\r\n                    retval = bigConvert(fn.apply(fn, args));\r\n                else\r\n                    retval = _.symfunction(fn_name, args);\r\n            }\r\n            else {\r\n                //Remember assumption 2. The function is defined so it MUST handle all aspects including numeric values\r\n                retval = fn.apply(fn_settings[2], args);\r\n            }\r\n//            }\r\n\r\n            return retval;\r\n        };\r\n        /**\r\n         * Build a regex based on the operators currently loaded. These operators are to be ignored when\r\n         * substituting spaces for multiplication\r\n         */\r\n        this.operator_filter_regex = (function () {\r\n            //we only want the operators which are singular since those are the ones\r\n            //that nerdamer uses anyway\r\n            var ostr = '^\\\\' + Object.keys(operators).filter(function (x) {\r\n                if(x.length === 1)\r\n                    return x;\r\n            }).join('\\\\');\r\n            //create a regex which captures all spaces between characters except those\r\n            //have an operator on one end\r\n            return new RegExp('([' + ostr + '])\\\\s+([' + ostr + '])');\r\n        })();\r\n\r\n        /**\r\n         * Replaces nerdamer.setOperator\r\n         * @param {object} operator\r\n         * @param {boolean} shift\r\n         */\r\n        this.setOperator = function (operator, action, shift) {\r\n            var name = operator.operator; //take the name to be the symbol\r\n            operators[name] = operator;\r\n            if(action)\r\n                this[operator.action] = action;\r\n            //make the parser aware of the operator\r\n            _[name] = operator.operation;\r\n            //make the action available to the parser if infix\r\n            if(!operator.action && !(operator.prefix || operator.postif)) {\r\n                operator.action = name;\r\n            }\r\n            //if this operator is exclusive then all successive operators should be shifted\r\n            if(shift === 'over' || shift === 'under') {\r\n                var precedence = operator.precedence;\r\n\r\n                for(var x in operators) {\r\n                    var o = operators[x];\r\n                    var condition = shift === 'over' ? o.precedence >= precedence : o.precedence > precedence;\r\n                    if(condition)\r\n                        o.precedence++;\r\n                }\r\n                ;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Gets an opererator by its symbol\r\n         * @param {String} operator\r\n         * @returns {Object}\r\n         */\r\n        this.getOperator = function (operator) {\r\n            return operators[operator];\r\n        };\r\n\r\n        this.aliasOperator = function (o, n) {\r\n            var t = {};\r\n            var operator = operators[o];\r\n            //copy everything over to the new operator\r\n            for(var x in operator) {\r\n                t[x] = operator[x];\r\n            }\r\n            //update the symbol\r\n            t.operator = n;\r\n\r\n            this.setOperator(t);\r\n        };\r\n\r\n        /**\r\n         * Returns the list of operators. Caution! Can break parser!\r\n         * @returns {object}\r\n         */\r\n        this.getOperators = function () {\r\n            //will replace this with some cloning action in the future\r\n            return operators;\r\n        };\r\n\r\n        this.getBrackets = function () {\r\n            return brackets;\r\n        };\r\n        /*\r\n         * Preforms preprocessing on the string. Useful for making early modification before\r\n         * sending to the parser\r\n         * @param {String} e\r\n         */\r\n        var prepare_expression = function (e) {\r\n            /*\r\n             * Since variables cannot start with a number, the assumption is made that when this occurs the\r\n             * user intents for this to be a coefficient. The multiplication symbol in then added. The same goes for\r\n             * a side-by-side close and open parenthesis\r\n             */\r\n            e = String(e);\r\n            //apply preprocessors\r\n            for(var i = 0; i < preprocessors.actions.length; i++)\r\n                e = preprocessors.actions[i].call(this, e);\r\n\r\n            //e = e.split(' ').join('');//strip empty spaces\r\n            //replace multiple spaces with one space\r\n            e = e.replace(/\\s+/g, ' ');\r\n\r\n            //only even bother to check if the string contains e. This regex is painfully slow and might need a better solution. e.g. hangs on (0.06/3650))^(365)\r\n            if(/e/gi.test(e)) {\r\n                e = e.replace(/\\-*\\d+\\.*\\d*e\\+?\\-?\\d+/gi, function (x) {\r\n                    return scientificToDecimal(x);\r\n                });\r\n            }\r\n            //replace scientific numbers\r\n\r\n            //allow omission of multiplication after coefficients\r\n            e = e.replace(Settings.IMPLIED_MULTIPLICATION_REGEX, function () {\r\n                var str = arguments[4],\r\n                        group1 = arguments[1],\r\n                        group2 = arguments[2],\r\n                        start = arguments[3],\r\n                        first = str.charAt(start),\r\n                        before = '',\r\n                        d = '*';\r\n                if(!first.match(/[\\+\\-\\/\\*]/))\r\n                    before = str.charAt(start - 1);\r\n                if(before.match(/[a-z]/i))\r\n                    d = '';\r\n                return group1 + d + group2;\r\n            })\r\n                    .replace(/([a-z0-9_]+)/gi, function (match, a) {\r\n                        if(Settings.USE_MULTICHARACTER_VARS === false && !(a in functions)) {\r\n                            if(!isNaN(a))\r\n                                return a;\r\n                            return a.split('').join('*');\r\n                        }\r\n                        return a;\r\n                    })\r\n                    //allow omission of multiplication sign between brackets\r\n                    .replace(/\\)\\(/g, ')*(') || '0';\r\n            //replace x(x+a) with x*(x+a)\r\n            while(true) {\r\n                var e_org = e; //store the original\r\n                e = e.replace(/([a-z0-9_]+)(\\()|(\\))([a-z0-9]+)/gi, function (match, a, b, c, d) {\r\n                    var g1 = a || c,\r\n                            g2 = b || d;\r\n                    if(g1 in functions) //create a passthrough for functions\r\n                        return g1 + g2;\r\n                    return g1 + '*' + g2;\r\n                });\r\n                //if the original equals the replace we're done\r\n                if(e_org === e)\r\n                    break;\r\n            }\r\n            return e;\r\n        };\r\n        //delay setting of constants until Settings is ready\r\n        this.initConstants = function () {\r\n            this.CONSTANTS = {\r\n                E: new Symbol(Settings.E),\r\n                PI: new Symbol(Settings.PI)\r\n            };\r\n        };\r\n        /*\r\n         * Debugging method used to better visualize vector and arrays\r\n         * @param {object} o\r\n         * @returns {String}\r\n         */\r\n        this.pretty_print = function (o) {\r\n            if(Array.isArray(o)) {\r\n                var s = o.map(x => _.pretty_print(x)).join(', ');\r\n                if(o.type === 'vector')\r\n                    return 'vector<' + s + '>';\r\n                return '(' + s + ')';\r\n            }\r\n            return o.toString();\r\n        };\r\n        this.peekers = {\r\n            pre_operator: [],\r\n            post_operator: [],\r\n            pre_function: [],\r\n            post_function: []\r\n        };\r\n\r\n        this.callPeekers = function (name) {\r\n            if(Settings.callPeekers) {\r\n                var peekers = this.peekers[name];\r\n                //remove the first items and stringify\r\n                var args = arguments2Array(arguments).slice(1).map(stringify);\r\n                //call each one of the peekers\r\n                for(var i = 0; i < peekers.length; i++) {\r\n                    peekers[i].apply(null, args);\r\n                }\r\n            }\r\n        };\r\n        /*\r\n         * Tokenizes the string\r\n         * @param {String} e\r\n         * @returns {Token[]}\r\n         */\r\n        this.tokenize = function (e) {\r\n            //cast to String\r\n            e = String(e);\r\n            //remove multiple white spaces and spaces at beginning and end of string\r\n            e = e.trim().replace(/\\s+/g, ' ');\r\n            //remove spaces before and after brackets\r\n            for(var x in brackets) {\r\n                var regex = new RegExp(brackets[x].is_close ? '\\\\s+\\\\' + x : '\\\\' + x + '\\\\s+', 'g');\r\n                e = e.replace(regex, x);\r\n            }\r\n\r\n            var col = 0; //the column position\r\n            var L = e.length; //expression length\r\n            var lpos = 0; //marks beginning of next token\r\n            var tokens = []; //the tokens container\r\n            var scopes = [tokens]; //initiate with the tokens as the highest scope\r\n            var target = scopes[0]; //the target to which the tokens are added. This can swing up or down\r\n            var depth = 0;\r\n            var open_brackets = [];\r\n            var has_space = false; //marks if an open space character was found\r\n            var SPACE = ' ';\r\n            var EMPTY_STRING = '';\r\n            var COMMA = ',';\r\n            var MINUS = '-';\r\n            var MULT = '*';\r\n            //Possible source of bug. Review\r\n            /*\r\n             //gets the next space\r\n             var next_space = function(from) {\r\n             for(var i=from; i<L; i++) {\r\n             if(e.charAt(i) === ' ')\r\n             return i;\r\n             }\r\n             \r\n             return L; //assume the end of the string instead\r\n             };\r\n             */\r\n            /**\r\n             * Adds a scope to tokens\r\n             * @param {String} scope_type\r\n             * @param {int} column\r\n             * @returns {undefined}\r\n             */\r\n            var addScope = function (scope_type, column) {\r\n                var new_scope = []; //create a new scope\r\n                if(scope_type !== undefined) {\r\n                    new_scope.type = scope_type;\r\n                }\r\n                new_scope.column = column; //mark the column of the scope\r\n                scopes.push(new_scope); //add it to the list of scopes\r\n                target.push(new_scope); //add it to the tokens list since now it's a scope\r\n                target = new_scope; //point to it\r\n                depth++; //go down one in scope\r\n            };\r\n            /**\r\n             * Goes up in scope by one\r\n             * @returns {undefined}\r\n             */\r\n            var goUp = function () {\r\n                scopes.pop(); //remove the scope from the scopes stack\r\n                target = scopes[--depth]; //point the above scope\r\n            };\r\n            /**\r\n             * Extracts all the operators from the expression string starting at postion start_at\r\n             * @param {int} start_at\r\n             * @returns {String}\r\n             */\r\n            var get_operator_str = function (start_at) {\r\n                start_at = start_at !== undefined ? start_at : col;\r\n                //mark the end of the operator as the start since we're just going\r\n                //to be walking along the string\r\n                var end = start_at + 1;\r\n                //just keep moving along\r\n                while(e.charAt(end++) in operators) {\r\n                }\r\n                //remember that we started at one position ahead. The beginning operator is what triggered\r\n                //this function to be called in the first place. String.CharAt is zero based so we now\r\n                //have to correct two places. The initial increment + the extra++ at the end of end during\r\n                //the last iteration.\r\n                return e.substring(start_at, end - 1);\r\n            };\r\n            /**\r\n             * Breaks operator up in to several different operators as defined in operators\r\n             * @param {String} operator_str\r\n             * @returns {String[]}\r\n             */\r\n            var chunkify = function (operator_str) {\r\n                var start = col - operator_str.length; //start of operator\r\n                var _operators = [];\r\n                var operator = operator_str.charAt(0);\r\n                //grab the largest possible chunks but start at 2 since we already know\r\n                //that the first character is an operator\r\n\r\n                for(var i = 1, L = operator_str.length; i < L; i++) {\r\n                    var ch = operator_str.charAt(i);\r\n                    var o = operator + ch;\r\n                    //since the operator now is undefined then the last operator\r\n                    //was the largest possible combination.\r\n                    if(!(o in operators)) {\r\n                        _operators.push(new Token(operator, Token.OPERATOR, start + i));\r\n                        operator = ch;\r\n                    }\r\n                    else\r\n                        operator = o;//now the operator is the larger chunk\r\n                }\r\n                //add the last operator\r\n                _operators.push(new Token(operator, Token.OPERATOR, start + i));\r\n                return _operators;\r\n            };\r\n\r\n            /**\r\n             * Is used to add a token to the tokens array. Makes sure that no empty token is added\r\n             * @param {int} at\r\n             * @param {String} token\r\n             * @returns {undefined}\r\n             */\r\n            var add_token = function (at, token) {\r\n                //grab the token if we're not supplied one\r\n                if(token === undefined)\r\n                    token = e.substring(lpos, at);\r\n                //only add it if it's not an empty string\r\n                if(token in _.units)\r\n                    target.push(new Token(token, Token.UNIT, lpos));\r\n                else if(token !== '')\r\n                    target.push(new Token(token, Token.VARIABLE_OR_LITERAL, lpos));\r\n            };\r\n            /**\r\n             * Adds a function to the output\r\n             * @param {String} f\r\n             * @returns {undefined}\r\n             */\r\n            var add_function = function (f) {\r\n                target.push(new Token(f, Token.FUNCTION, lpos));\r\n            };\r\n            /**\r\n             * Tokens are found between operators so this marks the location of where the last token was found\r\n             * @param {int} position\r\n             * @returns {undefined}\r\n             */\r\n            var set_last_position = function (position) {\r\n                lpos = position + 1;\r\n            };\r\n            /**\r\n             * When a operator is found and added, especially a combo operator, then the column location\r\n             * has to be adjusted to the end of the operator\r\n             * @returns {undefined}\r\n             */\r\n            var adjust_column_position = function () {\r\n                lpos = lpos + operator_str.length - 2;\r\n                col = lpos - 1;\r\n            };\r\n            for(; col < L; col++) {\r\n                var ch = e.charAt(col);\r\n                if(ch in operators) {\r\n                    add_token(col);\r\n                    //is the last token numeric?\r\n                    var last_token_is_numeric = target[0] && isNumber(target[0]);\r\n                    //is this character multiplication?\r\n                    var is_multiplication = last_token_is_numeric && ch === MULT;\r\n                    //if we're in a new scope then go up by one but if the space\r\n                    //is right befor an operator then it makes no sense to go up in scope\r\n                    //consider sin -x. The last position = current position at the minus sign\r\n                    //this means that we're going for sin(x) -x which is wrong\r\n                    //Ignore comma since comma is still part of the existing scope.\r\n                    if(has_space && lpos < col && !(ch === COMMA || is_multiplication)) {\r\n                        has_space = false;\r\n                        goUp();\r\n                    }\r\n                    //mark the last position that a\r\n                    set_last_position(col + 1);\r\n                    var operator_str = get_operator_str(col);\r\n\r\n                    adjust_column_position();\r\n                    target.push.apply(target, chunkify(operator_str));\r\n                }\r\n                else if(ch in brackets) {\r\n                    var bracket = brackets[ch];\r\n\r\n                    if(bracket.is_open) {\r\n                        //mark the bracket\r\n                        open_brackets.push([bracket, lpos]);\r\n                        var f = e.substring(lpos, col);\r\n                        if(f in functions) {\r\n                            add_function(f);\r\n                        }\r\n                        else if(f !== '') {\r\n                            //assume multiplication\r\n                            //TODO: Add the multiplication to stack\r\n                            target.push(new Token(f, Token.VARIABLE_OR_LITERAL, lpos));\r\n                        }\r\n                        //go down one in scope\r\n                        addScope(bracket.maps_to, col);\r\n                    }\r\n                    else if(bracket.is_close) {\r\n                        //get the matching bracket\r\n                        var pair = open_brackets.pop();\r\n                        //throw errors accordingly\r\n                        //missing open bracket\r\n                        if(!pair)\r\n                            throw new ParityError('Missing open bracket for bracket at: ' + (col + 1));\r\n                        //incorrect pair\r\n                        else if(pair[0].id !== bracket.id - 1)\r\n                            throw new ParityError('Parity error');\r\n\r\n                        add_token(col);\r\n                        goUp();\r\n                    }\r\n                    set_last_position(col);\r\n                }\r\n                else if(ch === SPACE) {\r\n                    var prev = e.substring(lpos, col); //look back\r\n                    var nxt = e.charAt(col + 1); //look forward\r\n                    if(has_space) {\r\n\r\n                        if(prev in operators) {\r\n                            target.push(new Token(prev, Token.OPERATOR, col));\r\n                        }\r\n                        else {\r\n                            add_token(undefined, prev);\r\n                            //we're at the closing space\r\n                            goUp(); //go up in scope if we're at a space\r\n\r\n                            //assume multiplication if it's not an operator except for minus\r\n                            var is_operator = nxt in operators;\r\n\r\n                            if((is_operator && operators[nxt].value === MINUS) || !is_operator) {\r\n                                target.push(new Token(MULT, Token.OPERATOR, col));\r\n                            }\r\n                        }\r\n                        has_space = false; //remove the space\r\n                    }\r\n                    else {\r\n                        //we're at the closing space\r\n                        //check if it's a function\r\n                        var f = e.substring(lpos, col);\r\n\r\n                        if(f in functions) {\r\n                            //there's no need to go up in scope if the next character is an operator\r\n                            has_space = true; //mark that a space was found\r\n                            add_function(f);\r\n                            addScope();\r\n                        }\r\n                        else if(f in operators) {\r\n                            target.push(new Token(f, Token.OPERATOR, col));\r\n                        }\r\n                        else {\r\n                            add_token(undefined, f);\r\n                            //peek ahead to the next character\r\n                            var nxt = e.charAt(col + 1);\r\n\r\n                            //If it's a number then add the multiplication operator to the stack but make sure that the next character\r\n                            //is not an operator\r\n\r\n                            if(prev !== EMPTY_STRING && nxt !== EMPTY_STRING && !(prev in operators) && !(nxt in operators))\r\n                                target.push(new Token(MULT, Token.OPERATOR, col));\r\n                        }\r\n                        //Possible source of bug. Review\r\n                        /*\r\n                         //space can mean multiplication so add the symbol if the is encountered\r\n                         if(/\\d+|\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(f)) {\r\n                         var next = e.charAt(col+1);\r\n                         var next_is_operator = next in operators;\r\n                         var ns = next_space(col+1);\r\n                         var next_word = e.substring(col+1, ns);\r\n                         //the next can either be a prefix operator or no operator\r\n                         if((next_is_operator && operators[next].prefix) || !(next_is_operator || next_word in operators))\r\n                         target.push(new Token('*', Token.OPERATOR, col));\r\n                         }\r\n                         */\r\n                    }\r\n                    set_last_position(col); //mark this location\r\n                }\r\n            }\r\n            //check that all brackets were closed\r\n            if(open_brackets.length) {\r\n                var b = open_brackets.pop();\r\n                throw new ParityError('Missing closed bracket for bracket at ' + (b[1] + 1));\r\n            }\r\n            //add the last token\r\n            add_token(col);\r\n\r\n            return tokens;\r\n        };\r\n        /*\r\n         * Puts token array in Reverse Polish Notation\r\n         * @param {Token[]} tokens\r\n         * @returns {Token[]}\r\n         */\r\n        this.toRPN = function (tokens) {\r\n            var fn = tokens.type;\r\n            var l = tokens.length, i;\r\n            var output = [];\r\n            var stack = [];\r\n            var prefixes = [];\r\n            var collapse = function (target, destination) {\r\n                while(target.length)\r\n                    destination.push(target.pop());\r\n            };\r\n            //mark all the prefixes and add them to the stack\r\n            for(i = 0; i < l; i++) {\r\n                var token = tokens[i];\r\n                if(token.type !== Token.OPERATOR)\r\n                    break;\r\n                if(!token.prefix)\r\n                    throw new OperatorError('Not a prefix operator');\r\n                token.is_prefix = true;\r\n                stack.push(token);\r\n            }\r\n            //begin with remaining tokens\r\n            for(; i < l; i++) {\r\n                var e = tokens[i];\r\n                if(e.type === Token.OPERATOR) {\r\n                    var operator = e;\r\n\r\n                    //create the option for the operator being overloaded\r\n                    if(operator.overloaded) {\r\n                        var next = tokens[i + 1];\r\n                        //if it's followed by a number or variable then we assume it's not a postfix operator\r\n                        if(next && next.type === Token.VARIABLE_OR_LITERAL) {\r\n                            operator.postfix = false;\r\n                            //override the original function with the overload function\r\n                            operator.action = operator.overloadAction;\r\n                            operator.leftAssoc = operator.overloadLeftAssoc;\r\n                        }\r\n                    }\r\n\r\n                    //if the stack is not empty\r\n                    while(stack.length) {\r\n                        var last = stack[stack.length - 1];\r\n                        //if (there is an operator at the top of the operator stack with greater precedence)\r\n                        //or (the operator at the top of the operator stack has equal precedence and is left associative)) ~ wikipedia\r\n                        //the !prefixes.length makes sure that the operator on stack isn't prematurely taken fromt he stack.\r\n                        if(!(last.precedence > operator.precedence || !operator.leftAssoc && last.precedence === operator.precedence))\r\n                            break;\r\n                        output.push(stack.pop());\r\n                    }\r\n\r\n                    //change the behavior of the operator if it's a vector and we've been asked to do so\r\n                    if((fn === 'vector' || fn === 'set') && 'vectorFn' in operator)\r\n                        operator.action = operator.vectorFn;\r\n\r\n\r\n                    //if the operator is a postfix operator then we're ready to go since it belongs\r\n                    //to the preceding token. However the output cannot be empty. It must have either\r\n                    //an operator or a variable/literal\r\n                    if(operator.postfix) {\r\n                        var previous = tokens[i - 1];\r\n                        if(!previous)\r\n                            throw new OperatorError(\"Unexpected prefix operator '\" + e.value + \"'! at \" + e.column);\r\n                        else if(previous.type === Token.OPERATOR) {\r\n                            //a postfix can only be followed by a postfix\r\n                            if(!previous.postfix)\r\n                                throw new OperatorError(\"Unexpected prefix operator '\" + previous.value + \"'! at \" + previous.column);\r\n                        }\r\n                    }\r\n                    else {\r\n                        //we must be at an infix so point the operator this\r\n                        do {\r\n                            //the first one is an infix operator all others have to be prefix operators so jump to the end\r\n                            var next = tokens[i + 1]; //take a look ahead\r\n                            var next_is_operator = next ? next.type === Token.OPERATOR : false; //check if it's an operator\r\n                            if(next_is_operator) {\r\n                                //if it's not a prefix operator then it not in the right place\r\n                                if(!next.prefix) {\r\n                                    throw new OperatorError('A prefix operator was expected at ' + next.column);\r\n                                }\r\n                                //mark it as a confirmed prefix\r\n                                next.is_prefix = true;\r\n                                //add it to the prefixes\r\n                                prefixes.push(next);\r\n                                i++;\r\n                            }\r\n                        }\r\n                        while(next_is_operator)\r\n                    }\r\n\r\n                    //if it's a prefix it should be on a special stack called prefixes\r\n                    //we do this to hold on to prefixes because of left associative operators.\r\n                    //they belong to the variable/literal but if placed on either the stack\r\n                    //or output there's no way of knowing this. I might be wrong so I welcome\r\n                    //any discussion about this.\r\n\r\n                    if(operator.is_prefix) //ADD ALL EXCEPTIONS FOR ADDING TO PREFIX STACK HERE. !!!\r\n                        prefixes.push(operator);\r\n                    else\r\n                        stack.push(operator);\r\n                    //move the prefixes to the stack\r\n                    while(prefixes.length) {\r\n                        if(operator.leftAssoc || !operator.leftAssoc && prefixes[prefixes.length - 1].precedence >= operator.precedence) //revisit for commas\r\n                            stack.push(prefixes.pop());\r\n                        else\r\n                            break;\r\n                    }\r\n                }\r\n                else if(e.type === Token.VARIABLE_OR_LITERAL) {\r\n                    //move prefixes to stack at beginning of scope\r\n                    if(output.length === 0)\r\n                        collapse(prefixes, stack);\r\n                    //done with token\r\n                    output.push(e);\r\n                    var last_on_stack = stack[stack.length - 1];\r\n                    //then move all the prefixes to the output\r\n                    if(!last_on_stack || !last_on_stack.leftAssoc)\r\n                        collapse(prefixes, output);\r\n                }\r\n                else if(e.type === Token.FUNCTION) {\r\n                    stack.push(e);\r\n                }\r\n                else if(e.type === Token.UNIT) {\r\n                    //if it's a unit it belongs on the stack since it's tied to the previous token\r\n                    output.push(e);\r\n                }\r\n                //if it's an additonal scope then put that into RPN form\r\n                if(Array.isArray(e)) {\r\n                    output.push(this.toRPN(e));\r\n                    if(e.type)\r\n                        output.push(new Token(e.type, Token.FUNCTION, e.column)); //since it's hidden it needs no column\r\n\r\n                }\r\n            }\r\n            //collapse the remainder of the stack and prefixes to output\r\n            collapse(stack, output);\r\n            collapse(prefixes, output);\r\n\r\n            return output;\r\n        };\r\n        /*\r\n         * Parses the tokens\r\n         * @param {Tokens[]} rpn\r\n         * @param {object} substitutions\r\n         * @returns {Symbol}\r\n         */\r\n        this.parseRPN = function (rpn, substitutions) {\r\n            try {\r\n                //default substitutions\r\n                substitutions = substitutions || {};\r\n                //prepare the substitutions.\r\n                //we first parse them out as-is\r\n                for(var x in substitutions)\r\n                    substitutions[x] = _.parse(substitutions[x], {});\r\n\r\n                //Although technically constants,\r\n                //pi and e are only available when evaluating the expression so add to the subs.\r\n                //Doing this avoids rounding errors\r\n                //link e and pi\r\n                if(Settings.PARSE2NUMBER) {\r\n                    //use the value provided if the individual for some strange reason prefers this.\r\n                    //one reason could be to sub e but not pi or vice versa\r\n                    if(!('e' in substitutions))\r\n                        substitutions.e = new Symbol(Settings.E);\r\n                    if((!('pi' in substitutions)))\r\n                        substitutions.pi = new Symbol(Settings.PI);\r\n                }\r\n\r\n                var Q = [];\r\n                for(var i = 0, l = rpn.length; i < l; i++) {\r\n                    var e = rpn[i];\r\n\r\n                    //Arrays indicate a new scope so parse that out\r\n                    if(Array.isArray(e)) {\r\n                        e = this.parseRPN(e, substitutions);\r\n                    }\r\n\r\n                    if(e) {\r\n                        if(e.type === Token.OPERATOR) {\r\n                            if(e.is_prefix || e.postfix)\r\n                                //resolve the operation assocated with the prefix\r\n                                Q.push(e.operation(Q.pop()));\r\n                            else {\r\n                                var b = Q.pop();\r\n                                var a = Q.pop();\r\n                                //Throw an error if the RH value is empty. This cannot be a postfix since we already checked\r\n                                if(typeof a === 'undefined')\r\n                                    throw new OperatorError(e + ' is not a valid postfix operator at ' + e.column);\r\n\r\n                                var is_comma = e.action === 'comma';\r\n                                //convert Sets to Vectors on all operations at this point. Sets are only recognized functions or individually\r\n                                if(a instanceof Set && !is_comma)\r\n                                    a = Vector.fromSet(a);\r\n\r\n                                if(b instanceof Set && !is_comma)\r\n                                    b = Vector.fromSet(b);\r\n\r\n                                //call all the pre-operators\r\n                                this.callPeekers('pre_operator', a, b, e);\r\n\r\n                                var ans = _[e.action](a, b);\r\n\r\n                                //call all the pre-operators\r\n                                this.callPeekers('post_operator', ans, a, b, e);\r\n\r\n                                Q.push(ans);\r\n                            }\r\n                        }\r\n                        else if(e.type === Token.FUNCTION) {\r\n                            var args = Q.pop();\r\n                            var parent = args.parent; //make a note of the parent\r\n                            if(!(args instanceof Collection))\r\n                                args = Collection.create(args);\r\n                            //the return value may be a vector. If it is then we check\r\n                            //Q to see if there's another vector on the stack. If it is then\r\n                            //we check if has elements. If it does then we know that we're dealing\r\n                            //with an \"getter\" object and return the requested values\r\n\r\n                            //call the function. This is the _.callfunction method in nerdamer\r\n                            //call the function. This is the _.callfunction method in nerdamer\r\n                            var fn_name = e.value;\r\n                            var fn_args = args.getItems();\r\n\r\n                            //call the pre-function peekers\r\n                            this.callPeekers('pre_function', fn_name, fn_args);\r\n\r\n                            var ret = _.callfunction(fn_name, fn_args);\r\n\r\n                            //call the post-function peekers\r\n                            this.callPeekers('post_function', ret, fn_name, fn_args);\r\n\r\n                            var last = Q[Q.length - 1];\r\n                            var next = rpn[i + 1];\r\n                            var next_is_comma = next && next.type === Token.OPERATOR && next.value === ',';\r\n\r\n                            if(!next_is_comma && ret instanceof Vector && last && last.elements && !(last instanceof Collection)) {\r\n                                //remove the item from the queue\r\n                                var item = Q.pop();\r\n\r\n                                var getter = ret.elements[0];\r\n                                //check if it's symbolic. If so put it back and add the item to the stack\r\n                                if(!getter.isConstant()) {\r\n                                    item.getter = getter;\r\n                                    Q.push(item);\r\n                                    Q.push(ret);\r\n                                }\r\n                                else if(getter instanceof Slice) {\r\n                                    //if it's a Slice return the slice\r\n                                    Q.push(Vector.fromArray(item.elements.slice(getter.start, getter.end)));\r\n                                }\r\n                                else {\r\n                                    var index = Number(getter);\r\n                                    var il = item.elements.length;\r\n                                    //support for negative indices\r\n                                    if(index < 0)\r\n                                        index = il + index;\r\n                                    //it it's still out of bounds\r\n                                    if(index < 0 || index >= il) //index should no longer be negative since it's been reset above\r\n                                        //range error\r\n                                        throw new OutOfRangeError('Index out of range ' + (e.column + 1));\r\n\r\n                                    var element = item.elements[index];\r\n                                    //cyclic but we need to mark this for future reference\r\n                                    item.getter = index;\r\n                                    element.parent = item;\r\n\r\n                                    Q.push(element);\r\n                                }\r\n                            }\r\n                            else {\r\n                                //extend the parent reference\r\n                                if(parent)\r\n                                    ret.parent = parent;\r\n                                Q.push(ret);\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            var subbed;\r\n                            var v = e.value;\r\n\r\n                            if(v in Settings.ALIASES)\r\n                                e = _.parse(Settings.ALIASES[e]);\r\n                            //wrap it in a symbol if need be\r\n                            else if(e.type === Token.VARIABLE_OR_LITERAL)\r\n                                e = new Symbol(v);\r\n                            else if(e.type === Token.UNIT) {\r\n                                e = new Symbol(v);\r\n                                e.isUnit = true;\r\n                            }\r\n\r\n                            //make substitutions\r\n                            //Always constants first. This avoids the being overridden\r\n                            if(v in _.CONSTANTS) {\r\n                                subbed = e;\r\n                                e = new Symbol(_.CONSTANTS[v]);\r\n                            }\r\n                            //next substitutions. This allows declared variable to be overridden\r\n                            //check if the values match to avoid erasing the multiplier.\r\n                            //Example:/e = 3*a. substutiting a for a will wipe out the multiplier.\r\n                            else if(v in substitutions && v !== substitutions[v].toString()) {\r\n                                subbed = e;\r\n                                e = substitutions[v].clone();\r\n                            }\r\n                            //next declare variables\r\n                            else if(v in VARS) {\r\n                                subbed = e;\r\n                                e = VARS[v].clone();\r\n                            }\r\n                            //make notation of what it was before\r\n                            if(subbed)\r\n                                e.subbed = subbed;\r\n\r\n                            Q.push(e);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                var retval = Q[0];\r\n\r\n                if(['undefined', 'string', 'number'].indexOf(typeof retval) !== -1) {\r\n                    throw new UnexpectedTokenError('Unexpected token!');\r\n                }\r\n\r\n                return retval;\r\n            }\r\n            catch(error) {\r\n                var rethrowErrors = [OutOfFunctionDomainError];\r\n                // Rethrow certain errors in the same class to preserve them\r\n                rethrowErrors.forEach(function (E) {\r\n                    if(error instanceof E) {\r\n                        throw new E(error.message + ': ' + e.column);\r\n                    }\r\n                });\r\n\r\n                throw new ParseError(error.message + ': ' + e.column);\r\n            }\r\n        };\r\n        /**\r\n         * This is the method that triggers the parsing of the string. It generates a parse tree but processes\r\n         * it right away. The operator functions are called when their respective operators are reached. For instance\r\n         * + with cause this.add to be called with the left and right hand values. It works by walking along each\r\n         * character of the string and placing the operators on the stack and values on the output. When an operator\r\n         * having a lower order than the last is reached then the stack is processed from the last operator on the\r\n         * stack.\r\n         * @param {String} token\r\n         */\r\n\r\n        function Node(token) {\r\n            this.type = token.type;\r\n            this.value = token.value;\r\n            //the incoming token may already be a Node type\r\n            this.left = token.left;\r\n            this.right = token.right;\r\n        }\r\n\r\n        Node.prototype.toString = function () {\r\n            var left = this.left ? this.left.toString() + '---' : '';\r\n            var right = this.right ? '---' + this.right.toString() : '';\r\n            return left + '(' + this.value + ')' + right;\r\n        };\r\n\r\n        Node.prototype.toHTML = function (depth, indent) {\r\n            depth = depth || 0;\r\n            indent = typeof indent === 'undefined' ? 4 : indent;\r\n            var tab = function (n) {\r\n                return ' '.repeat(indent * n);\r\n            };\r\n            var html = '';\r\n            var left = this.left ? tab(depth + 1) + '<li>\\n' + this.left.toHTML(depth + 2, indent) + tab(depth + 1) + '</li> \\n' : '';\r\n            var right = this.right ? tab(depth + 1) + '<li>\\n' + this.right.toHTML(depth + 2, indent) + tab(depth + 1) + '</li>\\n' : '';\r\n            var html = tab(depth) + '<div class=\"' + this.type.toLowerCase() + '\"><span>' + this.value + '</span></div>' + tab(depth) + '\\n';\r\n            if(left || right) {\r\n                html += tab(depth) + '<ul>\\n' + left + right + tab(depth) + '</ul>\\n';\r\n            }\r\n            html += '';\r\n            return html;\r\n        };\r\n\r\n        this.tree = function (tokens) {\r\n            var Q = [];\r\n            for(var i = 0; i < tokens.length; i++) {\r\n                var e = tokens[i];\r\n                //Arrays indicate a new scope so parse that out\r\n                if(Array.isArray(e)) {\r\n                    e = this.tree(e);\r\n                    //if it's a comma then it's just arguments\r\n                    Q.push(e);\r\n                    continue;\r\n                }\r\n                if(e.type === Token.OPERATOR) {\r\n                    if(e.is_prefix || e.postfix) {\r\n                        //prefixes go to the left, postfix to the right\r\n                        var location = e.is_prefix ? 'left' : 'right';\r\n                        var last = Q.pop();\r\n                        e = new Node(e);\r\n                        e[location] = last;\r\n                        Q.push(e);\r\n                    }\r\n                    else {\r\n                        e = new Node(e);\r\n                        e.right = Q.pop();\r\n                        e.left = Q.pop();\r\n                        Q.push(e);\r\n                    }\r\n                }\r\n                else if(e.type === Token.FUNCTION) {\r\n                    e = new Node(e);\r\n                    var args = Q.pop();\r\n                    e.right = args;\r\n                    if(e.value === 'object') {\r\n                        //check if Q has a value\r\n                        var last = Q[Q.length - 1];\r\n                        if(last) {\r\n                            while(last.right) {\r\n                                last = last.right;\r\n                            }\r\n                            last.right = e;\r\n                            continue;\r\n                        }\r\n                    }\r\n\r\n                    Q.push(e);\r\n                }\r\n                else {\r\n                    Q.push(new Node(e));\r\n                }\r\n            }\r\n\r\n            return Q[0];\r\n        };\r\n        this.parse = function (e, substitutions) {\r\n            e = prepare_expression(e);\r\n            substitutions = substitutions || {};\r\n            //three passes but easier to debug\r\n            var tokens = this.tokenize(e);\r\n            var rpn = this.toRPN(tokens);\r\n            return this.parseRPN(rpn, substitutions);\r\n        };\r\n        /**\r\n         * TODO: Switch to Parser.tokenize for this method\r\n         * Reads a string into an array of Symbols and operators\r\n         * @param {String} expression_string\r\n         * @returns {Array}\r\n         */\r\n        this.toObject = function (expression_string) {\r\n            var objectify = function (tokens) {\r\n                var output = [];\r\n                for(var i = 0, l = tokens.length; i < l; i++) {\r\n                    var token = tokens[i];\r\n                    var v = token.value;\r\n                    if(token.type === Token.VARIABLE_OR_LITERAL) {\r\n                        output.push(new Symbol(v));\r\n                    }\r\n                    else if(token.type === Token.FUNCTION) {\r\n                        //jump ahead since the next object are the arguments\r\n                        i++;\r\n                        //create a symbolic function and stick it on output\r\n                        var f = _.symfunction(v, objectify(tokens[i]));\r\n                        f.isConversion = true;\r\n                        output.push(f);\r\n                    }\r\n                    else if(token.type === Token.OPERATOR) {\r\n                        output.push(v);\r\n                    }\r\n                    else {\r\n                        output.push(objectify(token));\r\n                    }\r\n                }\r\n\r\n                return output;\r\n            };\r\n            return objectify(_.tokenize(expression_string));\r\n        };\r\n\r\n        // A helper method for toTeX\r\n        var chunkAtCommas = function (arr) {\r\n            var j, k = 0, chunks = [[]];\r\n            for(var j = 0, l = arr.length; j < l; j++) {\r\n                if(arr[j] === ',') {\r\n                    k++;\r\n                    chunks[k] = [];\r\n                }\r\n                else {\r\n                    chunks[k].push(arr[j]);\r\n                }\r\n            }\r\n            return chunks;\r\n        };\r\n\r\n        // Helper method for toTeX\r\n        var rem_brackets = function (str) {\r\n            return str.replace(/^\\\\left\\((.+)\\\\right\\)$/g, function (str, a) {\r\n                if(a)\r\n                    return a;\r\n                return str;\r\n            });\r\n        };\r\n\r\n        var remove_redundant_powers = function (arr) {\r\n            // The filtered array\r\n            var narr = [];\r\n\r\n            while(arr.length) {\r\n                // Remove the element from the front\r\n                var e = arr.shift();\r\n                var next = arr[0];\r\n                var next_is_array = isArray(next);\r\n                var next_is_minus = next === '-';\r\n\r\n                // Remove redundant plusses \r\n                if(e === '^') {\r\n                    if(next === '+') {\r\n                        arr.shift();\r\n                    }\r\n                    else if(next_is_array && next[0] === '+') {\r\n                        next.shift();\r\n                    }\r\n\r\n                    // Remove redundant parentheses\r\n                    if(next_is_array && next.length === 1) {\r\n                        arr.unshift(arr.shift()[0]);\r\n                    }\r\n                }\r\n\r\n                // Check if it's a negative power\r\n                if(e === '^' && (next_is_array && next[0] === '-' || next_is_minus)) {\r\n                    // If so:\r\n                    // - Remove it from the new array, place a one and a division sign in that array and put it back\r\n                    var last = narr.pop();\r\n                    // Check if it's something multiplied by\r\n                    var before = narr[narr.length - 1];\r\n                    var before_last = '1';\r\n\r\n                    if(before === '*') {\r\n                        narr.pop();\r\n                        // For simplicity we just pop it. \r\n                        before_last = narr.pop();\r\n                    }\r\n                    // Implied multiplication\r\n                    else if(isArray(before)) {\r\n                        before_last = narr.pop();\r\n                    }\r\n\r\n                    narr.push(before_last, '/', last, e);\r\n\r\n                    // Remove the negative sign from the power \r\n                    if(next_is_array) {\r\n                        next.shift();\r\n                    }\r\n                    else {\r\n                        arr.shift();\r\n                    }\r\n\r\n                    // Remove it from the array so we don't end up with redundant parentheses if we can\r\n                    if(next_is_array && next.length === 1) {\r\n                        narr.push(arr.shift()[0]);\r\n                    }\r\n                }\r\n                else {\r\n                    narr.push(e);\r\n                }\r\n            }\r\n\r\n            return narr;\r\n        };\r\n        /*\r\n         * Convert expression or object to LaTeX\r\n         * @param {String} expression_or_obj\r\n         * @param {object} opt\r\n         * @returns {String}\r\n         */\r\n        this.toTeX = function (expression_or_obj, opt) {\r\n            opt = opt || {};\r\n            // Add decimal option as per issue #579. Consider passing an object to Latex.latex as option instead of string\r\n            var decimals = opt.decimals === true ? 'decimals' : undefined;\r\n\r\n            var obj = typeof expression_or_obj === 'string' ? this.toObject(expression_or_obj) : expression_or_obj,\r\n                    TeX = [],\r\n                    cdot = typeof opt.cdot === 'undefined' ? '\\\\cdot' : opt.cdot; //set omit cdot to true by default\r\n\r\n            // Remove negative powers as per issue #570\r\n            obj = remove_redundant_powers(obj);\r\n\r\n            if(isArray(obj)) {\r\n                var nobj = [], a, b;\r\n                //first handle ^\r\n                for(var i = 0; i < obj.length; i++) {\r\n                    a = obj[i];\r\n\r\n                    if(obj[i + 1] === '^') {\r\n                        b = obj[i + 2];\r\n                        nobj.push(LaTeX.braces(this.toTeX([a])) + '^' + LaTeX.braces(this.toTeX([b])));\r\n                        i += 2;\r\n                    }\r\n                    else {\r\n                        nobj.push(a);\r\n                    }\r\n                }\r\n                obj = nobj;\r\n            }\r\n\r\n            for(var i = 0, l = obj.length; i < l; i++) {\r\n                var e = obj[i];\r\n\r\n                // Convert * to cdot\r\n                if(e === '*') {\r\n                    e = cdot;\r\n                }\r\n\r\n                if(isSymbol(e)) {\r\n                    if(e.group === FN) {\r\n                        var fname = e.fname, f;\r\n\r\n                        if(fname === SQRT) {\r\n                            f = '\\\\sqrt' + LaTeX.braces(this.toTeX(e.args));\r\n                        }\r\n                        else if(fname === ABS) {\r\n                            f = LaTeX.brackets(this.toTeX(e.args), 'abs');\r\n                        }\r\n                        else if(fname === PARENTHESIS) {\r\n                            f = LaTeX.brackets(this.toTeX(e.args), 'parens');\r\n                        }\r\n                        else if(fname === Settings.LOG10) {\r\n                            f = '\\\\' + Settings.LOG10_LATEX + '\\\\left( ' + this.toTeX(e.args) + '\\\\right)';\r\n                        }\r\n                        else if(fname === 'integrate') {\r\n                            /* Retrive [Expression, x] */\r\n                            var chunks = chunkAtCommas(e.args);\r\n                            /* Build TeX */\r\n                            var expr = LaTeX.braces(this.toTeX(chunks[0])),\r\n                                    dx = this.toTeX(chunks[1]);\r\n                            f = '\\\\int ' + expr + '\\\\, d' + dx;\r\n                        }\r\n                        else if(fname === 'defint') {\r\n                            var chunks = chunkAtCommas(e.args),\r\n                                    expr = LaTeX.braces(this.toTeX(chunks[0])),\r\n                                    dx = this.toTeX(chunks[3]),\r\n                                    lb = this.toTeX(chunks[1]),\r\n                                    ub = this.toTeX(chunks[2]);\r\n                            f = '\\\\int\\\\limits_{' + lb + '}^{' + ub + '} ' + expr + '\\\\, d' + dx;\r\n\r\n                        }\r\n                        else if(fname === 'diff') {\r\n                            var chunks = chunkAtCommas(e.args);\r\n                            var dx = '', expr = LaTeX.braces(this.toTeX(chunks[0]));\r\n                            /* Handle cases: one argument provided, we need to guess the variable, and assume n = 1 */\r\n                            if(chunks.length === 1) {\r\n                                var vars = [];\r\n                                for(j = 0; j < chunks[0].length; j++) {\r\n                                    if(chunks[0][j].group === 3) {\r\n                                        vars.push(chunks[0][j].value);\r\n                                    }\r\n                                }\r\n                                vars.sort();\r\n                                dx = vars.length > 0 ? ('\\\\frac{d}{d ' + vars[0] + '}') : '\\\\frac{d}{d x}';\r\n                            }\r\n                            /* If two arguments, we have expression and variable, we assume n = 1 */\r\n                            else if(chunks.length === 2) {\r\n                                dx = '\\\\frac{d}{d ' + chunks[1] + '}';\r\n                            }\r\n                            /* If we have more than 2 arguments, we assume we've got everything */\r\n                            else {\r\n                                dx = '\\\\frac{d^{' + chunks[2] + '}}{d ' + this.toTeX(chunks[1]) + '^{' + chunks[2] + '}}';\r\n                            }\r\n\r\n                            f = dx + '\\\\left(' + expr + '\\\\right)';\r\n\r\n                        }\r\n                        else if(fname === 'sum' || fname === 'product') {\r\n                            // Split e.args into 4 parts based on locations of , symbols.\r\n                            var argSplit = [[], [], [], []], j = 0, i;\r\n                            for(i = 0; i < e.args.length; i++) {\r\n                                if(e.args[i] === ',') {\r\n                                    j++;\r\n                                    continue;\r\n                                }\r\n                                argSplit[j].push(e.args[i]);\r\n                            }\r\n                            // Then build TeX string.\r\n                            f = (fname === 'sum' ? '\\\\sum_' : '\\\\prod_') + LaTeX.braces(this.toTeX(argSplit[1]) + ' = ' + this.toTeX(argSplit[2]));\r\n                            f += '^' + LaTeX.braces(this.toTeX(argSplit[3])) + LaTeX.braces(this.toTeX(argSplit[0]));\r\n                        }\r\n                        else if(fname === 'limit') {\r\n                            var args = chunkAtCommas(e.args).map(function (x) {\r\n                                if(Array.isArray(x))\r\n                                    return _.toTeX(x.join(''));\r\n                                return _.toTeX(String(x));\r\n                            });\r\n                            f = '\\\\lim_' + LaTeX.braces(args[1] + '\\\\to ' + args[2]) + ' ' + LaTeX.braces(args[0]);\r\n                        }\r\n                        else if(fname === FACTORIAL || fname === DOUBLEFACTORIAL) {\r\n                            f = this.toTeX(e.args) + (fname === FACTORIAL ? '!' : '!!');\r\n                        }\r\n                        else {\r\n                            f = LaTeX.latex(e, decimals);\r\n                            //f = '\\\\mathrm'+LaTeX.braces(fname.replace(/_/g, '\\\\_')) + LaTeX.brackets(this.toTeX(e.args), 'parens');\r\n                        }\r\n\r\n                        TeX.push(f);\r\n                    }\r\n                    else {\r\n                        TeX.push(LaTeX.latex(e, decimals));\r\n                    }\r\n                }\r\n                else if(isArray(e)) {\r\n                    TeX.push(LaTeX.brackets(this.toTeX(e)));\r\n                }\r\n                else {\r\n                    if(e === '/')\r\n                        TeX.push(LaTeX.frac(rem_brackets(TeX.pop()), rem_brackets(this.toTeX([obj[++i]]))));\r\n                    else\r\n                        TeX.push(e);\r\n                }\r\n            }\r\n\r\n            return TeX.join(' ');\r\n        };\r\n\r\n//Parser.functions ==============================================================\r\n        /* Although parens is not a \"real\" function it is important in some cases when the\r\n         * symbol must carry parenthesis. Once set you don't have to worry about it anymore\r\n         * as the parser will get rid of it at the first opportunity\r\n         */\r\n        function parens(symbol) {\r\n            if(Settings.PARSE2NUMBER) {\r\n                return symbol;\r\n            }\r\n            return _.symfunction('parens', [symbol]);\r\n        }\r\n\r\n        function abs(symbol) {\r\n\r\n            //|-∞| = ∞\r\n            if(symbol.isInfinity) {\r\n                return Symbol.infinity();\r\n            }\r\n            if(symbol.multiplier.lessThan(0))\r\n                symbol.multiplier.negate();\r\n\r\n            if(symbol.isImaginary()) {\r\n                var re = symbol.realpart();\r\n                var im = symbol.imagpart();\r\n                if(re.isConstant() && im.isConstant())\r\n                    return sqrt(_.add(_.pow(re, new Symbol(2)), _.pow(im, new Symbol(2))));\r\n            }\r\n            else if(isNumericSymbol(symbol) || even(symbol.power)) {\r\n                return symbol;\r\n            }\r\n\r\n            if(symbol.isComposite()) {\r\n                var ms = [];\r\n                symbol.each(function (x) {\r\n                    ms.push(x.multiplier);\r\n                });\r\n                var gcd = Math2.QGCD.apply(null, ms);\r\n                if(gcd.lessThan(0)) {\r\n                    symbol.multiplier = symbol.multiplier.multiply(new Frac(-1));\r\n                    symbol.distributeMultiplier();\r\n                }\r\n            }\r\n\r\n            //convert |n*x| to n*|x|\r\n            var m = _.parse(symbol.multiplier);\r\n            symbol.toUnitMultiplier();\r\n\r\n            return _.multiply(m, _.symfunction(ABS, [symbol]));\r\n        }\r\n        /**\r\n         * The factorial function\r\n         * @param {Symbol} symbol\r\n         * @return {Symbol}\r\n         */\r\n        function factorial(symbol) {\r\n            var retval;\r\n            if(isVector(symbol)) {\r\n                var V = new Vector();\r\n                symbol.each(function (x, i) {\r\n                    //i start at one.\r\n                    V.set(i - 1, factorial(x));\r\n                });\r\n                return V;\r\n            }\r\n            if(isMatrix(symbol)) {\r\n                var M = new Matrix();\r\n                symbol.each(function (x, i, j) {\r\n                    //i start at one.\r\n                    M.set(i, j, factorial(x));\r\n                });\r\n                return M;\r\n            }\r\n            if(Settings.PARSE2NUMBER && symbol.isConstant()) {\r\n                if(isInt(symbol)) {\r\n                    retval = Math2.bigfactorial(symbol);\r\n                }\r\n                else {\r\n                    retval = Math2.gamma(symbol.multiplier.add(new Frac(1)).toDecimal());\r\n                }\r\n\r\n                retval = bigConvert(retval);\r\n                return retval;\r\n            }\r\n            else if(symbol.isConstant()) {\r\n                var den = symbol.getDenom();\r\n                if(den.equals(2)) {\r\n                    var num = symbol.getNum();\r\n                    var a, b, c, n;\r\n\r\n                    if(!symbol.multiplier.isNegative()) {\r\n                        n = _.add(num, new Symbol(1)).multiplier.divide(new Frac(2));\r\n                        a = Math2.bigfactorial(new Frac(2).multiply(n));\r\n                        b = _.pow(new Symbol(4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\r\n                    }\r\n                    else {\r\n                        n = _.subtract(num.negate(), new Symbol(1)).multiplier.divide(new Frac(2));\r\n                        a = _.pow(new Symbol(-4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\r\n                        b = Math2.bigfactorial(new Frac(2).multiply(n));\r\n                    }\r\n                    c = a.divide(b);\r\n                    return _.multiply(_.parse('sqrt(pi)'), new Symbol(c));\r\n                }\r\n            }\r\n            return _.symfunction(FACTORIAL, [symbol]);\r\n        }\r\n        ;\r\n        /**\r\n         * Returns the continued fraction of a number\r\n         * @param {Symbol} symbol\r\n         * @param {Symbol} n\r\n         * @returns {Symbol}\r\n         */\r\n        function continued_fraction(symbol, n) {\r\n            var _symbol = evaluate(symbol);\r\n            if(_symbol.isConstant()) {\r\n                var cf = Math2.continuedFraction(_symbol, n);\r\n                //convert the fractions array to a new Vector\r\n                var fractions = Vector.fromArray(cf.fractions.map(function (x) {\r\n                    return new Symbol(x);\r\n                }));\r\n                return Vector.fromArray([new Symbol(cf.sign), new Symbol(cf.whole), fractions]);\r\n            }\r\n            return _.symfunction('continued_fraction', arguments);\r\n        }\r\n        /**\r\n         * Returns the error function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function erf(symbol) {\r\n            var _symbol = evaluate(symbol);\r\n\r\n            if(_symbol.isConstant()) {\r\n                return Math2.erf(_symbol);\r\n            }\r\n            else if(_symbol.isImaginary()) {\r\n                return complex.erf(symbol);\r\n            }\r\n            return _.symfunction('erf', arguments);\r\n        }\r\n        ;\r\n        /**\r\n         * The mod function\r\n         * @param {Symbol} symbol1\r\n         * @param {Symbol} symbol2\r\n         * @returns {Symbol}\r\n         */\r\n        function mod(symbol1, symbol2) {\r\n            if(symbol1.isConstant() && symbol2.isConstant()) {\r\n                var retval = new Symbol(1);\r\n                retval.multiplier = retval.multiplier.multiply(symbol1.multiplier.mod(symbol2.multiplier));\r\n                return retval;\r\n            }\r\n            //try to see if division has remainder of zero\r\n            var r = _.divide(symbol1.clone(), symbol2.clone());\r\n            if(isInt(r))\r\n                return new Symbol(0);\r\n            return _.symfunction('mod', [symbol1, symbol2]);\r\n        }\r\n        /**\r\n         * A branghing function\r\n         * @param {Boolean} condition\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        function IF(condition, a, b) {\r\n            if(typeof condition !== 'boolean')\r\n                if(isNumericSymbol(condition))\r\n                    condition = !!Number(condition);\r\n            if(condition)\r\n                return a;\r\n            return b;\r\n        }\r\n        /**\r\n         *\r\n         * @param {Matrix|Vector|Set|Collection} obj\r\n         * @param {Symbol} item\r\n         * @returns {Boolean}\r\n         */\r\n        function is_in(obj, item) {\r\n            if(isMatrix(obj)) {\r\n                for(var i = 0, l = obj.rows(); i < l; i++) {\r\n                    for(var j = 0, l2 = obj.cols(); j < l2; j++) {\r\n                        var element = obj.elements[i][j];\r\n                        if(element.equals(item))\r\n                            return new Symbol(1);\r\n                    }\r\n                }\r\n            }\r\n            else if(obj.elements) {\r\n                for(var i = 0, l = obj.elements.length; i < l; i++) {\r\n                    if(obj.elements[i].equals(item))\r\n                        return new Symbol(1);\r\n                }\r\n            }\r\n\r\n            return new Symbol(0);\r\n        }\r\n\r\n        /**\r\n         * A symbolic extension for sinc\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function sinc(symbol) {\r\n            if(Settings.PARSE2NUMBER) {\r\n                if(symbol.isConstant()) {\r\n                    return new Symbol(Math2.sinc(symbol));\r\n                }\r\n                return _.parse(format('sin({0})/({0})', symbol));\r\n            }\r\n            return _.symfunction('sinc', [symbol]);\r\n        }\r\n\r\n        /**\r\n         * A symbolic extension for exp. This will auto-convert all instances of exp(x) to e^x.\r\n         * Thanks @ Happypig375\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function exp(symbol) {\r\n            if(symbol.fname === Settings.LOG && symbol.isLinear()) {\r\n                return _.pow(symbol.args[0], Symbol.create(symbol.multiplier));\r\n            }\r\n            return _.parse(format('e^({0})', symbol));\r\n        }\r\n\r\n        /**\r\n         * Converts value degrees to radians\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function radians(symbol) {\r\n            return _.parse(format('({0})*pi/180', symbol));\r\n        }\r\n\r\n        /**\r\n         * Converts value from radians to degrees\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function degrees(symbol) {\r\n            return _.parse(format('({0})*180/pi', symbol));\r\n        }\r\n\r\n        function nroots(symbol) {\r\n            var a, b;\r\n            if(symbol.group === FN && symbol.fname === '') {\r\n                a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\r\n                b = _.parse(symbol.power);\r\n            }\r\n            else if(symbol.group === P) {\r\n                a = _.parse(symbol.value);\r\n                b = _.parse(symbol.power);\r\n            }\r\n\r\n            if(a && b && a.group === N && b.group === N) {\r\n                var _roots = [];\r\n                var parts = Symbol.toPolarFormArray(symbol);\r\n                var r = _.parse(a).abs().toString();\r\n                //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\r\n                var x = arg(a).toString();\r\n                var n = b.multiplier.den.toString();\r\n                var p = b.multiplier.num.toString();\r\n\r\n                var formula = \"(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})\";\r\n                for(var i = 0; i < n; i++) {\r\n                    var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\r\n                    _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\r\n                }\r\n                return Vector.fromArray(_roots);\r\n            }\r\n            else if(symbol.isConstant(true)) {\r\n                var sign = symbol.sign();\r\n                var x = evaluate(symbol.abs());\r\n                var root = _.sqrt(x);\r\n\r\n                var _roots = [root.clone(), root.negate()];\r\n\r\n                if(sign < 0)\r\n                    _roots = _roots.map(function (x) {\r\n                        return _.multiply(x, Symbol.imaginary());\r\n                    });\r\n            }\r\n            else {\r\n                _roots = [_.parse(symbol)];\r\n            }\r\n\r\n            return Vector.fromArray(_roots);\r\n        }\r\n\r\n        /**\r\n         * Rationalizes a symbol\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function rationalize(symbol) {\r\n            if(symbol.isComposite()) {\r\n                var retval = new Symbol(0);\r\n                var num, den, retnum, retden, a, b, n, d;\r\n                symbol.each(function (x) {\r\n                    num = x.getNum();\r\n                    den = x.getDenom();\r\n                    retnum = retval.getNum();\r\n                    retden = retval.getDenom();\r\n                    a = _.multiply(den, retnum);\r\n                    b = _.multiply(num, retden);\r\n                    n = _.expand(_.add(a, b));\r\n                    d = _.multiply(retden, den);\r\n                    retval = _.divide(n, d);\r\n                }, true);\r\n\r\n                return retval;\r\n            }\r\n            return symbol;\r\n        }\r\n\r\n        /**\r\n         * The square root function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function sqrt(symbol) {\r\n            if(!isSymbol(symbol)) {\r\n                symbol = _.parse(symbol);\r\n            }\r\n            \r\n            // Exit early for EX\r\n            if(symbol.group === EX) {\r\n                return _.symfunction(SQRT, [symbol]);\r\n            }\r\n\r\n            if(symbol.fname === '' && symbol.power.equals(1))\r\n                symbol = symbol.args[0];\r\n\r\n            var is_negative = symbol.multiplier.sign() < 0;\r\n\r\n            if(Settings.PARSE2NUMBER) {\r\n                if(symbol.isConstant() && !is_negative) {\r\n                    return new Symbol(bigDec.sqrt(symbol.multiplier.toDecimal()));\r\n                }\r\n                else if(symbol.isImaginary()) {\r\n                    return complex.sqrt(symbol);\r\n                }\r\n                else if(symbol.group === S) {\r\n                    return _.symfunction('sqrt', [symbol]);\r\n                }\r\n            }\r\n\r\n            var img, retval,\r\n                    isConstant = symbol.isConstant();\r\n\r\n            if(symbol.group === CB && symbol.isLinear()) {\r\n                var m = sqrt(Symbol(symbol.multiplier));\r\n                for(var s in symbol.symbols) {\r\n                    var x = symbol.symbols[s];\r\n                    m = _.multiply(m, sqrt(x));\r\n                }\r\n\r\n                retval = m;\r\n            }\r\n            //if the symbol is already sqrt then it's that symbol^(1/4) and we can unwrap it\r\n            else if(symbol.fname === SQRT) {\r\n                var s = symbol.args[0];\r\n                var ms = symbol.multiplier;\r\n                s.setPower(symbol.power.multiply(new Frac(0.25)));\r\n                retval = s;\r\n                //grab the multiplier\r\n                if(!ms.equals(1))\r\n                    retval = _.multiply(sqrt(_.parse(ms)), retval);\r\n            }\r\n            //if the symbol is a fraction then we don't keep can unwrap it. For instance\r\n            //no need to keep sqrt(x^(1/3))\r\n            else if(!symbol.power.isInteger()) {\r\n                symbol.setPower(symbol.power.multiply(new Frac(0.5)));\r\n                retval = symbol;\r\n            }\r\n            else if(symbol.multiplier < 0 && symbol.group === S) {\r\n                var a = _.parse(symbol.multiplier).negate();\r\n                var b = _.parse(symbol).toUnitMultiplier().negate();\r\n                retval = _.multiply(_.symfunction(Settings.SQRT, [b]), sqrt(a));\r\n            }\r\n            else {\r\n\r\n                //Related to issue #401. Since sqrt(a)*sqrt(b^-1) relates in issues, we'll change the form\r\n                //to sqrt(a)*sqrt(b)^1 for better simplification\r\n                //the sign of the power\r\n                var sign = symbol.power.sign();\r\n                //remove the sign\r\n                symbol.power = symbol.power.abs();\r\n\r\n                //if the symbols is imagary then we place in the imaginary part. We'll return it\r\n                //as a product\r\n                if(isConstant && symbol.multiplier.lessThan(0)) {\r\n                    img = Symbol.imaginary();\r\n                    symbol.multiplier = symbol.multiplier.abs();\r\n                }\r\n\r\n                var q = symbol.multiplier.toDecimal(),\r\n                        qa = Math.abs(q),\r\n                        t = Math.sqrt(qa);\r\n\r\n                var m;\r\n                //it's a perfect square so take the square\r\n                if(isInt(t)) {\r\n                    m = new Symbol(t);\r\n                }\r\n                else if(isInt(q)) {\r\n                    var factors = Math2.ifactor(q);\r\n                    var tw = 1;\r\n                    for(var x in factors) {\r\n                        var n = factors[x],\r\n                                nn = (n - (n % 2)); //get out the whole numbers\r\n                        if(nn) { //if there is a whole number ...\r\n                            var w = Math.pow(x, nn);\r\n                            tw *= Math.pow(x, nn / 2); //add to total wholes\r\n                            q /= w; //reduce the number by the wholes\r\n                        }\r\n                    }\r\n                    m = _.multiply(_.symfunction(SQRT, [new Symbol(q)]), new Symbol(tw));\r\n                }\r\n                else {\r\n                    //reduce the numerator and denominator using prime factorization\r\n                    var c = [new Symbol(symbol.multiplier.num), new Symbol(symbol.multiplier.den)];\r\n                    var r = [new Symbol(1), new Symbol(1)];\r\n                    var sq = [new Symbol(1), new Symbol(1)];\r\n                    for(var i = 0; i < 2; i++) {\r\n                        var n = c[i];\r\n                        //get the prime factors and loop through each.\r\n                        pfactor(n).each(function (x) {\r\n                            x = Symbol.unwrapPARENS(x);\r\n                            var b = x.clone().toLinear();\r\n                            var p = Number(x.power);\r\n                            //We'll consider it safe to use the native Number since 2^1000 is already a pretty huge number\r\n                            var rem = p % 2; //get the remainder. This will be 1 if 3 since sqrt(n^2) = n where n is positive\r\n                            var w = (p - rem) / 2; //get the whole numbers of n/2\r\n                            r[i] = _.multiply(r[i], _.pow(b, new Symbol(w)));\r\n                            sq[i] = _.multiply(sq[i], sqrt(_.pow(b, new Symbol(rem))));\r\n                        });\r\n                    }\r\n                    m = _.divide(_.multiply(r[0], sq[0]), _.multiply(r[1], sq[1]));\r\n                }\r\n\r\n\r\n                //strip the multiplier since we already took the sqrt\r\n                symbol = symbol.toUnitMultiplier(true);\r\n                //if the symbol is one just return one and not the sqrt function\r\n                if(symbol.isOne()) {\r\n                    retval = symbol;\r\n                }\r\n                else if(even(symbol.power.toString())) {\r\n                    //just raise it to the 1/2\r\n                    retval = _.pow(symbol.clone(), new Symbol(0.5));\r\n                }\r\n                else {\r\n                    retval = _.symfunction(SQRT, [symbol]);\r\n                }\r\n\r\n                //put back the sign that was removed earlier\r\n                if(sign < 0)\r\n                    retval.power.negate();\r\n\r\n                if(m)\r\n                    retval = _.multiply(m, retval);\r\n\r\n                if(img)\r\n                    retval = _.multiply(img, retval);\r\n            }\r\n\r\n            if(is_negative && Settings.PARSE2NUMBER)\r\n                return _.parse(retval);\r\n\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * The cube root function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function cbrt(symbol) {\r\n            if(!symbol.isConstant(true)) {\r\n                var retval;\r\n\r\n                var n = symbol.power / 3;\r\n                //take the cube root of the multplier\r\n                var m = _.pow(_.parse(symbol.multiplier), new Symbol(1 / 3));\r\n                //strip the multiplier\r\n                var sym = symbol.toUnitMultiplier();\r\n\r\n                //simplify the power\r\n                if(isInt(n)) {\r\n                    retval = _.pow(sym.toLinear(), _.parse(n));\r\n                }\r\n                else {\r\n                    if(sym.group === CB) {\r\n                        retval = new Symbol(1);\r\n                        sym.each(function (x) {\r\n                            retval = _.multiply(retval, cbrt(x));\r\n                        });\r\n                    }\r\n                    else {\r\n                        retval = _.symfunction('cbrt', [sym]);\r\n                    }\r\n                }\r\n\r\n                return _.multiply(m, retval);\r\n            }\r\n            return nthroot(symbol, new Symbol(3));\r\n        }\r\n\r\n        function scientific(symbol, sigfigs) {\r\n            //Just set the flag and keep it moving. Symbol.toString will deal with how to\r\n            //display this\r\n            symbol.scientific = sigfigs || 10;\r\n            return symbol;\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param {Symbol} num - the number being raised\r\n         * @param {Symbol} p - the exponent\r\n         * @param {type} prec - the precision wanted\r\n         * @param {bool} asbig - true if a bigDecimal is wanted\r\n         * @returns {Symbol}\r\n         */\r\n        function nthroot(num, p, prec, asbig) {\r\n            //clone p and convert to a number if possible\r\n            p = evaluate(_.parse(p));\r\n\r\n            //cannot calculate if p = 0. nthroot(0, 0) => 0^(1/0) => undefined\r\n            if(p.equals(0)) {\r\n                throw new UndefinedError('Unable to calculate nthroots of zero');\r\n            }\r\n\r\n            //Stop computation if it negative and even since we have an imaginary result\r\n            if(num < 0 && even(p))\r\n                throw new Error('Cannot calculate nthroot of negative number for even powers');\r\n\r\n            //return non numeric values unevaluated\r\n            if(!num.isConstant(true)) {\r\n                return _.symfunction('nthroot', arguments);\r\n            }\r\n\r\n            //evaluate numeric values\r\n            if(num.group !== N) {\r\n                num = evaluate(num);\r\n            }\r\n\r\n            //default is to return a big value\r\n            if(typeof asbig === 'undefined')\r\n                asbig = true;\r\n\r\n            prec = prec || 25;\r\n\r\n            var sign = num.sign();\r\n            var retval;\r\n            var ans;\r\n\r\n            if(sign < 0) {\r\n                num = abs(num); //remove the sign\r\n            }\r\n\r\n            if(isInt(num) && p.isConstant()) {\r\n\r\n                if(num < 18446744073709551616) {\r\n                    //2^64\r\n                    ans = Frac.create(Math.pow(num, 1 / p));\r\n                }\r\n                else {\r\n                    ans = Math2.nthroot(num, p);\r\n                }\r\n\r\n                var retval;\r\n                if(asbig) {\r\n                    retval = new Symbol(ans);\r\n                }\r\n                retval = new Symbol(ans.toDecimal(prec));\r\n\r\n                return _.multiply(new Symbol(sign), retval);\r\n            }\r\n        }\r\n\r\n        function pfactor(symbol) {\r\n            //Fix issue #458 | nerdamer(\"sqrt(1-(3.3333333550520926e-7)^2)\").evaluate().text()\r\n            //More Big Number issues >:(\r\n            if(symbol.greaterThan(9.999999999998891e+41) || symbol.equals(-1))\r\n                return symbol;\r\n            //Fix issue #298\r\n            if(symbol.equals(Math.PI))\r\n                return new Symbol(Math.PI);\r\n            //evaluate the symbol to merge constants\r\n            symbol = evaluate(symbol.clone());\r\n\r\n            if(symbol.isConstant()) {\r\n                var retval = new Symbol(1);\r\n                var m = symbol.toString();\r\n                if(isInt(m)) {\r\n                    var factors = Math2.ifactor(m);\r\n                    for(var factor in factors) {\r\n                        var p = factors[factor];\r\n                        retval = _.multiply(retval, _.symfunction('parens', [new Symbol(factor).setPower(new Frac(p))]));\r\n                    }\r\n                }\r\n                else {\r\n                    var n = pfactor(new Symbol(symbol.multiplier.num));\r\n                    var d = pfactor(new Symbol(symbol.multiplier.den));\r\n                    retval = _.multiply(_.symfunction('parens', [n]), _.symfunction('parens', [d]).invert());\r\n                }\r\n            }\r\n            else\r\n                retval = _.symfunction('pfactor', arguments);\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * Get's the real part of a complex number. Return number if real\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function realpart(symbol) {\r\n            return symbol.realpart();\r\n        }\r\n\r\n        /**\r\n         * Get's the imaginary part of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function imagpart(symbol) {\r\n            return symbol.imagpart();\r\n        }\r\n\r\n        /**\r\n         * Computes the conjugate of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function conjugate(symbol) {\r\n            var re = symbol.realpart();\r\n            var im = symbol.imagpart();\r\n            return _.add(re, _.multiply(im.negate(), Symbol.imaginary()));\r\n        }\r\n\r\n        /**\r\n         * Returns the arugment of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function arg(symbol) {\r\n            var re = symbol.realpart();\r\n            var im = symbol.imagpart();\r\n            if(re.isConstant() && im.isConstant())\r\n                return new Symbol(Math.atan2(im, re));\r\n            return _.symfunction('atan2', [im, re]);\r\n        }\r\n\r\n        /**\r\n         * Returns the arugment of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function arg(symbol) {\r\n            var re = symbol.realpart();\r\n            var im = symbol.imagpart();\r\n            if(re.isConstant() && im.isConstant()) {\r\n                if(im.equals(0) && re.equals(-1)) {\r\n                    return _.parse('pi');\r\n                }\r\n                else if(im.equals(1) && re.equals(0)) {\r\n                    return _.parse('pi/2');\r\n                }\r\n                else if(im.equals(1) && re.equals(1)) {\r\n                    return _.parse('pi/4');\r\n                }\r\n                return new Symbol(Math.atan2(im, re));\r\n            }\r\n            return _.symfunction('atan2', [im, re]);\r\n        }\r\n\r\n        /**\r\n         * Returns the polarform of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function polarform(symbol) {\r\n            var p, r, e, theta;\r\n            p = Symbol.toPolarFormArray(symbol);\r\n            theta = p[1];\r\n            r = p[0];\r\n            e = _.parse(format('e^({0}*({1}))', Settings.IMAGINARY, theta));\r\n            return _.multiply(r, e);\r\n        }\r\n\r\n        /**\r\n         * Returns the rectangular form of a complex number. Does not work for symbolic coefficients\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function rectform(symbol) {\r\n            //TODO: e^((i*pi)/4)\r\n            var original = symbol.clone();\r\n            try {\r\n                var f, p, q, s, h, d, n;\r\n                f = decompose_fn(symbol, 'e', true);\r\n                p = _.divide(f.x.power, Symbol.imaginary());\r\n                q = evaluate(trig.tan(p));\r\n                s = _.pow(f.a, new Symbol(2));\r\n                d = q.getDenom(true);\r\n                n = q.getNum();\r\n                h = Symbol.hyp(n, d);\r\n                //check\r\n                if(h.equals(f.a)) {\r\n                    return _.add(d, _.multiply(Symbol.imaginary(), n));\r\n                }\r\n                else {\r\n                    return original;\r\n                }\r\n            }\r\n            catch(e) {\r\n                return original;\r\n            }\r\n        }\r\n\r\n        function symMinMax(f, args) {\r\n            args.map(function (x) {\r\n                x.numVal = evaluate(x).multiplier;\r\n            });\r\n            var l, a, b, a_val, b_val;\r\n            while(true) {\r\n                l = args.length;\r\n                if(l < 2)\r\n                    return args[0];\r\n                a = args.pop();\r\n                b = args[l - 2];\r\n                if(f === 'min' ? a.numVal < b.numVal : a.numVal > b.numVal) {\r\n                    args.pop();\r\n                    args.push(a);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns maximum of a set of numbers\r\n         * @returns {Symbol}\r\n         */\r\n        function max() {\r\n            var args = [].slice.call(arguments);\r\n            if(allSame(args))\r\n                return args[0];\r\n            if(allNumbers(args))\r\n                return new Symbol(Math.max.apply(null, args));\r\n            if(Settings.SYMBOLIC_MIN_MAX && allConstants(args))\r\n                return symMinMax('max', args);\r\n            return _.symfunction('max', args);\r\n        }\r\n\r\n        /**\r\n         * Returns minimum of a set of numbers\r\n         * @returns {Symbol}\r\n         */\r\n        function min() {\r\n            var args = [].slice.call(arguments);\r\n            if(allSame(args))\r\n                return args[0];\r\n            if(allNumbers(args))\r\n                return new Symbol(Math.min.apply(null, args));\r\n            if(Settings.SYMBOLIC_MIN_MAX && allConstants(args))\r\n                return symMinMax('min', args);\r\n            return _.symfunction('min', args);\r\n        }\r\n\r\n        /**\r\n         * Returns the sign of a number\r\n         * @param {Symbol} x\r\n         * @returns {Symbol}\r\n         */\r\n        function sign(x) {\r\n            if(x.isConstant(true))\r\n                return new Symbol(Math.sign(evaluate(x)));\r\n            return _.symfunction('sign', arguments);\r\n        }\r\n\r\n        function sort(symbol, opt) {\r\n            opt = opt ? opt.toString() : 'asc';\r\n            var getval = function (e) {\r\n                if(e.group === N)\r\n                    return e.multiplier;\r\n                if(e.group === FN) {\r\n                    if(e.fname === '')\r\n                        return getval(e.args[0]);\r\n                    return e.fname;\r\n                }\r\n                if(e.group === S)\r\n                    return e.power;\r\n\r\n                return e.value;\r\n            };\r\n            var symbols = isVector(symbol) ? symbol.elements : symbol.collectSymbols();\r\n            return new Vector(symbols.sort(function (a, b) {\r\n                var aval = getval(a),\r\n                        bval = getval(b);\r\n                if(opt === 'desc')\r\n                    return bval - aval;\r\n                return aval - bval;\r\n            }));\r\n        }\r\n\r\n        /**\r\n         * The log function\r\n         * @param {Symbol} symbol\r\n         * @param {Symbol} base\r\n         * @returns {Symbol}\r\n         */\r\n        function log(symbol, base) {\r\n\r\n            if(symbol.equals(1)) {\r\n                return new Symbol(0);\r\n            }\r\n\r\n            var retval;\r\n\r\n            if(symbol.fname === SQRT && symbol.multiplier.equals(1)) {\r\n                retval = _.divide(log(symbol.args[0]), new Symbol(2));\r\n\r\n                if(symbol.power.sign() < 0) {\r\n                    retval.negate();\r\n                }\r\n\r\n                // Exit early\r\n                return retval;\r\n            }\r\n\r\n            //log(0) is undefined so complain\r\n            if(symbol.equals(0)) {\r\n                throw new UndefinedError(Settings.LOG + '(0) is undefined!');\r\n            }\r\n\r\n            //deal with imaginary values\r\n            if(symbol.isImaginary()) {\r\n                return complex.evaluate(symbol, Settings.LOG);\r\n            }\r\n\r\n            if(symbol.isConstant() && typeof base !== 'undefined' && base.isConstant()) {\r\n                var log_sym = Math.log(symbol);\r\n                var log_base = Math.log(base);\r\n                retval = new Symbol(log_sym / log_base);\r\n            }\r\n            else if(symbol.group === EX && symbol.power.multiplier.lessThan(0) || symbol.power.toString() === '-1') {\r\n                symbol.power.negate();\r\n                //move the negative outside but keep the positive inside :)\r\n                retval = log(symbol).negate();\r\n            }\r\n            else if(symbol.value === 'e' && symbol.multiplier.equals(1)) {\r\n                var p = symbol.power;\r\n                retval = isSymbol(p) ? p : new Symbol(p);\r\n            }\r\n            else if(symbol.group === FN && symbol.fname === 'exp') {\r\n                var s = symbol.args[0];\r\n                if(symbol.multiplier.equals(1))\r\n                    retval = _.multiply(s, new Symbol(symbol.power));\r\n                else\r\n                    retval = _.symfunction(Settings.LOG, [symbol]);\r\n            }\r\n            else if(Settings.PARSE2NUMBER && isNumericSymbol(symbol)) {\r\n                // Parse for safety.\r\n                symbol = _.parse(symbol);\r\n\r\n                var img_part;\r\n                if(symbol.multiplier.lessThan(0)) {\r\n                    symbol.negate();\r\n                    img_part = _.multiply(new Symbol(Math.PI), new Symbol('i'));\r\n                }\r\n\r\n                retval = new Symbol(Math.log(symbol.multiplier.toDecimal()));\r\n\r\n                if(img_part) {\r\n                    retval = _.add(retval, img_part);\r\n                }\r\n\r\n            }\r\n            else {\r\n                var s;\r\n                if(!symbol.power.equals(1) && !symbol.contains('e')) {\r\n                    s = symbol.group === EX ? symbol.power : new Symbol(symbol.power);\r\n                    symbol.toLinear();\r\n                }\r\n                //log(a,a) = 1 since the base is allowed to be changed.\r\n                //This was pointed out by Happypig375 in issue #280\r\n                if(arguments.length > 1 && allSame(arguments)) {\r\n                    retval = new Symbol(1);\r\n                }\r\n                else {\r\n                    retval = _.symfunction(Settings.LOG, arguments);\r\n                }\r\n\r\n                if(s)\r\n                    retval = _.multiply(s, retval);\r\n            }\r\n\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * Round a number up to s decimal places\r\n         * @param {Number} x\r\n         * @param {int} s - the number of decimal places\r\n         * @returns {undefined}\r\n         */\r\n        function round(x, s) {\r\n            var sIsConstant = s && s.isConstant() || typeof s === 'undefined';\r\n            if(x.isConstant() && sIsConstant) {\r\n                var v, e, exp, retval;\r\n                v = x;\r\n                //round the coefficient of then number but not the actual decimal value\r\n                //we know this because a negative number was passed\r\n                if(s && s.lessThan(0)) {\r\n                    s = abs(s);\r\n                    //convert the number to exponential form\r\n                    e = Number(x).toExponential().toString().split('e');\r\n                    //point v to the coefficient of then number\r\n                    v = e[0];\r\n                    //set the expontent\r\n                    exp = e[1];\r\n                }\r\n                //round the number to the requested precision\r\n                retval = new Symbol(nround(v, Number(s || 0)));\r\n                //if there's a exponent then put it back\r\n                return _.multiply(retval, _.pow(new Symbol(10), new Symbol(exp || 0)))\r\n            }\r\n\r\n\r\n            return _.symfunction('round', arguments);\r\n        }\r\n\r\n        /**\r\n         * Gets the quadrant of the trig function\r\n         * @param {Frac} m\r\n         * @returns {Int}\r\n         */\r\n        function getQuadrant(m) {\r\n            var v = m % 2, quadrant;\r\n\r\n            if(v < 0)\r\n                v = 2 + v; //put it in terms of pi\r\n\r\n            if(v >= 0 && v <= 0.5)\r\n                quadrant = 1;\r\n            else if(v > 0.5 && v <= 1)\r\n                quadrant = 2;\r\n            else if(v > 1 && v <= 1.5)\r\n                quadrant = 3;\r\n            else\r\n                quadrant = 4;\r\n            return quadrant;\r\n        }\r\n\r\n        /*\r\n         * Serves as a bridge between numbers and bigNumbers\r\n         * @param {Frac|Number} n\r\n         * @returns {Symbol}\r\n         */\r\n        function bigConvert(n) {\r\n            if(!isFinite(n)) {\r\n                var sign = Math.sign(n);\r\n                var r = new Symbol(String(Math.abs(n)));\r\n                r.multiplier = r.multiplier.multiply(new Frac(sign));\r\n                return r;\r\n            }\r\n            if(isSymbol(n))\r\n                return n;\r\n            if(typeof n === 'number') {\r\n                try {\r\n                    n = Frac.simple(n);\r\n                }\r\n                catch(e) {\r\n                    n = new Frac(n);\r\n                }\r\n            }\r\n\r\n            var symbol = new Symbol(0);\r\n            symbol.multiplier = n;\r\n            return symbol;\r\n        }\r\n        ;\r\n\r\n        function clean(symbol) {\r\n            // handle functions with numeric values\r\n            // handle denominator within denominator\r\n            // handle trig simplifications\r\n            var g = symbol.group, retval;\r\n            //Now let's get to work\r\n            if(g === CP) {\r\n                var num = symbol.getNum(),\r\n                        den = symbol.getDenom() || new Symbol(1),\r\n                        p = Number(symbol.power),\r\n                        factor = new Symbol(1);\r\n                if(Math.abs(p) === 1) {\r\n                    den.each(function (x) {\r\n                        if(x.group === CB) {\r\n                            factor = _.multiply(factor, clean(x.getDenom()));\r\n                        }\r\n                        else if(x.power.lessThan(0)) {\r\n                            factor = _.multiply(factor, clean(x.clone().toUnitMultiplier()));\r\n                        }\r\n                    });\r\n\r\n                    var new_den = new Symbol(0);\r\n                    //now divide out the factor and add to new den\r\n                    den.each(function (x) {\r\n                        new_den = _.add(_.divide(x, factor.clone()), new_den);\r\n                    });\r\n\r\n                    factor.invert(); //invert so it can be added to the top\r\n                    var new_num;\r\n                    if(num.isComposite()) {\r\n                        new_num = new Symbol(0);\r\n                        num.each(function (x) {\r\n                            new_num = _.add(_.multiply(clean(x), factor.clone()), new_num);\r\n                        });\r\n                    }\r\n                    else\r\n                        new_num = _.multiply(factor, num);\r\n\r\n                    retval = _.divide(new_num, new_den);\r\n                }\r\n            }\r\n            else if(g === CB) {\r\n                retval = new Symbol(1);\r\n                symbol.each(function (x) {\r\n                    retval = _.multiply(retval, _.clean(x));\r\n                });\r\n            }\r\n            else if(g === FN) {\r\n                if(symbol.args.length === 1 && symbol.args[0].isConstant())\r\n                    retval = block('PARSE2NUMBER', function () {\r\n                        return _.parse(symbol);\r\n                    }, true);\r\n            }\r\n\r\n            if(!retval)\r\n                retval = symbol;\r\n\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * A wrapper for the expand function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function expandall(symbol, opt) {\r\n            opt = opt || {\r\n                expand_denominator: true,\r\n                expand_functions: true\r\n            };\r\n            return expand(symbol, opt);\r\n        }\r\n        /**\r\n         * Expands a symbol\r\n         * @param symbol\r\n         */\r\n        // Old expand\r\n        function expand(symbol, opt) {\r\n            if(Array.isArray(symbol)) {\r\n                return symbol.map(function (x) {\r\n                    return expand(x, opt);\r\n                });\r\n            }\r\n            opt = opt || {};\r\n            //deal with parenthesis\r\n            if(symbol.group === FN && symbol.fname === '') {\r\n                var f = expand(symbol.args[0], opt);\r\n                var x = expand(_.pow(f, _.parse(symbol.power)), opt);\r\n                return _.multiply(_.parse(symbol.multiplier), x).distributeMultiplier();\r\n            }\r\n            // We can expand these groups so no need to waste time. Just return and be done.\r\n            if([N, P, S].indexOf(symbol.group) !== -1) {\r\n                return symbol; //nothing to do\r\n            }\r\n\r\n            var original = symbol.clone();\r\n\r\n            // Set up a try-catch block. If anything goes wrong then we simply return the original symbol\r\n            try {\r\n                // Store the power and multiplier\r\n                var m = symbol.multiplier.toString();\r\n                var p = Number(symbol.power);\r\n                var retval = symbol;\r\n\r\n                // Handle (a+b)^2 | (x+x^2)^2\r\n                if(symbol.isComposite() && isInt(symbol.power) && symbol.power > 0) {\r\n                    var n = p - 1;\r\n                    // Strip the expression of it's multiplier and power. We'll call it f. The power will be p and the multiplier m.\r\n                    var f = new Symbol(0);\r\n\r\n                    symbol.each(function (x) {\r\n                        f = _.add(f, expand(_.parse(x), opt));\r\n                    });\r\n\r\n                    var expanded = _.parse(f);\r\n\r\n                    for(var i = 0; i < n; i++) {\r\n                        expanded = mix(expanded, f, opt);\r\n                    }\r\n\r\n                    retval = _.multiply(_.parse(m), expanded).distributeMultiplier();\r\n                }\r\n                else if(symbol.group === FN && opt.expand_functions === true) {\r\n                    var args = [];\r\n                    // Expand function the arguments\r\n                    symbol.args.forEach(function (x) {\r\n                        args.push(expand(x, opt));\r\n                    });\r\n                    // Put back the power and multiplier\r\n                    retval = _.pow(_.symfunction(symbol.fname, args), _.parse(symbol.power));\r\n                    retval = _.multiply(retval, _.parse(symbol.multiplier));\r\n                }\r\n                else if(symbol.isComposite() && isInt(symbol.power) && symbol.power < 0 && opt.expand_denominator === true) {\r\n                    // Invert it. Expand it and then re-invert it.\r\n                    symbol = symbol.invert();\r\n                    retval = expand(symbol, opt);\r\n                    retval.invert();\r\n                }\r\n                else if(symbol.group === CB) {\r\n                    var rank = function (s) {\r\n                        switch(s.group) {\r\n                            case CP:\r\n                                return 0;\r\n                            case PL:\r\n                                return 1;\r\n                            case CB:\r\n                                return 2;\r\n                            case FN:\r\n                                return 3;\r\n                            default:\r\n                                return 4;\r\n                        }\r\n                    };\r\n                    // Consider (a+b)(c+d). The result will be (a*c+a*d)+(b*c+b*d).\r\n                    // We start by moving collecting the symbols. We want others>FN>CB>PL>CP\r\n                    var symbols = symbol.collectSymbols().sort(function (a, b) {\r\n                        return rank(b) - rank(a);\r\n                    })\r\n                            // Distribute the power to each symbol and expand\r\n                            .map(function (s) {\r\n                                var x = _.pow(s, _.parse(p));\r\n                                var e = expand(x, opt);\r\n                                return e;\r\n                            });\r\n\r\n                    var f = symbols.pop();\r\n\r\n                    // If the first symbols isn't a composite then we're done\r\n                    if(f.isComposite() && f.isLinear()) {\r\n                        symbols.forEach(function (s) {\r\n                            f = mix(f, s, opt);\r\n                        });\r\n\r\n                        // If f is of group PL or CP then we can expand some more\r\n                        if(f.isComposite()) {\r\n                            if(f.power > 1) {\r\n                                f = expand(_.pow(f, _.parse(f.power)), opt);\r\n                            }\r\n                            // Put back the multiplier\r\n                            retval = _.multiply(_.parse(m), f).distributeMultiplier();\r\n                            ;\r\n                        }\r\n                        else {\r\n                            // Everything is expanded at this point so if it's still a CB\r\n                            // then just return the symbol\r\n                            retval = f;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // Just multiply back in the expanded form of each\r\n                        retval = f;\r\n                        symbols.forEach(function (s) {\r\n                            retval = _.multiply(retval, s);\r\n                        });\r\n                        // Put back the multiplier\r\n                        retval = _.multiply(retval, _.parse(m)).distributeMultiplier();\r\n                    }\r\n\r\n                    // TODO: This exists solely as a quick fix for sqrt(11)*sqrt(33) not simplifying.\r\n                    if(retval.group === CB) {\r\n                        retval = _.parse(retval);\r\n                    }\r\n                }\r\n                else {\r\n                    // Otherwise just return the expression\r\n                    retval = symbol;\r\n                }\r\n                // Final cleanup and return\r\n                return retval;\r\n            }\r\n            catch(e) {\r\n                return original;\r\n            }\r\n\r\n            return original;\r\n        }\r\n\r\n        /**\r\n         * Returns an identity matrix of nxn\r\n         * @param {Number} n\r\n         * @returns {Matrix}\r\n         */\r\n        function imatrix(n) {\r\n            return Matrix.identity(n);\r\n        }\r\n\r\n        /**\r\n         * Retrieves and item from a vector\r\n         * @param {Vector} vector\r\n         * @param {Number} index\r\n         * @returns {Vector|Symbol}\r\n         */\r\n        function vecget(vector, index) {\r\n            if(index.isConstant() && isInt(index))\r\n                return vector.elements[index];\r\n            return _.symfunction('vecget', arguments);\r\n        }\r\n\r\n        /**\r\n         * Removes duplicates from a vector\r\n         * @param {Vector} vector\r\n         * @param {Number} tolerance\r\n         * @returns {Vector}\r\n         */\r\n        function vectrim(vector, tolerance) {\r\n            tolerance = typeof tolerance === 'undefined' ? 1e-14 : tolerance;\r\n\r\n            vector = vector.clone();\r\n\r\n            tolerance = Number(tolerance);\r\n            //place algebraic solutions first\r\n            vector.elements.sort(function (a, b) {\r\n                return b.group - a.group;\r\n            });\r\n            //depending on the start point we may have duplicates so we need to clean those up a bit.\r\n            //start by creating an object with the solution and the numeric value. This way we don't destroy algebraic values\r\n            vector.elements = removeDuplicates(vector.elements, function (a, b) {\r\n                var diff = Number(_.subtract(evaluate(a), evaluate(b)).abs());\r\n                return diff <= tolerance;\r\n            });\r\n\r\n            return vector;\r\n        }\r\n\r\n        /**\r\n         * Set a value for a vector at a given index\r\n         * @param {Vector} vector\r\n         * @param {Number} index\r\n         * @param {Symbol} value\r\n         * @returns {Vector}\r\n         */\r\n        function vecset(vector, index, value) {\r\n            if(!index.isConstant)\r\n                return _.symfunction('vecset', arguments);\r\n            vector.elements[index] = value;\r\n            return vector;\r\n        }\r\n\r\n        function matget(matrix, i, j) {\r\n            if(i.isConstant() && j.isConstant())\r\n                return matrix.elements[i][j];\r\n            return _.symfunction('matget', arguments);\r\n        }\r\n\r\n        function matgetrow(matrix, i) {\r\n            if(i.isConstant())\r\n                return new Matrix(matrix.elements[i]);\r\n            return _.symfunction('matgetrow', arguments);\r\n        }\r\n\r\n        function matsetrow(matrix, i, x) {\r\n            //handle symbolics\r\n            if(!i.isConstant())\r\n                return _.symfunction('matsetrow', arguments);\r\n            if(matrix.elements[i].length !== x.elements.length)\r\n                throw new DimensionError('Matrix row must match row dimensions!');\r\n            var M = matrix.clone();\r\n            M.elements[i] = x.clone().elements;\r\n            return M;\r\n        }\r\n\r\n        function matgetcol(matrix, col_index) {\r\n            //handle symbolics\r\n            if(!col_index.isConstant())\r\n                return _.symfunction('matgetcol', arguments);\r\n            col_index = Number(col_index);\r\n            var M = Matrix.fromArray([]);\r\n            matrix.each(function (x, i, j) {\r\n                if(j === col_index) {\r\n                    M.elements.push([x.clone()]);\r\n                }\r\n            });\r\n            return M;\r\n        }\r\n\r\n        function matsetcol(matrix, j, col) {\r\n            //handle symbolics\r\n            if(!j.isConstant())\r\n                return _.symfunction('matsetcol', arguments);\r\n            j = Number(j);\r\n            if(matrix.rows() !== col.elements.length)\r\n                throw new DimensionError('Matrix columns must match number of columns!');\r\n            col.each(function (x, i) {\r\n                matrix.set(i - 1, j, x.elements[0].clone());\r\n            });\r\n            return matrix;\r\n        }\r\n\r\n\r\n        function matset(matrix, i, j, value) {\r\n            matrix.elements[i][j] = value;\r\n            return matrix;\r\n        }\r\n\r\n        //the constructor for vectors\r\n        function vector() {\r\n            return new Vector([].slice.call(arguments));\r\n        }\r\n\r\n        //the constructor for matrices\r\n        function matrix() {\r\n            return Matrix.fromArray(arguments);\r\n        }\r\n\r\n        //the constructor for sets\r\n        function set() {\r\n            return Set.fromArray(arguments);\r\n        }\r\n\r\n        function determinant(symbol) {\r\n            if(isMatrix(symbol)) {\r\n                return symbol.determinant();\r\n            }\r\n            return symbol;\r\n        }\r\n\r\n        function size(symbol) {\r\n            var retval;\r\n            if(isMatrix(symbol))\r\n                retval = [new Symbol(symbol.cols()), new Symbol(symbol.rows())];\r\n            else if(isVector(symbol) || isSet(symbol))\r\n                retval = new Symbol(symbol.elements.length);\r\n            else\r\n                err('size expects a matrix or a vector');\r\n            return retval;\r\n        }\r\n\r\n        function dot(vec1, vec2) {\r\n            if(isVector(vec1) && isVector(vec2))\r\n                return vec1.dot(vec2);\r\n            err('function dot expects 2 vectors');\r\n        }\r\n\r\n        function cross(vec1, vec2) {\r\n            if(isVector(vec1) && isVector(vec2))\r\n                return vec1.cross(vec2);\r\n            err('function cross expects 2 vectors');\r\n        }\r\n\r\n        function transpose(mat) {\r\n            if(isMatrix(mat))\r\n                return mat.transpose();\r\n            err('function transpose expects a matrix');\r\n        }\r\n\r\n        function invert(mat) {\r\n            if(isMatrix(mat))\r\n                return mat.invert();\r\n            err('invert expects a matrix');\r\n        }\r\n\r\n        //basic set functions\r\n        function union(set1, set2) {\r\n            return set1.union(set2);\r\n        }\r\n\r\n        function intersection(set1, set2) {\r\n            return set1.intersection(set2);\r\n        }\r\n\r\n        function contains(set1, e) {\r\n            return set1.contains(e);\r\n        }\r\n\r\n        function difference(set1, set2) {\r\n            return set1.difference(set2);\r\n        }\r\n\r\n        function intersects(set1, set2) {\r\n            return new Symbol(Number(set1.intersects(set2)));\r\n        }\r\n\r\n        function is_subset(set1, set2) {\r\n            return new Symbol(Number(set1.is_subset(set2)));\r\n        }\r\n\r\n        function print() {\r\n            arguments2Array(arguments).map(function (x) {\r\n                console.log(x.toString());\r\n            });\r\n        }\r\n\r\n        function testSQRT(symbol) {\r\n            //wrap the symbol in sqrt. This eliminates one more check down the line.\r\n            if(!isSymbol(symbol.power) && symbol.power.absEquals(0.5)) {\r\n                var sign = symbol.power.sign();\r\n                //don't devide the power directly. Notice the use of toString. This makes it possible\r\n                //to use a bigNumber library in the future\r\n                var retval = sqrt(symbol.group === P ? new Symbol(symbol.value) : symbol.toLinear());\r\n                //place back the sign of the power\r\n                if(sign < 0)\r\n                    retval.invert();\r\n                return retval;\r\n            }\r\n            return symbol;\r\n        }\r\n\r\n        //try to reduce a symbol by pulling its power\r\n        function testPow(symbol) {\r\n            if(symbol.group === P) {\r\n                var v = symbol.value;\r\n\r\n                var fct = primeFactors(v)[0];\r\n\r\n                //safety\r\n                if(!fct) {\r\n                    warn('Unable to compute prime factors. This should not happen. Please review and report.');\r\n                    return symbol;\r\n                }\r\n\r\n                var n = new Frac(Math.log(v) / Math.log(fct)),\r\n                        p = n.multiply(symbol.power);\r\n\r\n                //we don't want a more complex number than before\r\n                if(p.den > symbol.power.den)\r\n                    return symbol;\r\n\r\n                if(isInt(p))\r\n                    symbol = Symbol(Math.pow(fct, p));\r\n                else\r\n                    symbol = new Symbol(fct).setPower(p);\r\n            }\r\n\r\n            return symbol;\r\n        }\r\n\r\n        //Link the functions to the parse so they're available outside of the library.\r\n        //This is strictly for convenience and may be deprecated.\r\n        this.expand = expand;\r\n        this.round = round;\r\n        this.clean = clean;\r\n        this.sqrt = sqrt;\r\n        this.cbrt = cbrt;\r\n        this.abs = abs;\r\n        this.log = log;\r\n        this.rationalize = rationalize;\r\n        this.nthroot = nthroot;\r\n        this.arg = arg;\r\n        this.conjugate = conjugate;\r\n        this.imagpart = imagpart;\r\n        this.realpart = realpart;\r\n\r\n        //TODO:\r\n        //Utilize the function below instead of the linked function\r\n        this.getFunction = function (name) {\r\n            return functions[name][0];\r\n        };\r\n\r\n//Parser.methods ===============================================================\r\n        this.addPreprocessor = function (name, action, order, shift_cells) {\r\n            var names = preprocessors.names;\r\n            var actions = preprocessors.actions;\r\n            if((typeof action !== 'function')) //the person probably forgot to specify a name\r\n                throw new PreprocessorError('Incorrect parameters. Function expected!');\r\n            if(!order) {\r\n                names.push(name);\r\n                actions.push(action);\r\n            }\r\n            else {\r\n                if(shift_cells) {\r\n                    names.splice(order, 0, name);\r\n                    actions.splice(order, 0, action);\r\n                }\r\n                else {\r\n                    names[order] = name;\r\n                    actions[order] = action;\r\n                }\r\n            }\r\n        };\r\n\r\n        this.getPreprocessors = function () {\r\n            var preprocessors = {};\r\n            for(var i = 0, l = preprocessors.names.length; i < l; i++) {\r\n                var name = preprocessors.names[i];\r\n                preprocessors[name] = {\r\n                    order: i,\r\n                    action: preprocessors.actions[i]\r\n                };\r\n            }\r\n            return preprocessors;\r\n        };\r\n\r\n        this.removePreprocessor = function (name, shift_cells) {\r\n            var i = preprocessors.names.indexOf(name);\r\n            if(shift_cells) {\r\n                remove(preprocessors.names, i);\r\n                remove(preprocessors.actions, i);\r\n            }\r\n            else {\r\n                preprocessors.names[i] = undefined;\r\n                preprocessors.actions[i] = undefined;\r\n            }\r\n        };\r\n\r\n        //The loader for functions which are not part of Math2\r\n        this.mapped_function = function () {\r\n            var subs = {},\r\n                    params = this.params;\r\n\r\n            for(var i = 0; i < params.length; i++) {\r\n                subs[params[i]] = String(arguments[i]);\r\n            }\r\n\r\n            return _.parse(this.body, subs);\r\n        };\r\n        /**\r\n         * Adds two symbols\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.add = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n            //we're dealing with two symbols\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //forward the adding of symbols with units to the Unit module\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.add(a, b);\r\n                }\r\n                //handle Infinity\r\n                //https://www.encyclopediaofmath.org/index.php/Infinity\r\n                if(a.isInfinity || b.isInfinity) {\r\n                    var aneg = a.multiplier.lessThan(0),\r\n                            bneg = b.multiplier.lessThan(0);\r\n\r\n                    if(a.isInfinity && b.isInfinity && aneg !== bneg) {\r\n                        throw new UndefinedError('(' + a + ')+(' + b + ') is not defined!');\r\n                    }\r\n\r\n                    var inf = Symbol.infinity();\r\n                    if(bneg)\r\n                        inf.negate();\r\n                    return inf;\r\n                }\r\n\r\n                if(a.isComposite() && a.isLinear() && b.isComposite() && b.isLinear()) {\r\n                    a.distributeMultiplier();\r\n                    b.distributeMultiplier();\r\n                    // Fix for issue #606\r\n                    if(b.length > a.length && a.group === b.group) {\r\n                        [a, b] = [b, a];\r\n                    }\r\n                }\r\n                \r\n                //no need to waste time on zeroes\r\n                if(a.multiplier.equals(0))\r\n                    return b;\r\n                if(b.multiplier.equals(0))\r\n                    return a;\r\n\r\n                if(a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\r\n                    var result = new Symbol(a.multiplier.add(b.multiplier).toDecimal(Settings.PRECISION));\r\n                    return result;\r\n                }\r\n\r\n                var g1 = a.group,\r\n                        g2 = b.group,\r\n                        ap = a.power.toString(),\r\n                        bp = b.power.toString();\r\n\r\n                //always keep the greater group on the left.\r\n                if(g1 < g2 || (g1 === g2 && ap > bp && bp > 0)) {\r\n                    return this.add(b, a);\r\n                }\r\n\r\n                /*note to self: Please don't forget about this dilemma ever again. In this model PL and CB goes crazy\r\n                 * because it doesn't know which one to prioritize. */\r\n                //correction to PL dilemma\r\n                if(g1 === CB && g2 === PL && a.value === b.value) {\r\n                    //swap\r\n                    var t = a;\r\n                    a = b;\r\n                    b = t;\r\n                    g1 = a.group;\r\n                    g2 = b.group;\r\n                    ap = a.power.toString();\r\n                    bp = b.power.toString();\r\n                }\r\n\r\n                var powEQ = ap === bp,\r\n                        v1 = a.value,\r\n                        v2 = b.value,\r\n                        aIsComposite = a.isComposite(),\r\n                        bIsComposite = b.isComposite(),\r\n                        h1, h2, result;\r\n\r\n                if(aIsComposite)\r\n                    h1 = text(a, 'hash');\r\n                if(bIsComposite)\r\n                    h2 = text(b, 'hash');\r\n\r\n                if(g1 === CP && g2 === CP && b.isLinear() && !a.isLinear() && h1 !== h2) {\r\n                    return this.add(b, a);\r\n                }\r\n\r\n                //PL & PL should compare hashes and not values e.g. compare x+x^2 with x+x^3 and not x with x\r\n                if(g1 === PL && g2 === PL) {\r\n                    v1 = h1;\r\n                    v2 = h2;\r\n                }\r\n\r\n                var PN = g1 === P && g2 === N,\r\n                        PNEQ = a.value === b.multiplier.toString(),\r\n                        valEQ = (v1 === v2 || h1 === h2 && h1 !== undefined || (PN && PNEQ));\r\n\r\n                //equal values, equal powers\r\n                if(valEQ && powEQ && g1 === g2) {\r\n                    //make sure to convert N to something P can work with\r\n                    if(PN)\r\n                        b = b.convert(P);//CL\r\n\r\n                    //handle PL\r\n                    if(g1 === PL && (g2 === S || g2 === P)) {\r\n                        a.distributeMultiplier();\r\n                        result = a.attach(b);\r\n                    }\r\n                    else {\r\n                        result = a;//CL\r\n                        if(a.multiplier.isOne() && b.multiplier.isOne() && g1 === CP && a.isLinear() && b.isLinear()) {\r\n                            for(var s in b.symbols) {\r\n                                var x = b.symbols[s];\r\n                                result.attach(x);\r\n                            }\r\n                        }\r\n                        else\r\n                            result.multiplier = result.multiplier.add(b.multiplier);\r\n                    }\r\n                }\r\n                //equal values uneven powers\r\n                else if(valEQ && g1 !== PL) {\r\n                    //break the tie for e.g. (x+1)+((x+1)^2+(x+1)^3)\r\n                    if(g1 === CP && g2 === PL) {\r\n                        b.insert(a, 'add');\r\n                        result = b;\r\n                    }\r\n                    else {\r\n                        result = Symbol.shell(PL).attach([a, b]);\r\n                        //update the hash\r\n                        result.value = g1 === PL ? h1 : v1;\r\n                    }\r\n                }\r\n                else if(aIsComposite && a.isLinear()) {\r\n                    var canIterate = g1 === g2,\r\n                            bothPL = g1 === PL && g2 === PL;\r\n\r\n                    //we can only iterate group PL if they values match\r\n                    if(bothPL)\r\n                        canIterate = a.value === b.value;\r\n                    //distribute the multiplier over the entire symbol\r\n                    a.distributeMultiplier();\r\n\r\n                    if(b.isComposite() && b.isLinear() && canIterate) {\r\n                        b.distributeMultiplier();\r\n                        //CL\r\n                        for(var s in b.symbols) {\r\n                            var x = b.symbols[s];\r\n                            a.attach(x);\r\n                        }\r\n                        result = a;\r\n                    }\r\n                    //handle cases like 2*(x+x^2)^2+2*(x+x^2)^3+4*(x+x^2)^2\r\n                    else if(bothPL && a.value !== h2 || g1 === PL && !valEQ) {\r\n                        result = Symbol.shell(CP).attach([a, b]);\r\n                        result.updateHash();\r\n\r\n                    }\r\n                    else {\r\n                        result = a.attach(b);\r\n                    }\r\n                }\r\n                else {\r\n                    if(g1 === FN && a.fname === SQRT && g2 !== EX && b.power.equals(0.5)) {\r\n                        var m = b.multiplier.clone();\r\n                        b = sqrt(b.toUnitMultiplier().toLinear());\r\n                        b.multiplier = m;\r\n                    }\r\n                    //fix for issue #3 and #159\r\n                    if(a.length === 2 && b.length === 2 && even(a.power) && even(b.power)) {\r\n                        result = _.add(expand(a), expand(b));\r\n                    }\r\n                    else {\r\n                        result = Symbol.shell(CP).attach([a, b]);\r\n                        result.updateHash();\r\n                    }\r\n                }\r\n\r\n                if(result.multiplier.equals(0))\r\n                    result = new Symbol(0);\r\n\r\n                //make sure to remove unnecessary wraps\r\n                if(result.length === 1) {\r\n                    var m = result.multiplier;\r\n                    result = firstObject(result.symbols);\r\n                    result.multiplier = result.multiplier.multiply(m);\r\n                }\r\n\r\n                return result;\r\n            }\r\n            else {\r\n                //keep symbols to the right\r\n                if(bIsSymbol && !aIsSymbol) {\r\n                    var t = a;\r\n                    a = b;\r\n                    b = t; //swap\r\n                    t = bIsSymbol;\r\n                    bIsSymbol = aIsSymbol;\r\n                    aIsSymbol = t;\r\n                }\r\n\r\n                var bIsMatrix = isMatrix(b);\r\n\r\n                if(aIsSymbol && bIsMatrix) {\r\n                    var M = new Matrix();\r\n                    b.eachElement(function (e, i, j) {\r\n                        M.set(i, j, _.add(a.clone(), e));\r\n                    });\r\n\r\n                    b = M\r\n                }\r\n                else {\r\n                    if(isMatrix(a) && bIsMatrix) {\r\n                        b = a.add(b);\r\n                    }\r\n                    else if(aIsSymbol && isVector(b)) {\r\n                        b.each(function (x, i) {\r\n                            i--;\r\n                            b.elements[i] = _.add(a.clone(), b.elements[i]);\r\n                        });\r\n                    }\r\n                    else {\r\n                        if(isVector(a) && isVector(b)) {\r\n                            b.each(function (x, i) {\r\n                                i--;\r\n                                b.elements[i] = _.add(a.elements[i], b.elements[i]);\r\n                            });\r\n                        }\r\n                        else if(isVector(a) && isMatrix(b)) {\r\n                            //try to convert a to a matrix\r\n                            return _.add(b, a);\r\n                        }\r\n                        else if(isMatrix(a) && isVector(b)) {\r\n                            if(b.elements.length === a.rows()) {\r\n                                var M = new Matrix(), l = a.cols();\r\n                                b.each(function (e, i) {\r\n                                    var row = [];\r\n                                    for(var j = 0; j < l; j++) {\r\n                                        row.push(_.add(a.elements[i - 1][j].clone(), e.clone()));\r\n                                    }\r\n                                    M.elements.push(row);\r\n                                });\r\n                                return M;\r\n                            }\r\n                            else\r\n                                err('Dimensions must match!');\r\n                        }\r\n                    }\r\n                }\r\n                return b;\r\n            }\r\n\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the - operator. Not the prefix operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.subtract = function (a, b) {\r\n            var aIsSymbol = aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b), t;\r\n\r\n            if(aIsSymbol && bIsSymbol) {\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.subtract(a, b);\r\n                }\r\n                return this.add(a, b.negate());\r\n            }\r\n            else {\r\n                if(bIsSymbol && isVector(a)) {\r\n                    b = a.map(function (x) {\r\n                        return _.subtract(x, b.clone());\r\n                    });\r\n                }\r\n                else if(aIsSymbol && isVector(b)) {\r\n                    b = b.map(function (x) {\r\n                        return _.subtract(a.clone(), x);\r\n                    });\r\n                }\r\n                else if(isVector(a) && isVector(b)) {\r\n                    if(a.dimensions() === b.dimensions())\r\n                        b = a.subtract(b);\r\n                    else\r\n                        _.error('Unable to subtract vectors. Dimensions do not match.');\r\n                }\r\n                else if(isMatrix(a) && isVector(b)) {\r\n                    if(b.elements.length === a.rows()) {\r\n                        var M = new Matrix(), l = a.cols();\r\n                        b.each(function (e, i) {\r\n                            var row = [];\r\n                            for(var j = 0; j < l; j++) {\r\n                                row.push(_.subtract(a.elements[i - 1][j].clone(), e.clone()));\r\n                            }\r\n                            M.elements.push(row);\r\n                        });\r\n                        return M;\r\n                    }\r\n                    else\r\n                        err('Dimensions must match!');\r\n                }\r\n                else if(isVector(a) && isMatrix(b)) {\r\n                    var M = b.clone().negate();\r\n                    return _.add(M, a);\r\n                }\r\n                else if(isMatrix(a) && isMatrix(b)) {\r\n                    b = a.subtract(b);\r\n                }\r\n                else if(isMatrix(a) && bIsSymbol) {\r\n                    var M = new Matrix();\r\n                    a.each(function (x, i, j) {\r\n                        M.set(i, j, _.subtract(x, b.clone()));\r\n                    });\r\n                    b = M;\r\n                }\r\n                else if(aIsSymbol && isMatrix(b)) {\r\n                    var M = new Matrix();\r\n                    b.each(function (x, i, j) {\r\n                        M.set(i, j, _.subtract(a.clone(), x));\r\n                    });\r\n                    b = M;\r\n                }\r\n                return b;\r\n            }\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the * operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.multiply = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n            //we're dealing with function assignment here\r\n            if(aIsSymbol && b instanceof Collection) {\r\n                b.elements.push(a);\r\n                return b;\r\n            }\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //if it has a unit then add it and return it right away.\r\n                if(b.isUnit) {\r\n                    var result = a.clone();\r\n                    a.unit = b;\r\n                    return result;\r\n                }\r\n                \r\n                //if it has units then just forward that problem to the unit module\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.multiply(a, b);\r\n                }\r\n\r\n                //handle Infinty\r\n                if(a.isInfinity || b.isInfinity) {\r\n                    if(a.equals(0) || b.equals(0))\r\n                        throw new UndefinedError(a + '*' + b + ' is undefined!');\r\n                    //x/infinity\r\n                    if(b.power.lessThan(0)) {\r\n                        if(!a.isInfinity) {\r\n                            return new Symbol(0);\r\n                        }\r\n                        else {\r\n                            throw new UndefinedError('Infinity/Infinity is not defined!');\r\n                        }\r\n                    }\r\n\r\n                    var sign = a.multiplier.multiply(b.multiplier).sign(),\r\n                            inf = Symbol.infinity();\r\n                    if(a.isConstant() || b.isConstant() || (a.isInfinity && b.isInfinity)) {\r\n                        if(sign < 0)\r\n                            inf.negate();\r\n\r\n                        return inf;\r\n                    }\r\n                }\r\n                //the quickies\r\n                if(a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\r\n                    var t = new bigDec(a.multiplier.toDecimal()).times(new bigDec(b.multiplier.toDecimal())).toFixed();\r\n                    var retval = new Symbol(t);\r\n                    return retval;\r\n                }\r\n\r\n                //don't waste time\r\n                if(a.isOne()) {\r\n                    return b.clone();\r\n                }\r\n                if(b.isOne()) {\r\n                    return a.clone();\r\n                }\r\n\r\n                if(a.multiplier.equals(0) || b.multiplier.equals(0))\r\n                    return new Symbol(0);\r\n\r\n                if(b.group > a.group && !(b.group === CP))\r\n                    return this.multiply(b, a);\r\n                //correction for PL/CB dilemma\r\n                if(a.group === CB && b.group === PL && a.value === b.value) {\r\n                    var t = a;\r\n                    a = b;\r\n                    b = t;//swap\r\n                }\r\n\r\n                var g1 = a.group,\r\n                        g2 = b.group,\r\n                        bnum = b.multiplier.num,\r\n                        bden = b.multiplier.den;\r\n\r\n                if(g1 === FN && a.fname === SQRT && !b.isConstant() && a.args[0].value === b.value && !a.args[0].multiplier.lessThan(0)) {\r\n                    //unwrap sqrt\r\n                    var a_pow = a.power;\r\n                    var a_multiplier = _.parse(a.multiplier);\r\n                    a = _.multiply(a_multiplier, a.args[0].clone());\r\n                    a.setPower(new Frac(0.5).multiply(a_pow));\r\n                    g1 = a.group;\r\n                }\r\n                //simplify n/sqrt(n). Being very specific\r\n                else if(g1 === FN && a.fname === SQRT && a.multiplier.equals(1) && a.power.equals(-1) && b.isConstant() && a.args[0].equals(b)) {\r\n                    a = _.symfunction(SQRT, [b.clone()]);\r\n                    b = new Symbol(1);\r\n                }\r\n                ;\r\n\r\n                var v1 = a.value,\r\n                        v2 = b.value,\r\n                        sign = new Frac(a.sign()),\r\n                        //since P is just a morphed version of N we need to see if they relate\r\n                        ONN = (g1 === P && g2 === N && b.multiplier.equals(a.value)),\r\n                        //don't multiply the multiplier of b since that's equal to the value of a\r\n                        m = ONN ? new Frac(1).multiply(a.multiplier).abs() : a.multiplier.multiply(b.multiplier).abs(),\r\n                        result = a.clone().toUnitMultiplier();\r\n                b = b.clone().toUnitMultiplier(true);\r\n\r\n                //further simplification of sqrt\r\n                if(g1 === FN && g2 === FN) {\r\n                    var u = a.args[0].clone();\r\n                    var v = b.args[0].clone();\r\n                    if(a.fname === SQRT && b.fname === SQRT && a.isLinear() && b.isLinear()) {\r\n\r\n                        var q = _.divide(u, v).invert();\r\n                        if(q.gt(1) && isInt(q)) {\r\n                            //b contains a factor a which can be moved to a\r\n                            result = _.multiply(a.args[0].clone(), sqrt(q.clone()));\r\n                            b = new Symbol(1);\r\n                        }\r\n                    }\r\n                    //simplify factorial but only if\r\n                    //1 - It's division so b will have a negative power\r\n                    //2 - We're not dealing with factorials of numbers\r\n                    else if(a.fname === FACTORIAL && b.fname === FACTORIAL && !u.isConstant() && !v.isConstant() && b.power < 0) {\r\n                        //assume that n = positive\r\n                        var d = _.subtract(u.clone(), v.clone());\r\n\r\n                        //if it's not numeric then we don't know if we can simplify so just return\r\n                        if(d.isConstant()) {\r\n\r\n                            //there will never be a case where d == 0 since this will already have\r\n                            //been handled at the beginning of this function\r\n                            t = new Symbol(1);\r\n                            if(d < 0) {\r\n                                //If d is negative then the numerator is larger so expand that\r\n                                for(var i = 0, n = Math.abs(d); i <= n; i++) {\r\n                                    var s = _.add(u.clone(), new Symbol(i));\r\n                                    t = _.multiply(t, s);\r\n                                }\r\n\r\n                                result = _.multiply(_.pow(u, new Symbol(a.power)), _.pow(t, new Symbol(b.power)));\r\n\r\n                                b = new Symbol(1);\r\n                            }\r\n                            else {\r\n                                //Otherwise the denominator is larger so expand that\r\n                                for(var i = 0, n = Math.abs(d); i <= n; i++) {\r\n                                    var s = _.add(v.clone(), new Symbol(i));\r\n                                    t = _.multiply(t, s);\r\n                                }\r\n\r\n                                result = _.multiply(_.pow(t, new Symbol(a.power)), _.pow(v, new Symbol(b.power)));\r\n\r\n                                b = new Symbol(1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n                //if both are PL then their hashes have to match\r\n                if(v1 === v2 && g1 === PL && g1 === g2) {\r\n                    v1 = a.text('hash');\r\n                    v2 = b.text('hash');\r\n                }\r\n\r\n                //same issue with (x^2+1)^x*(x^2+1)\r\n                //EX needs an exception when multiplying because it needs to recognize\r\n                //that (x+x^2)^x has the same hash as (x+x^2). The latter is kept as x\r\n                if(g2 === EX && b.previousGroup === PL && g1 === PL) {\r\n                    v1 = text(a, 'hash', EX);\r\n                }\r\n\r\n                if((v1 === v2 || ONN) && !(g1 === PL && (g2 === S || g2 === P || g2 === FN)) && !(g1 === PL && g2 === CB)) {\r\n                    var p1 = a.power,\r\n                            p2 = b.power,\r\n                            isSymbolP1 = isSymbol(p1),\r\n                            isSymbolP2 = isSymbol(p2),\r\n                            toEX = (isSymbolP1 || isSymbolP2);\r\n                    //TODO: this needs cleaning up\r\n                    if(g1 === PL && g2 !== PL && b.previousGroup !== PL && p1.equals(1)) {\r\n                        result = new Symbol(0);\r\n                        a.each(function (x) {\r\n                            result = _.add(result, _.multiply(x, b.clone()));\r\n                        }, true);\r\n                    }\r\n                    else {\r\n                        //add the powers\r\n                        result.power = toEX ? _.add(\r\n                                !(isSymbol(p1)) ? new Symbol(p1) : p1,\r\n                                !(isSymbol(p2)) ? new Symbol(p2) : p2\r\n                                ) : (g1 === N /*don't add powers for N*/ ? p1 : p1.add(p2));\r\n\r\n                        //eliminate zero power values and convert them to numbers\r\n                        if(result.power.equals(0))\r\n                            result = result.convert(N);\r\n\r\n                        //properly convert to EX\r\n                        if(toEX)\r\n                            result.convert(EX);\r\n\r\n                        //take care of imaginaries\r\n                        if(a.imaginary && b.imaginary) {\r\n                            var isEven = even(result.power % 2);\r\n                            if(isEven) {\r\n                                result = new Symbol(1);\r\n                                m.negate();\r\n                            }\r\n                        }\r\n\r\n                        //cleanup: this causes the LaTeX generator to get confused as to how to render the symbol\r\n                        if(result.group !== EX && result.previousGroup)\r\n                            result.previousGroup = undefined;\r\n                        //the sign for b is floating around. Remember we are assuming that the odd variable will carry\r\n                        //the sign but this isn't true if they're equals symbols\r\n                        result.multiplier = result.multiplier.multiply(b.multiplier);\r\n                    }\r\n                }\r\n                else if(g1 === CB && a.isLinear()) {\r\n                    if(g2 === CB)\r\n                        b.distributeExponent();\r\n                    if(g2 === CB && b.isLinear()) {\r\n                        for(var s in b.symbols) {\r\n                            var x = b.symbols[s];\r\n                            result = result.combine(x);\r\n                        }\r\n                        result.multiplier = result.multiplier.multiply(b.multiplier);\r\n                    }\r\n                    else {\r\n                        result.combine(b);\r\n                    }\r\n                }\r\n                else {\r\n                    //the multiplier was already handled so nothing left to do\r\n                    if(g1 !== N) {\r\n                        if(g1 === CB) {\r\n                            result.distributeExponent();\r\n                            result.combine(b);\r\n                        }\r\n                        else if(!b.isOne()) {\r\n                            var bm = b.multiplier.clone();\r\n                            b.toUnitMultiplier();\r\n                            result = Symbol.shell(CB).combine([result, b]);\r\n                            //transfer the multiplier to the outside\r\n                            result.multiplier = result.multiplier.multiply(bm);\r\n                        }\r\n                    }\r\n                    else {\r\n                        result = b.clone().toUnitMultiplier();\r\n                    }\r\n                }\r\n\r\n                if(result.group === P) {\r\n                    var logV = Math.log(result.value),\r\n                            n1 = Math.log(bnum) / logV,\r\n                            n2 = Math.log(bden) / logV,\r\n                            ndiv = m.num / bnum,\r\n                            ddiv = m.den / bden;\r\n                    //we don't want to divide by zero no do we? Strange things happen.\r\n                    if(n1 !== 0 && isInt(n1) && isInt(ndiv)) {\r\n                        result.power = result.power.add(new Frac(n1));\r\n                        m.num /= bnum; //BigInt? Keep that in mind for the future.\r\n                    }\r\n                    if(n2 !== 0 && isInt(n2) && isInt(ddiv)) {\r\n                        result.power = result.power.subtract(new Frac(n2));\r\n                        m.den /= bden; //BigInt? Keep that in mind for the future.\r\n                    }\r\n                }\r\n\r\n                //unpack CB if length is only one\r\n                if(result.length === 1) {\r\n                    var t = result.multiplier;\r\n                    //transfer the multiplier\r\n                    result = firstObject(result.symbols);\r\n                    result.multiplier = result.multiplier.multiply(t);\r\n                }\r\n\r\n                //reduce square root\r\n                var ps = result.power.toString();\r\n                if(even(ps) && result.fname === SQRT) {\r\n                    //grab the sign of the symbol\r\n                    sign = sign * result.sign();\r\n                    var p = result.power;\r\n                    result = result.args[0];\r\n                    result = _.multiply(new Symbol(m), _.pow(result, new Symbol(p.divide(new Frac(2)))));\r\n                    //flip it back to the correct sign\r\n                    if(sign < 0)\r\n                        result.negate()\r\n                }\r\n                else {\r\n                    result.multiplier = result.multiplier.multiply(m).multiply(sign);\r\n                    if(result.group === CP && result.isImaginary())\r\n                        result.distributeMultiplier();\r\n                }\r\n\r\n                //back convert group P to a simpler group N if possible\r\n                if(result.group === P && isInt(result.power.toDecimal()))\r\n                    result = result.convert(N);\r\n\r\n                return result;\r\n            }\r\n            else {\r\n                //****** Matrices & Vector *****//\r\n                if(bIsSymbol && !aIsSymbol) { //keep symbols to the right\r\n                    t = a;\r\n                    a = b;\r\n                    b = t; //swap\r\n                    t = bIsSymbol;\r\n                    bIsSymbol = aIsSymbol;\r\n                    aIsSymbol = t;\r\n                }\r\n\r\n                var isMatrixB = isMatrix(b), isMatrixA = isMatrix(a);\r\n                if(aIsSymbol && isMatrixB) {\r\n                    var M = new Matrix();\r\n                    b.eachElement(function (e, i, j) {\r\n                        M.set(i, j, _.multiply(a.clone(), e));\r\n                    });\r\n\r\n                    b = M;\r\n                }\r\n                else {\r\n                    if(isMatrixA && isMatrixB) {\r\n                        b = a.multiply(b);\r\n                    }\r\n                    else if(aIsSymbol && isVector(b)) {\r\n                        b.each(function (x, i) {\r\n                            i--;\r\n                            b.elements[i] = _.multiply(a.clone(), b.elements[i]);\r\n                        });\r\n                    }\r\n                    else {\r\n                        if(isVector(a) && isVector(b)) {\r\n                            b.each(function (x, i) {\r\n                                i--;\r\n                                b.elements[i] = _.multiply(a.elements[i], b.elements[i]);\r\n                            });\r\n                        }\r\n                        else if(isVector(a) && isMatrix(b)) {\r\n                            //try to convert a to a matrix\r\n                            return this.multiply(b, a);\r\n                        }\r\n                        else if(isMatrix(a) && isVector(b)) {\r\n                            if(b.elements.length === a.rows()) {\r\n                                var M = new Matrix(), l = a.cols();\r\n                                b.each(function (e, i) {\r\n                                    var row = [];\r\n                                    for(var j = 0; j < l; j++) {\r\n                                        row.push(_.multiply(a.elements[i - 1][j].clone(), e.clone()));\r\n                                    }\r\n                                    M.elements.push(row);\r\n                                });\r\n                                return M;\r\n                            }\r\n                            else\r\n                                err('Dimensions must match!');\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return b;\r\n            }\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the / operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.divide = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //forward to Unit division\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.divide(a, b);\r\n                }\r\n                var result;\r\n                if(b.equals(0))\r\n                    throw new DivisionByZero('Division by zero not allowed!');\r\n\r\n                if(a.isConstant() && b.isConstant()) {\r\n                    result = a.clone();\r\n                    result.multiplier = result.multiplier.divide(b.multiplier);\r\n                }\r\n                else {\r\n                    b.invert();\r\n                    result = _.multiply(a, b);\r\n                }\r\n                return result;\r\n            }\r\n            else {\r\n                //******* Vectors & Matrices *********//\r\n                var isVectorA = isVector(a), isVectorB = isVector(b);\r\n                if(aIsSymbol && isVectorB) {\r\n                    b = b.map(function (x) {\r\n                        return _.divide(a.clone(), x);\r\n                    });\r\n                }\r\n                else if(isVectorA && bIsSymbol) {\r\n                    b = a.map(function (x) {\r\n                        return _.divide(x, b.clone());\r\n                    });\r\n                }\r\n                else if(isVectorA && isVectorB) {\r\n                    if(a.dimensions() === b.dimensions()) {\r\n                        b = b.map(function (x, i) {\r\n                            return _.divide(a.elements[--i], x);\r\n                        });\r\n                    }\r\n                    else\r\n                        _.error('Cannot divide vectors. Dimensions do not match!');\r\n                }\r\n                else {\r\n                    var isMatrixA = isMatrix(a), isMatrixB = isMatrix(b);\r\n                    if(isMatrixA && bIsSymbol) {\r\n                        var M = new Matrix();\r\n                        a.eachElement(function (x, i, j) {\r\n                            M.set(i, j, _.divide(x, b.clone()));\r\n                        });\r\n                        b = M;\r\n                    }\r\n                    else if(aIsSymbol && isMatrixB) {\r\n                        var M = new Matrix();\r\n                        b.eachElement(function (x, i, j) {\r\n                            M.set(i, j, _.divide(a.clone(), x));\r\n                        });\r\n                        b = M;\r\n                    }\r\n                    else if(isMatrixA && isMatrixB) {\r\n                        var M = new Matrix();\r\n                        if(a.rows() === b.rows() && a.cols() === b.cols()) {\r\n                            a.eachElement(function (x, i, j) {\r\n                                M.set(i, j, _.divide(x, b.elements[i][j]));\r\n                            });\r\n                            b = M;\r\n                        }\r\n                        else {\r\n                            _.error('Dimensions do not match!');\r\n                        }\r\n                    }\r\n                    else if(isMatrixA && isVectorB) {\r\n                        if(a.cols() === b.dimensions()) {\r\n                            var M = new Matrix();\r\n                            a.eachElement(function (x, i, j) {\r\n                                M.set(i, j, _.divide(x, b.elements[i].clone()));\r\n                            });\r\n                            b = M;\r\n                        }\r\n                        else {\r\n                            _.error('Unable to divide matrix by vector.');\r\n                        }\r\n                    }\r\n                }\r\n                return b;\r\n            }\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the ^ operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.pow = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //it has units then it's the Unit module's problem\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.pow(a, b);\r\n                }\r\n                \r\n                // Handle abs\r\n                if(a.group === FN && a.fname === ABS && even(b)) {\r\n                    var m = a.multiplier.clone();\r\n                    var raised = _.pow(a.args[0], b);\r\n                    raised.multiplier = m;\r\n                    return raised;\r\n                }\r\n                \r\n                // Handle infinity\r\n                if(a.isInfinity || b.isInfinity) {\r\n                    if(a.isInfinity && b.isInfinity)\r\n                        throw new UndefinedError('(' + a + ')^(' + b + ') is undefined!');\r\n\r\n                    if(a.isConstant() && b.isInfinity) {\r\n                        if(a.equals(0)) {\r\n                            if(b.lessThan(0))\r\n                                throw new UndefinedError('0^Infinity is undefined!');\r\n                            return new Symbol(0);\r\n                        }\r\n                        if(a.equals(1))\r\n                            throw new UndefinedError('1^' + b.toString() + ' is undefined!');\r\n                        //a^-oo\r\n                        if(b.lessThan(0))\r\n                            return new Symbol(0);\r\n                        //a^oo\r\n                        if(!a.lessThan(0))\r\n                            return Symbol.infinity();\r\n                    }\r\n\r\n                    if(a.isInfinity && b.isConstant()) {\r\n                        if(b.equals(0))\r\n                            throw new UndefinedError(a + '^0 is undefined!');\r\n                        if(b.lessThan(0))\r\n                            return new Symbol(0);\r\n                        return _.multiply(Symbol.infinity(), _.pow(new Symbol(a.sign()), b.clone()));\r\n                    }\r\n                }\r\n\r\n                var aIsZero = a.equals(0);\r\n                var bIsZero = b.equals(0);\r\n                if(aIsZero && bIsZero)\r\n                    throw new UndefinedError('0^0 is undefined!');\r\n\r\n                // Return 0 right away if possible\r\n                if(aIsZero && b.isConstant() && b.multiplier.greaterThan(0))\r\n                    return new Symbol(0);\r\n\r\n                if(bIsZero)\r\n                    return new Symbol(1);\r\n\r\n                var bIsConstant = b.isConstant(),\r\n                        aIsConstant = a.isConstant(),\r\n                        bIsInt = b.isInteger(),\r\n                        m = a.multiplier,\r\n                        result = a.clone();\r\n\r\n                // 0^0, 1/0, etc. Complain.\r\n                if(aIsConstant && bIsConstant && a.equals(0) && b.lessThan(0))\r\n                    throw new UndefinedError('Division by zero is not allowed!');\r\n\r\n                // Compute imaginary numbers right away\r\n                if(Settings.PARSE2NUMBER && aIsConstant && bIsConstant && a.sign() < 0 && evenFraction(b)) {\r\n                    var k, re, im;\r\n                    k = Math.PI * b;\r\n                    re = new Symbol(Math.cos(k));\r\n                    im = _.multiply(Symbol.imaginary(), new Symbol(Math.sin(k)));\r\n                    return _.add(re, im);\r\n                }\r\n\r\n                // Imaginary number under negative nthroot or to the n\r\n                if(Settings.PARSE2NUMBER && a.isImaginary() && bIsConstant && isInt(b) && !b.lessThan(0)) {\r\n                    var re, im, r, theta, nre, nim, phi;\r\n                    re = a.realpart();\r\n                    im = a.imagpart();\r\n                    if(re.isConstant('all') && im.isConstant('all')) {\r\n                        phi = Settings.USE_BIG ? Symbol(bigDec.atan2(i.multiplier.toDecimal(), r.multiplier.toDecimal()).times(b.toString())) : Math.atan2(im, re) * b;\r\n                        theta = new Symbol(phi);\r\n                        r = _.pow(Symbol.hyp(re, im), b);\r\n                        nre = _.multiply(r.clone(), _.trig.cos(theta.clone()));\r\n                        nim = _.multiply(r, _.trig.sin(theta));\r\n                        return _.add(nre, _.multiply(Symbol.imaginary(), nim));\r\n                    }\r\n                }\r\n\r\n                // Take care of the symbolic part\r\n                result.toUnitMultiplier();\r\n                //simpifly sqrt\r\n                if(result.group === FN && result.fname === SQRT && !bIsConstant) {\r\n                    var s = result.args[0];\r\n                    s.multiplyPower(new Symbol(0.5));\r\n                    s.multiplier.multiply(result.multiplier);\r\n                    s.multiplyPower(b);\r\n                    result = s;\r\n                }\r\n                else {\r\n                    var sign = m.sign();\r\n                    //handle cases such as (-a^3)^(1/4)\r\n                    if(evenFraction(b) && sign < 0) {\r\n                        // Swaperoo\r\n                        // First put the sign back on the symbol\r\n                        result.negate();\r\n                        // Wrap it in brackets\r\n                        result = _.symfunction(PARENTHESIS, [result]);\r\n                        // Move the sign back the exterior and let nerdamer handle the rest\r\n                        result.negate();\r\n                    }\r\n\r\n                    result.multiplyPower(b);\r\n                }\r\n\r\n                if(aIsConstant && bIsConstant && Settings.PARSE2NUMBER) {\r\n                    var c;\r\n                    //remove the sign\r\n                    if(sign < 0) {\r\n                        a.negate();\r\n                        if(b.multiplier.den.equals(2))\r\n                            //we know that the numerator has to be odd and therefore it's i\r\n                            c = new Symbol(Settings.IMAGINARY);\r\n                        else if(isInt(b.multiplier)) {\r\n                            if(even(b.multiplier))\r\n                                c = new Symbol(1);\r\n                            else\r\n                                c = new Symbol(-1);\r\n                        }\r\n                        else if(!even(b.multiplier.den)) {\r\n                            c = new Symbol(Math.pow(sign, b.multiplier.num));\r\n                        }\r\n                        else {\r\n                            c = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\r\n                        }\r\n                    }\r\n\r\n                    result = new Symbol(Math.pow(a.multiplier.toDecimal(), b.multiplier.toDecimal()));\r\n\r\n                    //result = new Symbol(Math2.bigpow(a.multiplier, b.multiplier));\r\n                    //put the back sign\r\n                    if(c)\r\n                        result = _.multiply(result, c);\r\n                }\r\n                else if(bIsInt && !m.equals(1)) {\r\n                    var abs_b = b.abs();\r\n                    // Provide fall back to JS until big number implementation is improved\r\n                    if(abs_b.gt(Settings.MAX_EXP)) {\r\n                        if(b.sign() < 0)\r\n                            return new Symbol(0);\r\n                        return Symbol.infinity();\r\n                    }\r\n                    else {\r\n                        var p = b.multiplier.toDecimal();\r\n                        var sgn = Math.sign(p);\r\n                        p = Math.abs(p);\r\n                        var multiplier = new Frac(1);\r\n                        multiplier.num = m.num.pow(p);\r\n                        multiplier.den = m.den.pow(p);\r\n                        if(sgn < 0)\r\n                            multiplier.invert();\r\n                        //multiplying is justified since after mulltiplyPower if it was of group P it will now be of group N\r\n                        result.multiplier = result.multiplier.multiply(multiplier);\r\n                    }\r\n                }\r\n                else {\r\n                    var sign = a.sign();\r\n                    if(b.isConstant() && a.isConstant() && !b.multiplier.den.equals(1) && sign < 0) {\r\n                        //we know the sign is negative so if the denominator for b == 2 then it's i\r\n                        if(b.multiplier.den.equals(2)) {\r\n                            var i = new Symbol(Settings.IMAGINARY);\r\n                            a.negate();//remove the sign\r\n                            //if the power is negative then i is negative\r\n                            if(b.lessThan(0)) {\r\n                                i.negate();\r\n                                b.negate();//remove the sign from the power\r\n                            }\r\n                            //pull the power normally and put back the imaginary\r\n                            result = _.multiply(_.pow(a, b), i);\r\n                        }\r\n                        else {\r\n                            var aa = a.clone();\r\n                            aa.multiplier.negate();\r\n                            result = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\r\n                            var _a = _.pow(new Symbol(aa.multiplier.num), b.clone());\r\n                            var _b = _.pow(new Symbol(aa.multiplier.den), b.clone());\r\n                            var r = _.divide(_a, _b);\r\n                            result = _.multiply(result, r);\r\n                        }\r\n                    }\r\n                    else if(Settings.PARSE2NUMBER && b.isImaginary()) {\r\n                        //4^(i + 2) = e^(- (2 - 4 i) π n + (2 + i) log(4))\r\n\r\n                        var re = b.realpart();\r\n                        var im = b.imagpart();\r\n                        /*\r\n                         if(b.group === CP && false) {\r\n                         var ex = _.pow(a.clone(), re);\r\n                         var xi = _.multiply(_.multiply(ex.clone(), trig.sin(im.clone())), Symbol.imaginary());\r\n                         var xa = _.multiply(trig.cos(im), ex);\r\n                         result = _.add(xi, xa);\r\n                         }\r\n                         else {\r\n                         */\r\n                        var aa = a.clone().toLinear();\r\n                        var a1 = _.pow(aa.clone(), re);\r\n                        var log_a = log(aa.clone());\r\n                        var b1 = trig.cos(_.multiply(im.clone(), log_a));\r\n                        var c1 = _.multiply(trig.sin(_.multiply(im, log(aa))), Symbol.imaginary());\r\n                        result = _.multiply(a1, _.add(b1, c1));\r\n                        result = _.expand(_.parse(result));\r\n                        /*\r\n                         }   \r\n                         */\r\n                    }\r\n                    else {\r\n                        //b is a symbol\r\n                        var neg_num = a.group === N && sign < 0,\r\n                            num = testSQRT(new Symbol(neg_num ? m.num : Math.abs(m.num)).setPower(b.clone())),\r\n                            den = testSQRT(new Symbol(m.den).setPower(b.clone()).invert());\r\n\r\n                        //eliminate imaginary if possible\r\n                        if(a.imaginary) {\r\n                            if(bIsInt) {\r\n                                var s, p, n;\r\n                                s = Math.sign(b);\r\n                                p = abs(b);\r\n                                n = p % 4;\r\n                                result = new Symbol(even(n) ? -1 : Settings.IMAGINARY);\r\n                                if(n === 0 || s < 0 && (n === 1) || s > 0 && (n === 3)) {\r\n                                    result.negate();\r\n                                }\r\n                            }\r\n                            else {\r\n                                //assume i = sqrt(-1) -> (-1)^(1/2)\r\n                                var nr = b.multiplier.multiply(Frac.quick(1, 2)),\r\n                                        //the denominator denotes the power so raise to it. It will turn positive it round\r\n                                        tn = Math.pow(-1, nr.num);\r\n                                result = even(nr.den) ? new Symbol(-1).setPower(nr, true) : new Symbol(tn);\r\n                            }\r\n                        }\r\n                        //ensure that the sign is carried by the symbol and not the multiplier\r\n                        //this enables us to check down the line if the multiplier can indeed be transferred\r\n                        if(sign < 0 && !neg_num)\r\n                            result.negate();\r\n\r\n                        //retain the absolute value\r\n                        if(bIsConstant && a.group !== EX) {\r\n                            var evenr = even(b.multiplier.den),\r\n                                    evenp = even(a.power),\r\n                                    n = result.power.toDecimal(),\r\n                                    evennp = even(n);\r\n                            if(evenr && evenp && !evennp) {\r\n                                if(n === 1)\r\n                                    result = _.symfunction(ABS, [result]);\r\n                                else if(!isInt(n)) {\r\n                                    var p = result.power;\r\n                                    result = _.symfunction(ABS, [result.toLinear()]).setPower(p);\r\n                                }\r\n                                else {\r\n                                    result = _.multiply(_.symfunction(ABS, [result.clone().toLinear()]),\r\n                                            result.clone().setPower(new Frac(n - 1)));\r\n                                }\r\n                                //quick workaround. Revisit\r\n                                if(Settings.POSITIVE_MULTIPLIERS && result.fname === ABS)\r\n                                    result = result.args[0];\r\n                            }\r\n                        }\r\n                        //multiply out sqrt\r\n                        if(b.equals(2) && result.group === CB) {\r\n                            var _result = new Symbol(1);\r\n                            result.each(function (sym) {\r\n                                _result = _.multiply(_result, _.pow(sym, b));\r\n                            });\r\n                            result = _result;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                result = testSQRT(result);\r\n\r\n                // Don't multiply until we've tested the remaining symbol\r\n                if(num && den) {\r\n                    result = _.multiply(result, testPow(_.multiply(num, den)));\r\n                }\r\n\r\n                // Reduce square root\r\n                if(result.fname === SQRT) {\r\n                    var isEX = result.group === EX;\r\n                    var t = isEX ? result.power.multiplier.toString() : result.power.toString();\r\n                    if(even(t)) {\r\n                        var pt = isEX ? _.divide(result.power, new Symbol(2)) : new Symbol(result.power.divide(new Frac(2))),\r\n                                m = result.multiplier;\r\n                        result = _.pow(result.args[0], pt);\r\n                        result.multiplier = result.multiplier.multiply(m);\r\n                    }\r\n                }\r\n                // Detect Euler's identity\r\n                else if(!Settings.IGNORE_E && result.isE() && result.group === EX && result.power.contains('pi')\r\n                        && result.power.contains(Settings.IMAGINARY) && b.group === CB) {\r\n                    var theta = b.stripVar(Settings.IMAGINARY);\r\n                    result = _.add(trig.cos(theta), _.multiply(Symbol.imaginary(), trig.sin(theta)));\r\n                }\r\n\r\n                return result;\r\n            }\r\n            else {\r\n                if(isVector(a) && bIsSymbol) {\r\n                    a = a.map(function (x) {\r\n                        return _.pow(x, b.clone());\r\n                    });\r\n                }\r\n                else if(isMatrix(a) && bIsSymbol) {\r\n                    var M = new Matrix();\r\n                    a.eachElement(function (x, i, j) {\r\n                        M.set(i, j, _.pow(x, b.clone()));\r\n                    });\r\n                    a = M;\r\n                }\r\n                else if(aIsSymbol && isMatrix(b)) {\r\n                    var M = new Matrix();\r\n                    b.eachElement(function (x, i, j) {\r\n                        M.set(i, j, _.pow(a.clone(), x));\r\n                    });\r\n                    a = M;\r\n                }\r\n                return a;\r\n            }\r\n        };\r\n        // Gets called when the parser finds the , operator.\r\n        // Commas return a Collector object which is roughly an array\r\n        this.comma = function (a, b) {\r\n            if(!(a instanceof Collection))\r\n                a = Collection.create(a);\r\n            a.append(b);\r\n            return a;\r\n        };\r\n        // Link to modulus\r\n        this.mod = function (a, b) {\r\n            return mod(a, b);\r\n        };\r\n        // Used to slice elements from arrays\r\n        this.slice = function (a, b) {\r\n            return new Slice(a, b);\r\n        };\r\n        // The equality setter\r\n        this.equals = function (a, b) {\r\n            // Equality can only be set for group S so complain it's not\r\n            if(a.group !== S && !a.isLinear())\r\n                err('Cannot set equality for ' + a.toString());\r\n            VARS[a.value] = b.clone();\r\n            return b;\r\n        };\r\n        // Percent\r\n        this.percent = function (a) {\r\n            return _.divide(a, new Symbol(100));\r\n        };\r\n        // Set variable\r\n        this.assign = function (a, b) {\r\n            if(a instanceof Collection && b instanceof Collection) {\r\n                a.elements.map(function (x, i) {\r\n                    return _.assign(x, b.elements[i]);\r\n                });\r\n                return Vector.fromArray(b.elements);\r\n            }\r\n            if(a.parent) {\r\n                // It's referring to the parent instead. The current item can be discarded\r\n                var e = a.parent;\r\n                e.elements[e.getter] = b;\r\n                delete e.getter;\r\n                return e;\r\n            }\r\n\r\n            if(a.group !== S)\r\n                throw new NerdamerValueError('Cannot complete operation. Incorrect LH value for ' + a);\r\n            VARS[a.value] = b;\r\n            return b;\r\n        };\r\n        this.function_assign = function (a, b) {\r\n            var f = a.elements.pop();\r\n            return setFunction(f, a.elements, b);\r\n        };\r\n        // Function to quickly convert bools to Symbols\r\n        var bool2Symbol = function (x) {\r\n            return new Symbol(x === true ? 1 : 0);\r\n        };\r\n        //check for equality\r\n        this.eq = function (a, b) {\r\n            return bool2Symbol(a.equals(b));\r\n        };\r\n        //checks for greater than\r\n        this.gt = function (a, b) {\r\n            return bool2Symbol(a.gt(b));\r\n        };\r\n        //checks for greater than equal\r\n        this.gte = function (a, b) {\r\n            return bool2Symbol(a.gte(b));\r\n        };\r\n        //checks for less than\r\n        this.lt = function (a, b) {\r\n            return bool2Symbol(a.lt(b));\r\n        };\r\n        //checks for less than equal\r\n        this.lte = function (a, b) {\r\n            return bool2Symbol(a.lte(b));\r\n        };\r\n        // wraps the factorial\r\n        this.factorial = function (a) {\r\n            return this.symfunction(FACTORIAL, [a]);\r\n        };\r\n        // wraps the double factorial\r\n        this.dfactorial = function (a) {\r\n            return this.symfunction(DOUBLEFACTORIAL, [a]);\r\n        };\r\n    }\r\n    ;\r\n\r\n    /* \"STATIC\" */\r\n    // converts a number to a fraction.\r\n    var Fraction = {\r\n        /**\r\n         * Converts a decimal to a fraction\r\n         * @param {number} value\r\n         * @param {object} opts\r\n         * @returns {Array} - an array containing the denominator and the numerator\r\n         */\r\n        convert: function (value, opts) {\r\n            var frac;\r\n            if(value === 0) {\r\n                frac = [0, 1];\r\n            }\r\n            else {\r\n                if(value < 1e-6 || value > 1e20) {\r\n                    var qc = this.quickConversion(Number(value));\r\n                    if(qc[1] <= 1e20) {\r\n                        var abs = Math.abs(value);\r\n                        var sign = value / abs;\r\n                        frac = this.fullConversion(abs.toFixed((qc[1] + '').length - 1));\r\n                        frac[0] = frac[0] * sign;\r\n                    }\r\n                    else {\r\n                        frac = qc;\r\n                    }\r\n                }\r\n                else {\r\n                    frac = this.fullConversion(value);\r\n                }\r\n            }\r\n            return frac;\r\n        },\r\n        /**\r\n         * If the fraction is too small or too large this gets called instead of fullConversion method\r\n         * @param {number} dec\r\n         * @returns {Array} - an array containing the denominator and the numerator\r\n         */\r\n        quickConversion: function (value) {\r\n            var stripSign = function (s) {\r\n                // Explicitely convert to a string\r\n                if(typeof s !== 'string') {\r\n                    s = s.toString();\r\n                }\r\n\r\n                var sign = '';\r\n\r\n                // Remove and store the sign\r\n                var start = s.charAt(0);\r\n                if(start === '-') {\r\n                    s = s.substr(1, s.length);\r\n                    sign = '-';\r\n                }\r\n                else if(start === '+') {\r\n                    // Just remove the plus sign\r\n                    s = s.substr(1, s.length);\r\n                }\r\n\r\n                return {\r\n                    sign: sign,\r\n                    value: s\r\n                };\r\n            };\r\n\r\n\r\n            function convert(value) {\r\n                // Explicitely convert to a decimal\r\n                if(Scientific.isScientific(value)) {\r\n                    value = scientificToDecimal(value);\r\n                }\r\n\r\n                // Split the value into the sign and the value\r\n                var nparts = stripSign(value);\r\n\r\n                // Split it at the decimal. We'll refer to it as the coeffient parts\r\n                var cparts = nparts.value.split('.');\r\n\r\n                // Combine the entire number by removing leading zero and adding the decimal part\r\n                // This would be teh same as moving the decimal point to the end\r\n                var num;\r\n                // We're dealing with integers\r\n                if(cparts.length === 1) {\r\n                    num = cparts[0];\r\n                }\r\n                else {\r\n                    num = cparts[0] + cparts[1];\r\n                }\r\n                var n = cparts[1] ? cparts[1].length : 0;\r\n                // Generate the padding for the zeros\r\n                var den = `1${'0'.repeat(n)}`;\r\n\r\n                if(num !== '0') {\r\n                    num = num.replace(/^0+/, '');\r\n                }\r\n                return [nparts.sign + num, den];\r\n            }\r\n\r\n            return convert(value);\r\n        },\r\n        /**\r\n         * Returns a good approximation of a fraction. This method gets called by convert\r\n         * http://mathforum.org/library/drmath/view/61772.html\r\n         * Decimal To Fraction Conversion - A Simpler Version\r\n         * Dr Peterson\r\n         * @param {number} dec\r\n         * @returns {Array} - an array containing the denominator and the numerator\r\n         */\r\n        fullConversion: function (dec) {\r\n            var done = false;\r\n            // you can adjust the epsilon to a larger number if you don't need very high precision\r\n            var n1 = 0, d1 = 1, n2 = 1, d2 = 0, n = 0, q = dec, epsilon = 1e-16;\r\n            while(!done) {\r\n                n++;\r\n                if(n > 10000) {\r\n                    done = true;\r\n                }\r\n                var a = Math.floor(q);\r\n                var num = n1 + a * n2;\r\n                var den = d1 + a * d2;\r\n                var e = (q - a);\r\n                if(e < epsilon) {\r\n                    done = true;\r\n                }\r\n                q = 1 / e;\r\n                n1 = n2;\r\n                d1 = d2;\r\n                n2 = num;\r\n                d2 = den;\r\n                if(Math.abs(num / den - dec) < epsilon || n > 30) {\r\n                    done = true;\r\n                }\r\n            }\r\n            return [num, den];\r\n        }\r\n    };\r\n    //Depends on Fraction\r\n\r\n    //The latex generator\r\n    var LaTeX = {\r\n        parser: (function () {\r\n            // create a parser and strip it from everything except the items that you need\r\n            var keep = ['classes', 'setOperator', 'getOperators', 'getBrackets', 'tokenize', 'toRPN', 'tree', 'units'];\r\n            var parser = new Parser();\r\n            for(var x in parser) {\r\n                if(keep.indexOf(x) === -1)\r\n                    delete parser[x];\r\n            }\r\n            // declare the operators\r\n            parser.setOperator({\r\n                precedence: 8,\r\n                operator: '\\\\',\r\n                action: 'slash',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return e; // bypass the slash\r\n                }\r\n            });\r\n            parser.setOperator({\r\n                precedence: 8,\r\n                operator: '\\\\,',\r\n                action: 'slash_comma',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return e; // bypass the slash\r\n                }\r\n            });\r\n            // have braces not map to anything. We want them to be return as-is\r\n            var brackets = parser.getBrackets();\r\n            brackets['{'].maps_to = undefined;\r\n            return parser;\r\n        })(),\r\n        space: '~',\r\n        dot: ' \\\\cdot ',\r\n        // grab a list of supported functions but remove the excluded ones found in exclFN\r\n\r\n        latex: function (symbol, option) {\r\n            // it might be an array\r\n            if(symbol.clone) {\r\n                symbol = symbol.clone(); // leave original as-is\r\n            }\r\n            if(symbol instanceof _.classes.Collection)\r\n                symbol = symbol.elements;\r\n\r\n            if(isArray(symbol)) {\r\n                var LaTeXArray = [];\r\n                for(var i = 0; i < symbol.length; i++) {\r\n                    var sym = symbol[i];\r\n                    //This way I can generate LaTeX on an array of strings.\r\n                    if(!isSymbol(sym))\r\n                        sym = _.parse(sym);\r\n                    LaTeXArray.push(this.latex(sym, option));\r\n                }\r\n                return this.brackets(LaTeXArray.join(', '), 'square');\r\n            }\r\n\r\n            else if(isMatrix(symbol)) {\r\n                var TeX = '\\\\begin{pmatrix}\\n';\r\n                for(var i = 0; i < symbol.elements.length; i++) {\r\n                    var rowTeX = [],\r\n                            e = symbol.elements[i];\r\n                    for(var j = 0; j < e.length; j++) {\r\n                        rowTeX.push(this.latex(e[j], option));\r\n                    }\r\n                    TeX += rowTeX.join(' & ');\r\n                    if(i < symbol.elements.length - 1) {\r\n                        TeX += '\\\\\\\\\\n';\r\n                    }\r\n                }\r\n                TeX += '\\\\end{pmatrix}';\r\n                return TeX;\r\n            }\r\n\r\n            else if(isVector(symbol)) {\r\n                var TeX = '\\\\left[';\r\n                for(var i = 0; i < symbol.elements.length; i++) {\r\n                    TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\r\n                }\r\n                TeX += '\\\\right]';\r\n                return TeX;\r\n            }\r\n\r\n            else if(isSet(symbol)) {\r\n                var TeX = '\\\\{';\r\n                for(var i = 0; i < symbol.elements.length; i++) {\r\n                    TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\r\n                }\r\n                TeX += '\\\\}';\r\n                return TeX;\r\n            }\r\n\r\n            symbol = symbol.clone();\r\n\r\n            var decimal = (option === 'decimal' || option === 'decimals'),\r\n                    power = symbol.power,\r\n                    invert = isNegative(power),\r\n                    negative = symbol.multiplier.lessThan(0);\r\n\r\n            if(symbol.group === P && decimal) {\r\n                return String(symbol.multiplier.toDecimal() * Math.pow(symbol.value, symbol.power.toDecimal()));\r\n            }\r\n            else {\r\n                symbol.multiplier = symbol.multiplier.abs();\r\n\r\n                // if the user wants the result in decimal format then return it as such by placing it at the top part\r\n                var m_array;\r\n\r\n                if(decimal) {\r\n                    var m = String(symbol.multiplier.toDecimal());\r\n                    // if(String(m) === '1' && !decimal) m = '';\r\n                    m_array = [m, ''];\r\n                }\r\n                else {\r\n                    m_array = [symbol.multiplier.num, symbol.multiplier.den];\r\n                }\r\n                // get the value as a two part array\r\n                var v_array = this.value(symbol, invert, option, negative),\r\n                        p;\r\n                // make it all positive since we know whether to push the power to the numerator or denominator already.\r\n                if(invert)\r\n                    power.negate();\r\n                // the power is simple since it requires no additional formatting. We can get it to a\r\n                // string right away. pass in true to neglect unit powers\r\n                if(decimal) {\r\n                    p = isSymbol(power) ? LaTeX.latex(power, option) : String(power.toDecimal());\r\n                    if(String(p) === '1')\r\n                        p = '';\r\n                }\r\n                // get the latex representation\r\n                else if(isSymbol(power))\r\n                    p = this.latex(power, option);\r\n                // get it as a fraction\r\n                else\r\n                    p = this.formatFrac(power, true);\r\n                // use this array to specify if the power is getting attached to the top or the bottom\r\n                var p_array = ['', ''],\r\n                        // stick it to the top or the bottom. If it's negative then the power gets placed on the bottom\r\n                        index = invert ? 1 : 0;\r\n                p_array[index] = p;\r\n\r\n                // special case group P and decimal\r\n                var retval = (negative ? '-' : '') + this.set(m_array, v_array, p_array, symbol.group === CB);\r\n\r\n                return retval.replace(/\\+\\-/gi, '-');\r\n            }\r\n\r\n        },\r\n        // greek mapping\r\n        greek: {\r\n            alpha: '\\\\alpha',\r\n            beta: '\\\\beta',\r\n            gamma: '\\\\gamma',\r\n            delta: '\\\\delta',\r\n            epsilon: '\\\\epsilon',\r\n            zeta: '\\\\zeta',\r\n            eta: '\\\\eta',\r\n            theta: '\\\\theta',\r\n            iota: '\\\\iota',\r\n            kappa: '\\\\kappa',\r\n            lambda: '\\\\lambda',\r\n            mu: '\\\\mu',\r\n            nu: '\\\\nu',\r\n            xi: '\\\\xi',\r\n            omnikron: '\\\\omnikron',\r\n            pi: '\\\\pi',\r\n            rho: '\\\\rho',\r\n            sigma: '\\\\sigma',\r\n            tau: '\\\\tau',\r\n            upsilon: '\\\\upsilon',\r\n            phi: '\\\\phi',\r\n            chi: '\\\\chi',\r\n            psi: '\\\\psi',\r\n            omega: '\\\\omega',\r\n            Gamma: '\\\\Gamma',\r\n            Delta: '\\\\Delta',\r\n            Epsilon: '\\\\Epsilon',\r\n            Theta: '\\\\Theta',\r\n            Lambda: '\\\\Lambda',\r\n            Xi: '\\\\Xi',\r\n            Pi: '\\\\Pi',\r\n            Sigma: '\\\\Sigma',\r\n            Phi: '\\\\Phi',\r\n            Psi: '\\\\Psi',\r\n            Omega: '\\\\Omega'\r\n        },\r\n        symbols: {\r\n            arccos: '\\\\arccos',\r\n            cos: '\\\\cos',\r\n            csc: '\\\\csc',\r\n            exp: '\\\\exp',\r\n            ker: '\\\\ker',\r\n            limsup: '\\\\limsup',\r\n            min: '\\\\min',\r\n            sinh: '\\\\sinh',\r\n            arcsin: '\\\\arcsin',\r\n            cosh: '\\\\cosh',\r\n            deg: '\\\\deg',\r\n            gcd: '\\\\gcd',\r\n            lg: '\\\\lg',\r\n            ln: '\\\\ln',\r\n            Pr: '\\\\Pr',\r\n            sqrt: '\\\\sqrt',\r\n            sup: '\\\\sup',\r\n            arctan: '\\\\arctan',\r\n            cot: '\\\\cot',\r\n            det: '\\\\det',\r\n            hom: '\\\\hom',\r\n            lim: '\\\\lim',\r\n            log: '\\\\log',\r\n            LN: '\\\\LN',\r\n            sec: '\\\\sec',\r\n            tan: '\\\\tan',\r\n            arg: '\\\\arg',\r\n            coth: '\\\\coth',\r\n            dim: '\\\\dim',\r\n            inf: '\\\\inf',\r\n            liminf: '\\\\liminf',\r\n            max: '\\\\max',\r\n            sin: '\\\\sin',\r\n            tanh: '\\\\tanh'\r\n        },\r\n        // get the raw value of the symbol as an array\r\n        value: function (symbol, inverted, option, negative) {\r\n            var group = symbol.group,\r\n                    previousGroup = symbol.previousGroup,\r\n                    v = ['', ''],\r\n                    index = inverted ? 1 : 0;\r\n            /*if(group === N) // do nothing since we want to return top & bottom blank; */\r\n            if(symbol.isInfinity) {\r\n                v[index] = '\\\\infty';\r\n            }\r\n            else if(group === S || group === P || previousGroup === S || previousGroup === P || previousGroup === N) {\r\n                var value = this.formatSubscripts(symbol.value);\r\n                if(value.replace)\r\n                    value = value.replace(/(.+)_$/, '$1\\\\_');\r\n                // split it so we can check for instances of alpha as well as alpha_b\r\n                var t_varray = String(value).split('_');\r\n                var greek = this.greek[t_varray[0]];\r\n                if(greek) {\r\n                    t_varray[0] = greek;\r\n                    value = t_varray.join('_');\r\n                }\r\n                var symbol = this.symbols[t_varray[0]];\r\n                if(symbol) {\r\n                    t_varray[0] = symbol;\r\n                    value = t_varray.join('_');\r\n                }\r\n                v[index] = value;\r\n            }\r\n            else if(group === FN || previousGroup === FN) {\r\n                var name,\r\n                        input = [],\r\n                        fname = symbol.fname;\r\n                // collect the arguments\r\n                for(var i = 0; i < symbol.args.length; i++) {\r\n                    var arg = symbol.args[i], item;\r\n                    if(typeof arg === 'string')\r\n                        item = arg;\r\n                    else {\r\n                        item = this.latex(arg, option);\r\n                    }\r\n                    input.push(item);\r\n                }\r\n\r\n                if(fname === SQRT) {\r\n                    v[index] = '\\\\sqrt' + this.braces(input.join(','));\r\n                }\r\n                else if(fname === ABS) {\r\n                    v[index] = this.brackets(input.join(','), 'abs');\r\n                }\r\n                else if(fname === PARENTHESIS) {\r\n                    v[index] = this.brackets(input.join(','), 'parens');\r\n                }\r\n                else if(fname === 'limit') {\r\n                    v[index] = ' \\\\lim\\\\limits_{' + input[1] + ' \\\\to ' + input[2] + '} ' + input[0];\r\n                }\r\n                else if(fname === 'integrate') {\r\n                    v[index] = '\\\\int' + this.braces(input[0]) + this.braces('d' + input[1]);\r\n                }\r\n                else if(fname === 'defint') {\r\n                    v[index] = '\\\\int\\\\limits_' + this.braces(input[1]) + '^' + this.braces(input[2]) + ' ' + input[0] + ' d' + input[3];\r\n                }\r\n                else if(fname === FACTORIAL || fname === DOUBLEFACTORIAL) {\r\n                    var arg = symbol.args[0];\r\n                    if(arg.power.equals(1) && (arg.isComposite() || arg.isCombination())) {\r\n                        input[0] = this.brackets(input[0]);\r\n                    }\r\n                    v[index] = input[0] + (fname === FACTORIAL ? '!' : '!!');\r\n                }\r\n                else if(fname === 'floor') {\r\n                    v[index] = '\\\\left \\\\lfloor' + this.braces(input[0]) + '\\\\right \\\\rfloor';\r\n                }\r\n                else if(fname === 'ceil') {\r\n                    v[index] = '\\\\left \\\\lceil' + this.braces(input[0]) + '\\\\right \\\\rceil';\r\n                }\r\n                // capture log(a, b)\r\n                else if(fname === Settings.LOG && input.length > 1) {\r\n                    v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(input[1]) + this.brackets(input[0]);\r\n                }\r\n                // capture log(a, b)\r\n                else if(fname === Settings.LOG10) {\r\n                    v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(10) + this.brackets(input[0]);\r\n                }\r\n                else if(fname === 'sum') {\r\n                    var a = input[0],\r\n                            b = input[1],\r\n                            c = input[2],\r\n                            d = input[3];\r\n                    v[index] = '\\\\sum\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\r\n                }\r\n                else if(fname === 'product') {\r\n                    var a = input[0],\r\n                            b = input[1],\r\n                            c = input[2],\r\n                            d = input[3];\r\n                    v[index] = '\\\\prod\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\r\n                }\r\n                else if(fname === 'nthroot') {\r\n                    v[index] = '\\\\sqrt[' + input[1] + ']' + this.braces(input[0]);\r\n                }\r\n                else if(fname === 'mod') {\r\n                    v[index] = input[0] + ' \\\\bmod ' + input[1];\r\n                }\r\n                else if(fname === 'realpart') {\r\n                    v[index] = '\\\\operatorname{Re}' + this.brackets(input[0]);\r\n                }\r\n                else if(fname === 'imagpart') {\r\n                    v[index] = '\\\\operatorname{Im}' + this.brackets(input[0]);\r\n                }\r\n                else {\r\n                    var name = fname !== '' ? '\\\\mathrm' + this.braces(fname.replace(/_/g, '\\\\_')) : '';\r\n                    if(symbol.isConversion)\r\n                        v[index] = name + this.brackets(input.join(''), 'parens');\r\n                    else\r\n                        v[index] = name + this.brackets(input.join(','), 'parens');\r\n                }\r\n            }\r\n            else if(symbol.isComposite()) {\r\n                var collected = symbol.collectSymbols().sort(\r\n                        group === CP || previousGroup === CP ?\r\n                        function (a, b) {\r\n                            return b.group - a.group;\r\n                        } :\r\n                        function (a, b) {\r\n                            var x = isSymbol(a.power) ? -1 : a.power;\r\n                            var y = isSymbol(b.power) ? -1 : b.power;\r\n                            return y - x;\r\n                        }\r\n                ),\r\n                        symbols = [],\r\n                        l = collected.length;\r\n                for(var i = 0; i < l; i++) {\r\n                    symbols.push(LaTeX.latex(collected[i], option));\r\n                }\r\n                var value = symbols.join('+');\r\n\r\n                v[index] = !(symbol.isLinear() && symbol.multiplier.equals(1)) || negative ? this.brackets(value, 'parens') : value;\r\n            }\r\n            else if(group === CB || previousGroup === EX || previousGroup === CB) {\r\n                if(group === CB)\r\n                    symbol.distributeExponent();\r\n                // This almost feels a little like cheating but I need to know if I should be wrapping the symbol\r\n                // in brackets or not. We'll do this by checking the value of the numerator and then comparing it\r\n                // to whether the symbol value is \"simple\" or not.\r\n                var denominator = [],\r\n                        numerator = [];\r\n                // Generate a profile\r\n                var den_map = [], num_map = [], num_c = 0, den_c = 0;\r\n                var setBrackets = function (container, map, counter) {\r\n                    if(counter > 1 && map.length > 0) {\r\n                        var l = map.length;\r\n                        for(var i = 0; i < l; i++) {\r\n                            var idx = map[i], item = container[idx];\r\n                            if(!(/^\\\\left\\(.+\\\\right\\)\\^\\{.+\\}$/g.test(item) || /^\\\\left\\(.+\\\\right\\)$/g.test(item))) {\r\n                                container[idx] = LaTeX.brackets(item, 'parens');\r\n                            }\r\n                        }\r\n                    }\r\n                    return container;\r\n                };\r\n\r\n                // Generate latex for each of them\r\n                symbol.each(function (x) {\r\n                    var isDenom = isNegative(x.power),\r\n                            laTex;\r\n\r\n                    if(isDenom) {\r\n                        laTex = LaTeX.latex(x.invert(), option);\r\n                        den_c++;\r\n                        if(x.isComposite()) {\r\n                            if(symbol.multiplier.den != 1 && Math.abs(x.power) == 1)\r\n                                laTex = LaTeX.brackets(laTex, 'parens');\r\n                            den_map.push(denominator.length); // make a note of where the composite was found\r\n                        }\r\n\r\n                        denominator.push(laTex);\r\n                    }\r\n                    else {\r\n                        laTex = LaTeX.latex(x, option);\r\n                        num_c++;\r\n                        if(x.isComposite()) {\r\n                            if(symbol.multiplier.num != 1 && Math.abs(x.power) == 1)\r\n                                laTex = LaTeX.brackets(laTex, 'parens');\r\n                            num_map.push(numerator.length);   // make a note of where the composite was found\r\n                        }\r\n                        numerator.push(laTex);\r\n                    }\r\n                });\r\n\r\n                // Apply brackets\r\n                setBrackets(numerator, num_map, num_c);\r\n                v[0] = numerator.join(this.dot); // collapse the numerator into one string\r\n\r\n                setBrackets(denominator, den_map, den_c);\r\n                v[1] = denominator.join(this.dot);\r\n            }\r\n\r\n            return v;\r\n        },\r\n        set: function (m, v, p, combine_power) {\r\n            var isBracketed = function (v) {\r\n                return /^\\\\left\\(.+\\\\right\\)$/.test(v);\r\n            };\r\n            // format the power if it exists\r\n            if(p)\r\n                p = this.formatP(p);\r\n            // group CB will have to be wrapped since the power applies to both it's numerator and denominator\r\n            if(combine_power) {\r\n                // POSSIBLE BUG: If powers for group CB format wrong, investigate this since I might have overlooked something\r\n                // the assumption is that in every case the denonimator should be empty when dealing with CB. I can't think\r\n                // of a case where this isn't true\r\n                var tp = p[0];\r\n                p[0] = ''; // temporarily make p blank\r\n            }\r\n\r\n            // merge v and p. Not that v MUST be first since the order matters\r\n            v = this.merge(v, p);\r\n            var mn = m[0], md = m[1], vn = v[0], vd = v[1];\r\n            // filters\r\n            // if the top has a variable but the numerator is one drop it\r\n            if(vn && Number(mn) === 1)\r\n                mn = '';\r\n            // if denominator is 1 drop it always\r\n            if(Number(md) === 1)\r\n                md = '';\r\n            // prepare the top portion but check that it's not already bracketed. If it is then leave out the cdot\r\n            var top = this.join(mn, vn, !isBracketed(vn) ? this.dot : '');\r\n\r\n            // prepare the bottom portion but check that it's not already bracketed. If it is then leave out the cdot\r\n            var bottom = this.join(md, vd, !isBracketed(vd) ? this.dot : '');\r\n            // format the power if it exists\r\n            // make it a fraction if both top and bottom exists\r\n            if(top && bottom) {\r\n                var frac = this.frac(top, bottom);\r\n                if(combine_power && tp)\r\n                    frac = this.brackets(frac) + tp;\r\n                return frac;\r\n            }\r\n            // otherwise only the top exists so return that\r\n            else\r\n                return top;\r\n        },\r\n        merge: function (a, b) {\r\n            var r = [];\r\n            for(var i = 0; i < 2; i++)\r\n                r[i] = a[i] + b[i];\r\n            return r;\r\n        },\r\n        // joins together two strings if both exist\r\n        join: function (n, d, glue) {\r\n            if(!n && !d)\r\n                return '';\r\n            if(n && !d)\r\n                return n;\r\n            if(d && !n)\r\n                return d;\r\n            return n + glue + d;\r\n        },\r\n        /**\r\n         * Places subscripts in braces for proper formatting\r\n         * @param {String} v\r\n         * @returns {String}\r\n         */\r\n        formatSubscripts: function (v) {\r\n            // Split it at the underscore\r\n            var arr = v.toString().split('_');\r\n\r\n            var name = '';\r\n\r\n            // Loop over all entries except the first one\r\n            while(arr.length > 1) {\r\n                // Wrap all in braces except for the last one\r\n                if(arr.length > 0) {\r\n                    name = '_' + this.braces(arr.pop() + name);\r\n                }\r\n            }\r\n\r\n            return arr[0] + name;\r\n        },\r\n        formatP: function (p_array) {\r\n            for(var i = 0; i < 2; i++) {\r\n                var p = p_array[i];\r\n                if(p)\r\n                    p_array[i] = '^' + this.braces(p);\r\n            }\r\n            return p_array;\r\n        },\r\n        /**\r\n         * formats the fractions accordingly.\r\n         * @param {Frac} f\r\n         * @param {bool} is_pow\r\n         */\r\n        formatFrac: function (f, is_pow) {\r\n            var n = f.num.toString(),\r\n                    d = f.den.toString();\r\n            // no need to have x^1\r\n            if(is_pow && n === '1' && d === '1')\r\n                return '';\r\n            // no need to have x/1\r\n            if(d === '1')\r\n                return n;\r\n            return this.frac(n, d);\r\n        },\r\n        frac: function (n, d) {\r\n            return '\\\\frac' + this.braces(n) + this.braces(d);\r\n        },\r\n        braces: function (e) {\r\n            return '{' + e + '}';\r\n        },\r\n        brackets: function (e, typ) {\r\n            typ = typ || 'parens';\r\n            var bracketTypes = {\r\n                parens: ['(', ')'],\r\n                square: ['[', ']'],\r\n                brace: ['{', '}'],\r\n                abs: ['|', '|'],\r\n                angle: ['\\\\langle', '\\\\rangle']\r\n            };\r\n            var bracket = bracketTypes[typ];\r\n            return '\\\\left' + bracket[0] + e + '\\\\right' + bracket[1];\r\n        },\r\n        /**\r\n         * Removes extreneous tokens\r\n         * @param {Tokens[]} tokens\r\n         * @returns {Tokens[]}\r\n         */\r\n        filterTokens: function (tokens) {\r\n            var filtered = [];\r\n\r\n            // Copy over the type of the scope\r\n            if(isArray(tokens)) {\r\n                filtered.type = tokens.type;\r\n            }\r\n\r\n            // the items that need to be disposed\r\n            var d = ['\\\\', 'left', 'right', 'big', 'Big', 'large', 'Large'];\r\n            for(var i = 0, l = tokens.length; i < l; i++) {\r\n                var token = tokens[i];\r\n                var next_token = tokens[i + 1];\r\n                if(token.value === '\\\\' && next_token.value === '\\\\') {\r\n                    filtered.push(token);\r\n                }\r\n                else if(isArray(token)) {\r\n                    filtered.push(LaTeX.filterTokens(token));\r\n                }\r\n                else if(d.indexOf(token.value) === -1) {\r\n                    filtered.push(token);\r\n                }\r\n            }\r\n            return filtered;\r\n        },\r\n        /*\r\n         * Parses tokens from LaTeX string. Does not do any error checking\r\n         * @param {Tokens[]} rpn\r\n         * @returns {String}\r\n         */\r\n        parse: function (raw_tokens) {\r\n            var i, l;\r\n            var retval = '';\r\n            var tokens = this.filterTokens(raw_tokens);\r\n            var replace = {\r\n                'cdot': '',\r\n                'times': '',\r\n                'infty': 'Infinity'\r\n            };\r\n            // get the next token\r\n            var next = function (n) {\r\n                return tokens[(typeof n === 'undefined' ? ++i : i += n)];\r\n            };\r\n            var parse_next = function () {\r\n                return LaTeX.parse(next());\r\n            };\r\n            var get = function (token) {\r\n                if(token in replace) {\r\n                    return replace[token];\r\n                }\r\n                // A quirk with implicit multiplication forces us to check for *\r\n                if(token === '*' && tokens[i + 1].value === '&') {\r\n                    next(2); // skip this and the &\r\n                    return ',';\r\n                }\r\n\r\n                if(token === '&') {\r\n                    next();\r\n                    return ','; // Skip the *\r\n                }\r\n                // If it's the end of a row, return the row separator\r\n                if(token === '\\\\') {\r\n                    return '],[';\r\n                }\r\n                return token;\r\n            };\r\n\r\n            // start parsing the tokens\r\n            for(i = 0, l = tokens.length; i < l; i++) {\r\n                var token = tokens[i];\r\n                // fractions\r\n                if(token.value === 'frac') {\r\n                    // parse and wrap it in brackets\r\n                    var n = parse_next();\r\n                    var d = parse_next();\r\n                    retval += n + '/' + d;\r\n                }\r\n                else if(token.value in LaTeX.symbols) {\r\n                    if(token.value === SQRT && tokens[i + 1].type === 'vector' && tokens[i + 2].type === 'Set') {\r\n                        var base = parse_next();\r\n                        var expr = parse_next();\r\n                        retval += (expr + '^' + inBrackets('1/' + base));\r\n                    }\r\n                    else {\r\n                        retval += token.value + parse_next();\r\n                    }\r\n                }\r\n                else if(token.value === 'int') {\r\n                    var f = parse_next();\r\n                    // skip the comma\r\n                    i++;\r\n                    // get the variable of integration\r\n                    var dx = next().value;\r\n                    dx = get(dx.substring(1, dx.length));\r\n                    retval += 'integrate' + inBrackets(f + ',' + dx);\r\n                }\r\n                else if(token.value === 'int_') {\r\n                    var l = parse_next(); // lower\r\n                    i++; // skip the ^\r\n                    var u = next().value; // upper\r\n                    // if it is in brackets\r\n                    if (u === undefined) {\r\n                        i--;\r\n                        var u = parse_next();\r\n                    }\r\n                    var f = parse_next(); // function\r\n                    \r\n                    // get the variable of integration\r\n                    var dx = next().value;\r\n                    // skip the comma\r\n                    if (dx === ',') {\r\n                        var dx = next().value;\r\n                    }\r\n                    // if 'd', skip\r\n                    if (dx === 'differentialD') {\r\n                        // skip the *\r\n                        i++;\r\n                        var dx = next().value;\r\n                    }\r\n                    if (dx === 'mathrm') {\r\n                        // skip the mathrm{d}\r\n                        i++;\r\n                        var dx = next().value;\r\n                    }\r\n                    retval += 'defint' + inBrackets(f + ',' + l + ',' + u + ',' + dx);\r\n                }\r\n                else if(token.value && token.value.startsWith('int_')) {\r\n                    // var l = parse_next(); // lower\r\n                    var l = token.value.replace('int_', '')\r\n                    console.log('uppernow')\r\n                    i++; // skip the ^\r\n                    var u = next().value; // upper\r\n                    // if it is in brackets\r\n                    if (u === undefined) {\r\n                        i--;\r\n                        var u = parse_next();\r\n                    }\r\n                    var f = parse_next(); // function\r\n                    \r\n                    // get the variable of integration\r\n                    var dx = next().value;\r\n                    // skip the comma\r\n                    if (dx === ',') {\r\n                        var dx = next().value;\r\n                    }\r\n                    // if 'd', skip\r\n                    if (dx === 'differentialD') {\r\n                        // skip the *\r\n                        i++;\r\n                        var dx = next().value;\r\n                    }\r\n                    if (dx === 'mathrm') {\r\n                        // skip the mathrm{d}\r\n                        i++;\r\n                        var dx = next().value;\r\n                    }\r\n                    retval += 'defint' + inBrackets(f + ',' + l + ',' + u + ',' + dx);\r\n                }\r\n                else if(token.value === 'mathrm') {\r\n                    var f = tokens[++i][0].value;\r\n                    retval += f + parse_next();\r\n                }\r\n                // sum and product\r\n                else if(token.value === 'sum_' || token.value === 'prod_') {\r\n                    var fn = token.value === 'sum_' ? 'sum' : 'product';\r\n                    var nxt = next();\r\n                    i++; // skip the caret\r\n                    var end = parse_next();\r\n                    var f = parse_next();\r\n                    retval += fn + inBrackets([f, get(nxt[0]), get(nxt[2]), get(end)].join(','));\r\n                }\r\n                else if(token.value === 'lim_') {\r\n                    var nxt = next();\r\n                    retval += 'limit' + inBrackets([parse_next(), get(nxt[0]), get(nxt[2])].join(','));\r\n                }\r\n                else if(token.value === 'begin') {\r\n                    var nxt = next();\r\n                    if(Array.isArray(nxt)) {\r\n                        var v = nxt[0].value;\r\n                        if(v === 'matrix') {\r\n                            // Start a matrix\r\n                            retval += 'matrix([';\r\n                        }\r\n                    }\r\n                }\r\n                else if(token.value === 'end') {\r\n                    var nxt = next();\r\n                    if(Array.isArray(nxt)) {\r\n                        var v = nxt[0].value;\r\n                        if(v === 'matrix') {\r\n                            // End a matrix\r\n                            retval += '])';\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if(Array.isArray(token)) {\r\n                        retval += get(LaTeX.parse(token));\r\n                    }\r\n                    else {\r\n                        retval += get(token.value.toString());\r\n                    }\r\n                }\r\n            }\r\n\r\n            return inBrackets(retval);\r\n        }\r\n    };\r\n//Vector =======================================================================\r\n    function Vector(v) {\r\n        if(isVector(v))\r\n            this.elements = v.items.slice(0);\r\n        else if(isArray(v))\r\n            this.elements = v.slice(0);\r\n        else\r\n            this.elements = [].slice.call(arguments);\r\n    }\r\n    /*\r\n     * Generates a pre-filled array\r\n     * @param {type} n\r\n     * @param {type} val\r\n     * @returns {unresolved}\r\n     */\r\n    Vector.arrayPrefill = function (n, val) {\r\n        var a = [];\r\n        val = val || 0;\r\n        for(var i = 0; i < n; i++)\r\n            a[i] = val;\r\n        return a;\r\n    };\r\n    /**\r\n     * Generate a vector from and array\r\n     * @param {type} a\r\n     * @returns {unresolved}\r\n     */\r\n    Vector.fromArray = function (a) {\r\n        var v = new Vector();\r\n        v.elements = a;\r\n        return v;\r\n    };\r\n\r\n    /**\r\n     * Convert a Set to a Vector\r\n     * @param {Set} set\r\n     * @returns {Vector}\r\n     */\r\n    Vector.fromSet = function (set) {\r\n        return Vector.fromArray(set.elements);\r\n    };\r\n\r\n    //Ported from Sylvester.js\r\n    Vector.prototype = {\r\n        custom: true,\r\n        // Returns element i of the vector\r\n        e: function (i) {\r\n            return (i < 1 || i > this.elements.length) ? null : this.elements[i - 1];\r\n        },\r\n\r\n        set: function (i, val) {\r\n            if(!isSymbol(val))\r\n                val = new Symbol(val);\r\n            this.elements[i] = val;\r\n        },\r\n\r\n        // Returns the number of elements the vector has\r\n        dimensions: function () {\r\n            return this.elements.length;\r\n        },\r\n\r\n        // Returns the modulus ('length') of the vector\r\n        modulus: function () {\r\n            return block('SAFE', function () {\r\n                return _.pow((this.dot(this.clone())), new Symbol(0.5));\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns true iff the vector is equal to the argument\r\n        eql: function (vector) {\r\n            var n = this.elements.length;\r\n            var V = vector.elements || vector;\r\n            if(n !== V.length) {\r\n                return false;\r\n            }\r\n            do {\r\n                if(Math.abs(_.subtract(this.elements[n - 1], V[n - 1]).valueOf()) > PRECISION) {\r\n                    return false;\r\n                }\r\n            }\r\n            while(--n);\r\n            return true;\r\n        },\r\n\r\n        // Returns a clone of the vector\r\n        clone: function () {\r\n            var V = new Vector(),\r\n                    l = this.elements.length;\r\n            for(var i = 0; i < l; i++) {\r\n                //Rule: all items within the vector must have a clone method.\r\n                V.elements.push(this.elements[i].clone());\r\n            }\r\n            if(this.getter) {\r\n                V.getter = this.getter.clone();\r\n            }\r\n            return V;\r\n        },\r\n\r\n        // Maps the vector to another vector according to the given function\r\n        map: function (fn) {\r\n            var elements = [];\r\n            this.each(function (x, i) {\r\n                elements.push(fn(x, i));\r\n            });\r\n\r\n            return new Vector(elements);\r\n        },\r\n\r\n        // Calls the iterator for each element of the vector in turn\r\n        each: function (fn) {\r\n            var n = this.elements.length, k = n, i;\r\n            do {\r\n                i = k - n;\r\n                fn(this.elements[i], i + 1);\r\n            }\r\n            while(--n);\r\n        },\r\n\r\n        // Returns a new vector created by normalizing the receiver\r\n        toUnitVector: function () {\r\n            return block('SAFE', function () {\r\n                var r = this.modulus();\r\n                if(r.valueOf() === 0) {\r\n                    return this.clone();\r\n                }\r\n                return this.map(function (x) {\r\n                    return _.divide(x, r);\r\n                });\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the angle between the vector and the argument (also a vector)\r\n        angleFrom: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                var n = this.elements.length;\r\n                if(n !== V.length) {\r\n                    return null;\r\n                }\r\n                var dot = new Symbol(0), mod1 = new Symbol(0), mod2 = new Symbol(0);\r\n                // Work things out in parallel to save time\r\n                this.each(function (x, i) {\r\n                    dot = _.add(dot, _.multiply(x, V[i - 1]));\r\n                    mod1 = _.add(mod1, _.multiply(x, x));// will not conflict in safe block\r\n                    mod2 = _.add(mod2, _.multiply(V[i - 1], V[i - 1]));// will not conflict in safe block\r\n                });\r\n                mod1 = _.pow(mod1, new Symbol(0.5));\r\n                mod2 = _.pow(mod2, new Symbol(0.5));\r\n                var product = _.multiply(mod1, mod2);\r\n                if(product.valueOf() === 0) {\r\n                    return null;\r\n                }\r\n                var theta = _.divide(dot, product);\r\n                var theta_val = theta.valueOf();\r\n                if(theta_val < -1) {\r\n                    theta = -1;\r\n                }\r\n                if(theta_val > 1) {\r\n                    theta = 1;\r\n                }\r\n                return new Symbol(Math.acos(theta));\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns true iff the vector is parallel to the argument\r\n        isParallelTo: function (vector) {\r\n            var angle = this.angleFrom(vector).valueOf();\r\n            return (angle === null) ? null : (angle <= PRECISION);\r\n        },\r\n\r\n        // Returns true iff the vector is antiparallel to the argument\r\n        isAntiparallelTo: function (vector) {\r\n            var angle = this.angleFrom(vector).valueOf();\r\n            return (angle === null) ? null : (Math.abs(angle - Math.PI) <= PRECISION);\r\n        },\r\n\r\n        // Returns true iff the vector is perpendicular to the argument\r\n        isPerpendicularTo: function (vector) {\r\n            var dot = this.dot(vector);\r\n            return (dot === null) ? null : (Math.abs(dot) <= PRECISION);\r\n        },\r\n\r\n        // Returns the result of adding the argument to the vector\r\n        add: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                if(this.elements.length !== V.length) {\r\n                    return null;\r\n                }\r\n                return this.map(function (x, i) {\r\n                    return _.add(x, V[i - 1]);\r\n                });\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the result of subtracting the argument from the vector\r\n        subtract: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                if(this.elements.length !== V.length) {\r\n                    return null;\r\n                }\r\n                return this.map(function (x, i) {\r\n                    return _.subtract(x, V[i - 1]);\r\n                });\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the result of multiplying the elements of the vector by the argument\r\n        multiply: function (k) {\r\n            return this.map(function (x) {\r\n                return x.clone() * k.clone();\r\n            });\r\n        },\r\n\r\n        x: function (k) {\r\n            return this.multiply(k);\r\n        },\r\n\r\n        // Returns the scalar product of the vector with the argument\r\n        // Both vectors must have equal dimensionality\r\n        dot: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                var product = new Symbol(0), n = this.elements.length;\r\n                if(n !== V.length) {\r\n                    return null;\r\n                }\r\n                do {\r\n                    product = _.add(product, _.multiply(this.elements[n - 1], V[n - 1]));\r\n                }\r\n                while(--n);\r\n                return product;\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the vector product of the vector with the argument\r\n        // Both vectors must have dimensionality 3\r\n        cross: function (vector) {\r\n            var B = vector.elements || vector;\r\n            if(this.elements.length !== 3 || B.length !== 3) {\r\n                return null;\r\n            }\r\n            var A = this.elements;\r\n            return block('SAFE', function () {\r\n                return new Vector([\r\n                    _.subtract(_.multiply(A[1], B[2]), _.multiply(A[2], B[1])),\r\n                    _.subtract(_.multiply(A[2], B[0]), _.multiply(A[0], B[2])),\r\n                    _.subtract(_.multiply(A[0], B[1]), _.multiply(A[1], B[0]))\r\n                ]);\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the (absolute) largest element of the vector\r\n        max: function () {\r\n            var m = 0, n = this.elements.length, k = n, i;\r\n            do {\r\n                i = k - n;\r\n                if(Math.abs(this.elements[i].valueOf()) > Math.abs(m.valueOf())) {\r\n                    m = this.elements[i];\r\n                }\r\n            }\r\n            while(--n);\r\n            return m;\r\n        },\r\n        magnitude: function () {\r\n            var magnitude = new Symbol(0);\r\n            this.each(function (e) {\r\n                magnitude = _.add(magnitude, _.pow(e, new Symbol(2)));\r\n            });\r\n            return _.sqrt(magnitude);\r\n        },\r\n        // Returns the index of the first match found\r\n        indexOf: function (x) {\r\n            var index = null, n = this.elements.length, k = n, i;\r\n            do {\r\n                i = k - n;\r\n                if(index === null && this.elements[i].valueOf() === x.valueOf()) {\r\n                    index = i + 1;\r\n                }\r\n            }\r\n            while(--n);\r\n            return index;\r\n        },\r\n        text: function (x) {\r\n            return text(this);\r\n        },\r\n        toString: function () {\r\n            return this.text();\r\n        },\r\n        latex: function (option) {\r\n            var tex = [];\r\n            for(var i = 0; i < this.elements.length; i++) {\r\n                tex.push(LaTeX.latex.call(LaTeX, this.elements[i], option));\r\n            }\r\n            return '[' + tex.join(', ') + ']';\r\n        }\r\n    };\r\n\r\n//Matrix =======================================================================\r\n    function Matrix() {\r\n        var m = arguments,\r\n                l = m.length, i, el = [];\r\n        if(isMatrix(m)) { // if it's a matrix then make a clone\r\n            for(i = 0; i < l; i++) {\r\n                el.push(m[i].slice(0));\r\n            }\r\n        }\r\n        else {\r\n            var row, lw, rl;\r\n            for(i = 0; i < l; i++) {\r\n                row = m[i];\r\n                if(isVector(row))\r\n                    row = row.elements;\r\n                if(!isArray(row))\r\n                    row = [row];\r\n                rl = row.length;\r\n                if(lw && lw !== rl)\r\n                    err('Unable to create Matrix. Row dimensions do not match!');\r\n                el.push(row);\r\n                lw = rl;\r\n            }\r\n        }\r\n        this.elements = el;\r\n    }\r\n    Matrix.identity = function (n) {\r\n        var m = new Matrix();\r\n        for(var i = 0; i < n; i++) {\r\n            m.elements.push([]);\r\n            for(var j = 0; j < n; j++) {\r\n                m.set(i, j, i === j ? new Symbol(1) : new Symbol(0));\r\n            }\r\n        }\r\n        return m;\r\n    };\r\n    Matrix.fromArray = function (arr) {\r\n        function F(args) {\r\n            return Matrix.apply(this, args);\r\n        }\r\n        F.prototype = Matrix.prototype;\r\n\r\n        return new F(arr);\r\n    };\r\n    Matrix.zeroMatrix = function (rows, cols) {\r\n        var m = new Matrix();\r\n        for(var i = 0; i < rows; i++) {\r\n            m.elements.push(Vector.arrayPrefill(cols, new Symbol(0)));\r\n        }\r\n        return m;\r\n    };\r\n    Matrix.prototype = {\r\n        // needs be true to let the parser know not to try to cast it to a symbol\r\n        custom: true,\r\n        get: function (row, column) {\r\n            if(!this.elements[row])\r\n                return undefined;\r\n            return this.elements[row][column];\r\n        },\r\n        map: function (f, raw_values) {\r\n            var M = new Matrix();\r\n            this.each(function (e, i, j) {\r\n                M.set(i, j, f.call(M, e), raw_values);\r\n            });\r\n            return M;\r\n        },\r\n        set: function (row, column, value, raw) {\r\n            if(!this.elements[row])\r\n                this.elements[row] = [];\r\n            this.elements[row][column] = raw ? value : (isSymbol(value) ? value : new Symbol(value));\r\n        },\r\n        cols: function () {\r\n            return this.elements[0].length;\r\n        },\r\n        rows: function () {\r\n            return this.elements.length;\r\n        },\r\n        row: function (n) {\r\n            if(!n || n > this.cols())\r\n                return [];\r\n            return this.elements[n - 1];\r\n        },\r\n        col: function (n) {\r\n            var nr = this.rows(),\r\n                    col = [];\r\n            if(n > this.cols() || !n)\r\n                return col;\r\n            for(var i = 0; i < nr; i++) {\r\n                col.push(this.elements[i][n - 1]);\r\n            }\r\n            return col;\r\n        },\r\n        eachElement: function (fn) {\r\n            var nr = this.rows(),\r\n                    nc = this.cols(), i, j;\r\n            for(i = 0; i < nr; i++) {\r\n                for(j = 0; j < nc; j++) {\r\n                    fn.call(this, this.elements[i][j], i, j);\r\n                }\r\n            }\r\n        },\r\n        // ported from Sylvester.js\r\n        determinant: function () {\r\n            if(!this.isSquare()) {\r\n                return null;\r\n            }\r\n            var M = this.toRightTriangular();\r\n            var det = M.elements[0][0], n = M.elements.length - 1, k = n, i;\r\n            do {\r\n                i = k - n + 1;\r\n                det = _.multiply(det, M.elements[i][i]);\r\n            }\r\n            while(--n);\r\n            return det;\r\n        },\r\n        isSquare: function () {\r\n            return this.elements.length === this.elements[0].length;\r\n        },\r\n        isSingular: function () {\r\n            return this.isSquare() && this.determinant() === 0;\r\n        },\r\n        augment: function (m) {\r\n            var r = this.rows(), rr = m.rows();\r\n            if(r !== rr)\r\n                err(\"Cannot augment matrix. Rows don't match.\");\r\n            for(var i = 0; i < r; i++) {\r\n                this.elements[i] = this.elements[i].concat(m.elements[i]);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        clone: function () {\r\n            var r = this.rows(), c = this.cols(),\r\n                    m = new Matrix();\r\n            for(var i = 0; i < r; i++) {\r\n                m.elements[i] = [];\r\n                for(var j = 0; j < c; j++) {\r\n                    var symbol = this.elements[i][j];\r\n                    m.elements[i][j] = isSymbol(symbol) ? symbol.clone() : symbol;\r\n                }\r\n            }\r\n            return m;\r\n        },\r\n        // ported from Sylvester.js\r\n        invert: function () {\r\n            if(!this.isSquare())\r\n                err('Matrix is not square!');\r\n            return block('SAFE', function () {\r\n                var ni = this.elements.length, ki = ni, i, j;\r\n                var imatrix = Matrix.identity(ni);\r\n                var M = this.augment(imatrix).toRightTriangular();\r\n                var np, kp = M.elements[0].length, p, els, divisor;\r\n                var inverse_elements = [], new_element;\r\n                // Matrix is non-singular so there will be no zeros on the diagonal\r\n                // Cycle through rows from last to first\r\n                do {\r\n                    i = ni - 1;\r\n                    // First, normalise diagonal elements to 1\r\n                    els = [];\r\n                    np = kp;\r\n                    inverse_elements[i] = [];\r\n                    divisor = M.elements[i][i];\r\n                    do {\r\n                        p = kp - np;\r\n                        new_element = _.divide(M.elements[i][p], divisor.clone());\r\n                        els.push(new_element);\r\n                        // Shuffle of the current row of the right hand side into the results\r\n                        // array as it will not be modified by later runs through this loop\r\n                        if(p >= ki) {\r\n                            inverse_elements[i].push(new_element);\r\n                        }\r\n                    }\r\n                    while(--np);\r\n                    M.elements[i] = els;\r\n                    // Then, subtract this row from those above it to\r\n                    // give the identity matrix on the left hand side\r\n                    for(j = 0; j < i; j++) {\r\n                        els = [];\r\n                        np = kp;\r\n                        do {\r\n                            p = kp - np;\r\n                            els.push(_.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), M.elements[j][i].clone())));\r\n                        }\r\n                        while(--np);\r\n                        M.elements[j] = els;\r\n                    }\r\n                }\r\n                while(--ni);\r\n                return Matrix.fromArray(inverse_elements);\r\n            }, undefined, this);\r\n        },\r\n        // ported from Sylvester.js\r\n        toRightTriangular: function () {\r\n            return block('SAFE', function () {\r\n                var M = this.clone(), els, fel, nel,\r\n                        n = this.elements.length, k = n, i, np, kp = this.elements[0].length, p;\r\n                do {\r\n                    i = k - n;\r\n                    fel = M.elements[i][i];\r\n                    if(fel.valueOf() === 0) {\r\n                        for(var j = i + 1; j < k; j++) {\r\n                            nel = M.elements[j][i];\r\n                            if(nel && nel.valueOf() !== 0) {\r\n                                els = [];\r\n                                np = kp;\r\n                                do {\r\n                                    p = kp - np;\r\n                                    els.push(_.add(M.elements[i][p].clone(), M.elements[j][p].clone()));\r\n                                }\r\n                                while(--np);\r\n                                M.elements[i] = els;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    var fel = M.elements[i][i];\r\n                    if(fel.valueOf() !== 0) {\r\n                        for(j = i + 1; j < k; j++) {\r\n                            var multiplier = _.divide(M.elements[j][i].clone(), M.elements[i][i].clone());\r\n                            els = [];\r\n                            np = kp;\r\n                            do {\r\n                                p = kp - np;\r\n                                // Elements with column numbers up to an including the number\r\n                                // of the row that we're subtracting can safely be set straight to\r\n                                // zero, since that's the point of this routine and it avoids having\r\n                                // to loop over and correct rounding errors later\r\n                                els.push(p <= i ? new Symbol(0) :\r\n                                        _.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), multiplier.clone())));\r\n                            }\r\n                            while(--np);\r\n                            M.elements[j] = els;\r\n                        }\r\n                    }\r\n                }\r\n                while(--n);\r\n\r\n                return M;\r\n            }, undefined, this);\r\n        },\r\n        transpose: function () {\r\n            var rows = this.elements.length, cols = this.elements[0].length;\r\n            var M = new Matrix(), ni = cols, i, nj, j;\r\n\r\n            do {\r\n                i = cols - ni;\r\n                M.elements[i] = [];\r\n                nj = rows;\r\n                do {\r\n                    j = rows - nj;\r\n                    M.elements[i][j] = this.elements[j][i].clone();\r\n                }\r\n                while(--nj);\r\n            }\r\n            while(--ni);\r\n            return M;\r\n        },\r\n        // Returns true if the matrix can multiply the argument from the left\r\n        canMultiplyFromLeft: function (matrix) {\r\n            var l = isMatrix(matrix) ? matrix.elements.length : matrix.length;\r\n            // this.columns should equal matrix.rows\r\n            return (this.elements[0].length === l);\r\n        },\r\n        sameSize: function (matrix) {\r\n            return this.rows() === matrix.rows() && this.cols() === matrix.cols();\r\n        },\r\n        multiply: function (matrix) {\r\n            return block('SAFE', function () {\r\n                var M = matrix.elements || matrix;\r\n                if(!this.canMultiplyFromLeft(M)) {\r\n                    if(this.sameSize(matrix)) {\r\n                        var MM = new Matrix();\r\n                        var rows = this.rows();\r\n                        for(var i = 0; i < rows; i++) {\r\n                            var e = _.multiply(new Vector(this.elements[i]), new Vector(matrix.elements[i]));\r\n                            MM.elements[i] = e.elements;\r\n                        }\r\n                        return MM;\r\n                    }\r\n                    return null;\r\n                }\r\n                var ni = this.elements.length, ki = ni, i, nj, kj = M[0].length, j;\r\n                var cols = this.elements[0].length, elements = [], sum, nc, c;\r\n                do {\r\n                    i = ki - ni;\r\n                    elements[i] = [];\r\n                    nj = kj;\r\n                    do {\r\n                        j = kj - nj;\r\n                        sum = new Symbol(0);\r\n                        nc = cols;\r\n                        do {\r\n                            c = cols - nc;\r\n                            sum = _.add(sum, _.multiply(this.elements[i][c], M[c][j]));\r\n                        }\r\n                        while(--nc);\r\n                        elements[i][j] = sum;\r\n                    }\r\n                    while(--nj);\r\n                }\r\n                while(--ni);\r\n                return Matrix.fromArray(elements);\r\n            }, undefined, this);\r\n        },\r\n        add: function (matrix, callback) {\r\n            var M = new Matrix();\r\n            if(this.sameSize(matrix)) {\r\n                this.eachElement(function (e, i, j) {\r\n                    var result = _.add(e.clone(), matrix.elements[i][j].clone());\r\n                    if(callback) {\r\n                        result = callback.call(M, result, e, matrix.elements[i][j]);\r\n                    }\r\n                    M.set(i, j, result);\r\n                });\r\n            }\r\n            return M;\r\n        },\r\n        subtract: function (matrix, callback) {\r\n            var M = new Matrix();\r\n            if(this.sameSize(matrix)) {\r\n                this.eachElement(function (e, i, j) {\r\n                    var result = _.subtract(e.clone(), matrix.elements[i][j].clone());\r\n                    if(callback) {\r\n                        result = callback.call(M, result, e, matrix.elements[i][j]);\r\n                    }\r\n                    M.set(i, j, result);\r\n                });\r\n            }\r\n            return M;\r\n        },\r\n        negate: function () {\r\n            this.each(function (e) {\r\n                return e.negate();\r\n            });\r\n            return this;\r\n        },\r\n        toVector: function () {\r\n            if(this.rows() === 1 || this.cols() === 1) {\r\n                var v = new Vector();\r\n                v.elements = this.elements;\r\n                return v;\r\n            }\r\n            return this;\r\n        },\r\n        toString: function (newline, to_decimal) {\r\n            var l = this.rows(),\r\n                    s = [];\r\n            newline = newline === undefined ? '\\n' : newline;\r\n            for(var i = 0; i < l; i++) {\r\n                s.push('[' + this.elements[i].map(function (x) {\r\n                    var v = to_decimal ? x.multiplier.toDecimal() : x.toString();\r\n                    return x !== undefined ? v : '';\r\n                }).join(',') + ']');\r\n            }\r\n            return 'matrix' + inBrackets(s.join(','));\r\n        },\r\n        text: function () {\r\n            return 'matrix(' + this.elements.toString('') + ')';\r\n        },\r\n        latex: function (option) {\r\n            var cols = this.cols(), elements = this.elements;\r\n            return format('\\\\begin{vmatrix}{0}\\\\end{vmatrix}', function () {\r\n                var tex = [];\r\n                for(var row in elements) {\r\n                    var row_tex = [];\r\n                    for(var i = 0; i < cols; i++) {\r\n                        row_tex.push(LaTeX.latex.call(LaTeX, elements[row][i], option));\r\n                    }\r\n                    tex.push(row_tex.join(' & '));\r\n                }\r\n                return tex.join(' \\\\cr ');\r\n            });\r\n        }\r\n    };\r\n    // aliases\r\n    Matrix.prototype.each = Matrix.prototype.eachElement;\r\n\r\n\r\n    function Set(set) {\r\n        this.elements = [];\r\n        // if the first object isn't an array, convert it to one.\r\n        if(!isVector(set))\r\n            set = Vector.fromArray(arguments);\r\n\r\n        if(set) {\r\n            var elements = set.elements;\r\n            for(var i = 0, l = elements.length; i < l; i++) {\r\n                this.add(elements[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    Set.fromArray = function (arr) {\r\n        function F(args) {\r\n            return Set.apply(this, args);\r\n        }\r\n        F.prototype = Set.prototype;\r\n\r\n        return new F(arr);\r\n    };\r\n\r\n    Set.prototype = {\r\n        add: function (x) {\r\n            if(!this.contains(x))\r\n                this.elements.push(x.clone());\r\n        },\r\n        contains: function (x) {\r\n            for(var i = 0; i < this.elements.length; i++) {\r\n                var e = this.elements[i];\r\n                if(x.equals(e))\r\n                    return true;\r\n            }\r\n            return false;\r\n        },\r\n        each: function (f) {\r\n            var elements = this.elements;\r\n            var set = new Set();\r\n            for(var i = 0, l = elements.length; i < l; i++) {\r\n                var e = elements[i];\r\n                f.call(this, e, set, i);\r\n            }\r\n            return set;\r\n        },\r\n        clone: function () {\r\n            var set = new Set();\r\n            this.each(function (e) {\r\n                set.add(e.clone());\r\n            });\r\n            return set;\r\n        },\r\n        union: function (set) {\r\n            var _union = this.clone();\r\n            set.each(function (e) {\r\n                _union.add(e);\r\n            });\r\n\r\n            return _union;\r\n        },\r\n        difference: function (set) {\r\n            var diff = this.clone();\r\n            set.each(function (e) {\r\n                diff.remove(e);\r\n            });\r\n            return diff;\r\n        },\r\n        remove: function (element) {\r\n            for(var i = 0, l = this.elements.length; i < l; i++) {\r\n                var e = this.elements[i];\r\n                if(e.equals(element)) {\r\n                    remove(this.elements, i);\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        intersection: function (set) {\r\n            var _intersection = new Set();\r\n            var A = this;\r\n            set.each(function (e) {\r\n                if(A.contains(e)) {\r\n                    _intersection.add(e);\r\n                }\r\n                ;\r\n            });\r\n\r\n            return _intersection;\r\n        },\r\n        intersects: function (set) {\r\n            return this.intersection(set).elements.length > 0;\r\n        },\r\n        is_subset: function (set) {\r\n            var elements = set.elements;\r\n            for(var i = 0, l = elements.length; i < l; i++) {\r\n                if(!this.contains(elements[i])) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        },\r\n        toString: function () {\r\n            return '{' + this.elements.join(',') + '}';\r\n        }\r\n    };\r\n\r\n//build ========================================================================\r\n    var Build = {\r\n        dependencies: {\r\n            _rename: {\r\n                'Math2.factorial': 'factorial'\r\n            },\r\n            factorial: {\r\n                'Math2.gamma': Math2.gamma\r\n            },\r\n            gamma_incomplete: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Li: {\r\n                'Math2.Ei': Math2.Ei,\r\n                'Math2.bigLog': Math2.bigLog,\r\n                'Frac': Frac\r\n            },\r\n            Ci: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Ei: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Si: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Shi: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Chi: {\r\n                'isInt': isInt,\r\n                'nround': nround,\r\n                'Math2.num_integrate': Math2.num_integrate\r\n            },\r\n            factor: {\r\n                'Math2.ifactor': Math2.ifactor,\r\n                'Symbol': Symbol\r\n            },\r\n            num_integrate: {\r\n                'Math2.simpson': Math2.simpson,\r\n                'nround': nround\r\n            },\r\n            fib: {\r\n                'even': even\r\n            }\r\n        },\r\n        /* Some functions need to be made numeric safe. Build checks if there's a\r\n         * reformat option and calls that instead when compiling the function string.\r\n         */\r\n        reformat: {\r\n            // this simply extends the build function\r\n            diff: function (symbol, deps) {\r\n                var v = symbol.args[1].toString();\r\n                var f = 'var f = ' + Build.build(symbol.args[0].toString(), [v]) + ';';\r\n                deps[1] += 'var diff = ' + Math2.diff.toString() + ';';\r\n                deps[1] += f;\r\n\r\n                return ['diff(f)(' + v + ')', deps];\r\n            }\r\n        },\r\n        getProperName: function (f) {\r\n            var map = {\r\n                continued_fraction: 'continuedFraction'\r\n            };\r\n            return map[f] || f;\r\n        },\r\n        // assumes that dependences are at max 2 levels\r\n        compileDependencies: function (f, deps) {\r\n            // grab the predefined dependiences\r\n            var dependencies = Build.dependencies[f];\r\n\r\n            // the dependency string\r\n            var dep_string = deps && deps[1] ? deps[1] : '';\r\n\r\n            // the functions to be replaced\r\n            var replacements = deps && deps[0] ? deps[0] : {};\r\n\r\n            // loop through them and add them to the list\r\n            for(var x in dependencies) {\r\n                if(typeof dependencies[x] === 'object')\r\n                    continue; // skip object\r\n                var components = x.split('.'); //Math.f becomes f\r\n                // if the function isn't part of an object then reference the function itself\r\n                dep_string += 'var ' + (components.length > 1 ? components[1] : components[0]) + '=' + dependencies[x] + ';';\r\n                replacements[x] = components.pop();\r\n            }\r\n\r\n            return [replacements, dep_string];\r\n        },\r\n        getArgsDeps: function (symbol, dependencies) {\r\n            var args = symbol.args;\r\n            for(var i = 0; i < args.length; i++) {\r\n                symbol.args[i].each(function (x) {\r\n                    if(x.group === FN)\r\n                        dependencies = Build.compileDependencies(x.fname, dependencies);\r\n                });\r\n            }\r\n            return dependencies;\r\n        },\r\n        build: function (symbol, arg_array) {\r\n            symbol = block('PARSE2NUMBER', function () {\r\n                return _.parse(symbol);\r\n            }, true);\r\n            var args = variables(symbol);\r\n            var supplements = [];\r\n            var dependencies = [];\r\n            var ftext = function (symbol, xports) {\r\n                //Fix for #545 - Parentheses confuse build.\r\n                if(symbol.fname === '') {\r\n                    symbol = Symbol.unwrapPARENS(symbol);\r\n                }\r\n                xports = xports || [];\r\n                var c = [],\r\n                        group = symbol.group,\r\n                        prefix = '';\r\n\r\n                var ftext_complex = function (group) {\r\n                    var d = group === CB ? '*' : '+',\r\n                            cc = [];\r\n\r\n                    for(var x in symbol.symbols) {\r\n                        var sym = symbol.symbols[x],\r\n                                ft = ftext(sym, xports)[0];\r\n                        // wrap it in brackets if it's group PL or CP\r\n                        if(sym.isComposite())\r\n                            ft = inBrackets(ft);\r\n                        cc.push(ft);\r\n                    }\r\n                    var retval = cc.join(d);\r\n                    retval = retval && !symbol.multiplier.equals(1) ? inBrackets(retval) : retval;\r\n                    return retval;\r\n                },\r\n                        ftext_function = function (bn) {\r\n                            var retval;\r\n                            if(bn in Math)\r\n                                retval = 'Math.' + bn;\r\n                            else {\r\n                                bn = Build.getProperName(bn);\r\n                                if(supplements.indexOf(bn) === -1) { // make sure you're not adding the function twice\r\n                                    //Math2 functions aren't part of the standard javascript\r\n                                    //Math library and must be exported.\r\n                                    xports.push('var ' + bn + ' = ' + Math2[bn].toString() + '; ');\r\n                                    supplements.push(bn);\r\n                                }\r\n                                retval = bn;\r\n                            }\r\n                            retval = retval + inBrackets(symbol.args.map(function (x) {\r\n                                return ftext(x, xports)[0];\r\n                            }).join(','));\r\n\r\n                            return retval;\r\n                        };\r\n\r\n                // the multiplier\r\n                if(group === N)\r\n                    c.push(symbol.multiplier.toDecimal());\r\n                else if(symbol.multiplier.equals(-1))\r\n                    prefix = '-';\r\n                else if(!symbol.multiplier.equals(1))\r\n                    c.push(symbol.multiplier.toDecimal());\r\n                // the value\r\n                var value;\r\n\r\n                if(group === S || group === P)\r\n                    value = symbol.value;\r\n                else if(group === FN) {\r\n                    dependencies = Build.compileDependencies(symbol.fname, dependencies);\r\n                    dependencies = Build.getArgsDeps(symbol, dependencies);\r\n                    if(Build.reformat[symbol.fname]) {\r\n                        var components = Build.reformat[symbol.fname](symbol, dependencies);\r\n                        dependencies = components[1];\r\n                        value = components[0];\r\n                    }\r\n                    else {\r\n                        value = ftext_function(symbol.fname);\r\n                    }\r\n\r\n                }\r\n                else if(group === EX) {\r\n                    var pg = symbol.previousGroup;\r\n                    if(pg === N || pg === S)\r\n                        value = symbol.value;\r\n                    else if(pg === FN) {\r\n                        value = ftext_function(symbol.fname);\r\n                        dependencies = Build.compileDependencies(symbol.fname, dependencies);\r\n                        dependencies = Build.getArgsDeps(symbol, dependencies);\r\n                    }\r\n                    else\r\n                        value = ftext_complex(symbol.previousGroup);\r\n                }\r\n                else {\r\n                    value = ftext_complex(symbol.group);\r\n                }\r\n\r\n                if(symbol.group !== N && !symbol.power.equals(1)) {\r\n                    var pow = ftext(_.parse(symbol.power));\r\n                    xports.push(pow[1]);\r\n                    value = 'Math.pow' + inBrackets(value + ',' + pow[0]);\r\n                }\r\n\r\n                if(value)\r\n                    c.push(prefix + value);\r\n\r\n                return [c.join('*'), xports.join('').replace(/\\n+\\s+/g, ' ')];\r\n            };\r\n            if(arg_array) {\r\n                // Fix for issue #546\r\n                // Disable argument checking since it's a bit presumptuous.\r\n                // Consider f(x) = 5; If I explicitely pass in an argument array contain x \r\n                // this check will fail and complain since the function doesn't contain x.\r\n                /*\r\n                 for (var i = 0; i < args.length; i++) {\r\n                 var arg = args[i];\r\n                 if (arg_array.indexOf(arg) === -1)\r\n                 err(arg + ' not found in argument array');\r\n                 }\r\n                 */\r\n                args = arg_array;\r\n            }\r\n\r\n            var f_array = ftext(symbol);\r\n\r\n            // make all the substitutions;\r\n            for(var x in dependencies[0]) {\r\n                var alias = dependencies[0][x];\r\n                f_array[1] = f_array[1].replace(x, alias);\r\n                dependencies[1] = dependencies[1].replace(x, alias);\r\n            }\r\n\r\n            var f = new Function(args, (dependencies[1] || '') + f_array[1] + ' return ' + f_array[0] + ';');\r\n\r\n            return f;\r\n        }\r\n    };\r\n\r\n\r\n//finalize =====================================================================\r\n    /* FINALIZE */\r\n    (function () {\r\n        reserveNames(_.CONSTANTS);\r\n        reserveNames(_.functions);\r\n        _.initConstants();\r\n        //bug fix for error but needs to be revisited\r\n        if(!_.error)\r\n            _.error = err;\r\n\r\n        //Store the log and log10 functions\r\n        Settings.LOG_FNS = {\r\n            log: _.functions['log'],\r\n            log10: _.functions['log10']\r\n        };\r\n\r\n    })();\r\n\r\n    /* END FINALIZE */\r\n\r\n//Core =========================================================================\r\n    var Utils = {\r\n        allSame: allSame,\r\n        allNumeric: allNumeric,\r\n        arguments2Array: arguments2Array,\r\n        arrayAddSlices: arrayAddSlices,\r\n        arrayClone: arrayClone,\r\n        arrayMax: arrayMax,\r\n        arrayMin: arrayMin,\r\n        arrayEqual: arrayEqual,\r\n        arrayUnique: arrayUnique,\r\n        arrayGetVariables: arrayGetVariables,\r\n        arraySum: arraySum,\r\n        block: block,\r\n        build: Build.build,\r\n        clearU: clearU,\r\n        comboSort: comboSort,\r\n        compare: compare,\r\n        convertToVector: convertToVector,\r\n        customError: customError,\r\n        customType: customType,\r\n        decompose_fn: decompose_fn,\r\n        each: each,\r\n        evaluate: evaluate,\r\n        even: even,\r\n        evenFraction: evenFraction,\r\n        fillHoles: fillHoles,\r\n        firstObject: firstObject,\r\n        format: format,\r\n        generatePrimes: generatePrimes,\r\n        getCoeffs: getCoeffs,\r\n        getU: getU,\r\n        importFunctions: importFunctions,\r\n        inBrackets: inBrackets,\r\n        isArray: isArray,\r\n        isExpression: isExpression,\r\n        isFraction: isFraction,\r\n        isInt: isInt,\r\n        isMatrix: isMatrix,\r\n        isNegative: isNegative,\r\n        isNumericSymbol: isNumericSymbol,\r\n        isPrime: isPrime,\r\n        isReserved: isReserved,\r\n        isSymbol: isSymbol,\r\n        isVariableSymbol: isVariableSymbol,\r\n        isVector: isVector,\r\n        keys: keys,\r\n        knownVariable: knownVariable,\r\n        nroots: nroots,\r\n        remove: remove,\r\n        reserveNames: reserveNames,\r\n        range: range,\r\n        round: nround,\r\n        sameSign: sameSign,\r\n        scientificToDecimal: scientificToDecimal,\r\n        separate: separate,\r\n        stringReplace: stringReplace,\r\n        text: text,\r\n        validateName: validateName,\r\n        variables: variables,\r\n        warn: warn\r\n    };\r\n\r\n    //This contains all the parts of nerdamer and enables nerdamer's internal functions\r\n    //to be used.\r\n    var C = {\r\n        groups: Groups,\r\n        Symbol: Symbol,\r\n        Expression: Expression,\r\n        Frac: Frac,\r\n        Vector: Vector,\r\n        Matrix: Matrix,\r\n        Parser: Parser,\r\n        Scientific: Scientific,\r\n        Fraction: Fraction,\r\n        Math2: Math2,\r\n        LaTeX: LaTeX,\r\n        Utils: Utils,\r\n        PARSER: _,\r\n        PARENTHESIS: PARENTHESIS,\r\n        Settings: Settings,\r\n        err: err,\r\n        bigInt: bigInt,\r\n        bigDec: bigDec,\r\n        exceptions: exceptions\r\n    };\r\n\r\n//libExports ===================================================================\r\n    /**\r\n     *\r\n     * @param {String} expression the expression to be evaluated\r\n     * @param {Object} subs the object containing the variable values\r\n     * @param {Integer} location a specific location in the equation list to\r\n     * insert the evaluated expression\r\n     * @param {String} option additional options\r\n     * @returns {Expression}\r\n     */\r\n    var libExports = function (expression, subs, option, location) {\r\n        // Initiate the numer flag\r\n        var numer = false;\r\n\r\n        // Is the user declaring a function?\r\n        var fndec = /^([a-z_][a-z\\d\\_]*)\\(([a-z_,\\s]*)\\):=(.+)$/gi.exec(expression);\r\n        if(fndec)\r\n            return nerdamer.setFunction(fndec[1], fndec[2].split(','), fndec[3]);\r\n\r\n        // var variable, fn, args;\r\n        // Convert any expression passed in to a string\r\n        if(expression instanceof Expression)\r\n            expression = expression.toString();\r\n\r\n        // Convert it to an array for simplicity\r\n        if(!isArray(option)) {\r\n            option = typeof option === 'undefined' ? [] : [option];\r\n        }\r\n\r\n        option.forEach(function (o) {\r\n            // Turn on the numer flag if requested\r\n            if(o === 'numer') {\r\n                numer = true;\r\n                return;\r\n            }\r\n            // Wrap it in a function if requested. This only holds true for\r\n            // functions that take a single argument which is the expression\r\n            var f = _.functions[option];\r\n            // If there's a function and it takes a single argument, then wrap\r\n            // the expression in it\r\n            if(f && f[1] === 1) {\r\n                expression = `${o}(${expression})`;\r\n            }\r\n        });\r\n\r\n        var e = block('PARSE2NUMBER', function () {\r\n            return _.parse(expression, subs);\r\n        }, numer || Settings.PARSE2NUMBER);\r\n\r\n        if(location) {\r\n            EXPRESSIONS[location - 1] = e;\r\n        }\r\n        else {\r\n            EXPRESSIONS.push(e);\r\n        }\r\n\r\n        return new Expression(e);\r\n    };\r\n    /**\r\n     * Converts expression into rpn form\r\n     * @param {String} expression\r\n     * @returns {Token[]}\r\n     */\r\n    libExports.rpn = function (expression) {\r\n        return _.tokenize(_.toRPN(expression));\r\n    };\r\n\r\n    /**\r\n     * Generates LaTeX from expression string\r\n     * @param {String} e\r\n     * @param {object} opt\r\n     * @returns {String}\r\n     */\r\n    libExports.convertToLaTeX = function (e, opt) {\r\n        return _.toTeX(e, opt);\r\n    };\r\n\r\n    /**\r\n     * Converts latex to text - Very very very basic at the moment\r\n     * @param {String} e\r\n     * @returns {String}\r\n     */\r\n    libExports.convertFromLaTeX = function (e) {\r\n        var txt = LaTeX.parse(_.tokenize(e));\r\n        return new Expression(_.parse(txt));\r\n    };\r\n\r\n    /**\r\n     * Get the version of nerdamer or a loaded add-on\r\n     * @param {String} add_on - The add-on being checked\r\n     * @returns {String} returns the version of nerdamer\r\n     */\r\n    libExports.version = function (add_on) {\r\n        if(add_on) {\r\n            try {\r\n                return C[add_on].version;\r\n            }\r\n            catch(e) {\r\n                return \"No module named \" + add_on + \" found!\";\r\n            }\r\n        }\r\n        return version;\r\n    };\r\n\r\n    /**\r\n     * Get nerdamer generated warnings\r\n     * @returns {String[]}\r\n     */\r\n    libExports.getWarnings = function () {\r\n        return WARNINGS;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {String} constant The name of the constant to be set\r\n     * @param {mixed} value The value of the constant\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.setConstant = function (constant, value) {\r\n        validateName(constant);\r\n        if(!isReserved(constant)) {\r\n            //fix for issue #127\r\n            if(value === 'delete' || value === '') {\r\n                delete _.CONSTANTS[constant];\r\n            }\r\n            else {\r\n                if(isNaN(value))\r\n                    throw new NerdamerTypeError('Constant must be a number!');\r\n                _.CONSTANTS[constant] = value;\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Returns the value of a previously set constant\r\n     * @param {type} constant\r\n     * @returns {String}\r\n     */\r\n    libExports.getConstant = function (constant) {\r\n        return String(_.constant[constant]);\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {String} name The name of the function\r\n     * @param {Array} params_array A list containing the parameter name of the functions\r\n     * @param {String} body The body of the function\r\n     * @returns {Boolean} returns true if succeeded and falls on fail\r\n     * @example nerdamer.setFunction('f',['x'], 'x^2+2');\r\n     */\r\n    libExports.setFunction = setFunction;\r\n\r\n    /**\r\n     *\r\n     * @returns {C} Exports the nerdamer core functions and objects\r\n     */\r\n    libExports.getCore = function () {\r\n        return C;\r\n    };\r\n\r\n    libExports.getExpression = libExports.getEquation = Expression.getExpression;\r\n\r\n    /**\r\n     *\r\n     * @param {Boolean} asArray The returned names are returned as an array if this is set to true;\r\n     * @returns {String|Array}\r\n     */\r\n    libExports.reserved = function (asArray) {\r\n        if(asArray) {\r\n            return RESERVED;\r\n        }\r\n        return RESERVED.join(', ');\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {Integer} equation_number the number of the equation to clear.\r\n     * If 'all' is supplied then all equations are cleared\r\n     * @param {Boolean} keep_EXPRESSIONS_fixed use true if you don't want to keep EXPRESSIONS length fixed\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.clear = function (equation_number, keep_EXPRESSIONS_fixed) {\r\n        if(equation_number === 'all') {\r\n            EXPRESSIONS = [];\r\n        }\r\n        else if(equation_number === 'last') {\r\n            EXPRESSIONS.pop();\r\n        }\r\n        else if(equation_number === 'first') {\r\n            EXPRESSIONS.shift();\r\n        }\r\n        else {\r\n            var index = !equation_number ? EXPRESSIONS.length : equation_number - 1;\r\n            keep_EXPRESSIONS_fixed === true ? EXPRESSIONS[index] = undefined : remove(EXPRESSIONS, index);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Alias for nerdamer.clear('all')\r\n     */\r\n    libExports.flush = function () {\r\n        this.clear('all');\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {Boolean} asObject\r\n     * @param {Boolean} asLaTeX\r\n     * @param {String|String[]} option\r\n     * @returns {Array}\r\n     */\r\n    libExports.expressions = function (asObject, asLaTeX, option) {\r\n        var result = asObject ? {} : [];\r\n        for(var i = 0; i < EXPRESSIONS.length; i++) {\r\n            var eq = asLaTeX ? LaTeX.latex(EXPRESSIONS[i], option) : text(EXPRESSIONS[i], option);\r\n            asObject ? result[i + 1] = eq : result.push(eq);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    //the method for registering modules\r\n    libExports.register = function (obj) {\r\n        var core = this.getCore();\r\n\r\n        if(isArray(obj)) {\r\n            for(var i = 0; i < obj.length; i++) {\r\n                if(obj)\r\n                    this.register(obj[i]);\r\n            }\r\n        }\r\n        else if(obj && Settings.exclude.indexOf(obj.name) === -1) {\r\n            //make sure all the dependencies are available\r\n            if(obj.dependencies) {\r\n                for(var i = 0; i < obj.dependencies.length; i++)\r\n                    if(!core[obj.dependencies[i]])\r\n                        throw new Error(format('{0} requires {1} to be loaded!', obj.name, obj.dependencies[i]));\r\n            }\r\n            //if no parent object is provided then the function does not have an address and cannot be called directly\r\n            var parent_obj = obj.parent,\r\n                    fn = obj.build.call(core); //call constructor to get function\r\n            if(parent_obj) {\r\n                if(!core[parent_obj])\r\n                    core[obj.parent] = {};\r\n\r\n                var ref_obj = parent_obj === 'nerdamer' ? this : core[parent_obj];\r\n                //attach the function to the core\r\n                ref_obj[obj.name] = fn;\r\n            }\r\n            if(obj.visible)\r\n                _.functions[obj.name] = [fn, obj.numargs]; //make the function available\r\n\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param {String} name variable name\r\n     * @returns {boolean} validates if the profided string is a valid variable name\r\n     */\r\n    libExports.validateName = validateName;\r\n\r\n    /**\r\n     * @param {String} varname variable name\r\n     * @returns {boolean} validates if the profided string is a valid variable name\r\n     */\r\n    libExports.validVarName = function (varname) {\r\n        try {\r\n            validateName(varname);\r\n            return RESERVED.indexOf(varname) === -1;\r\n        }\r\n        catch(e) {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @returns {Array} Array of functions currently supported by nerdamer\r\n     */\r\n    libExports.supported = function () {\r\n        return keys(_.functions);\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @returns {Number} The number equations/expressions currently loaded\r\n     */\r\n    libExports.numEquations = libExports.numExpressions = function () {\r\n        return EXPRESSIONS.length;\r\n    };\r\n    /* END EXPORTS */\r\n\r\n    /**\r\n     *\r\n     * @param {String} v variable to be set\r\n     * @param {String} val value of variable. This can be a variable expression or number\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.setVar = function (v, val) {\r\n        validateName(v);\r\n        //check if it's not already a constant\r\n        if(v in _.CONSTANTS)\r\n            err('Cannot set value for constant ' + v);\r\n        if(val === 'delete' || val === '')\r\n            delete VARS[v];\r\n        else {\r\n            VARS[v] = isSymbol(val) ? val : _.parse(val);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Returns the value of a set variable\r\n     * @param {type} v\r\n     * @returns {varies}\r\n     */\r\n    libExports.getVar = function (v) {\r\n        return VARS[v];\r\n    };\r\n    /**\r\n     * Clear the variables from the VARS object\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.clearVars = function () {\r\n        VARS = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {Function} loader\r\n     * @returns {nerdamer}\r\n     */\r\n    libExports.load = function (loader) {\r\n        loader.call(this);\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * @param {String} output - output format. Can be 'object' (just returns the VARS object), 'text' or 'latex'. Default: 'text'\r\n     * @param {String|String[]} option\r\n     * @returns {Object} Returns an object with the variables\r\n     */\r\n    libExports.getVars = function (output, option) {\r\n        output = output || 'text';\r\n        var variables = {};\r\n        if(output === 'object')\r\n            variables = VARS;\r\n        else {\r\n            for(var v in VARS) {\r\n                if(output === 'latex') {\r\n                    variables[v] = VARS[v].latex(option);\r\n                }\r\n                else if(output === 'text') {\r\n                    variables[v] = VARS[v].text(option);\r\n                }\r\n            }\r\n        }\r\n        return variables;\r\n    };\r\n\r\n    /**\r\n     * Set the value of a setting\r\n     * @param {String} setting The setting to be changed\r\n     * @param {boolean} value\r\n     */\r\n    libExports.set = function (setting, value) {\r\n        //current options:\r\n        //PARSE2NUMBER, suppress_errors\r\n        if(typeof setting === 'object')\r\n            for(var x in setting) {\r\n                libExports.set(x, setting[x]);\r\n            }\r\n\r\n        var disallowed = ['SAFE'];\r\n        if(disallowed.indexOf(setting) !== -1)\r\n            err('Cannot modify setting: ' + setting);\r\n\r\n        if(setting === 'PRECISION') {\r\n            bigDec.set({precision: value});\r\n            Settings.PRECISION = value;\r\n\r\n            // Avoid that nerdamer puts out garbage after 21 decimal place\r\n            if(value > 21) {\r\n                this.set('USE_BIG', true);\r\n            }\r\n        }\r\n        else if(setting === 'USE_LN' && value === true) {\r\n            //set log as LN\r\n            Settings.LOG = 'LN';\r\n            //set log10 as log\r\n            Settings.LOG10 = 'log';\r\n            //point the functions in the right direction\r\n            _.functions['log'] = Settings.LOG_FNS.log10; //log is now log10\r\n            //the log10 function must be explicitly set\r\n            _.functions['log'][0] = function (x) {\r\n                if(x.isConstant())\r\n                    return new Symbol(Math.log10(x));\r\n                return _.symfunction(Settings.LOG10, [x]);\r\n            };\r\n            _.functions['LN'] = Settings.LOG_FNS.log; //LN is now log\r\n\r\n            //remove log10\r\n            delete _.functions['log10'];\r\n        }\r\n        else\r\n            Settings[setting] = value;\r\n    };\r\n\r\n    /**\r\n     * Get the value of a setting\r\n     * @param {type} setting\r\n     * @returns {undefined}\r\n     */\r\n    libExports.get = function (setting) {\r\n        return Settings[setting];\r\n    };\r\n\r\n    /**\r\n     * This functions makes internal functions available externally\r\n     * @param {bool} override Override the functions when calling updateAPI if it exists\r\n     */\r\n    libExports.updateAPI = function (override) {\r\n        //Map internal functions to external ones\r\n        var linker = function (fname) {\r\n            return function () {\r\n                var args = [].slice.call(arguments);\r\n                for(var i = 0; i < args.length; i++)\r\n                    args[i] = _.parse(args[i]);\r\n                return new Expression(block('PARSE2NUMBER', function () {\r\n                    return _.callfunction(fname, args);\r\n                }));\r\n            };\r\n        };\r\n        //perform the mapping\r\n        for(var x in _.functions)\r\n            if(!(x in libExports) || override)\r\n                libExports[x] = linker(x);\r\n    };\r\n\r\n    libExports.replaceFunction = function (name, fn, num_args) {\r\n        var existing = _.functions[name];\r\n        var new_num_args = typeof num_args === 'undefined' ? existing[1] : num_args;\r\n        _.functions[name] = [fn.call(undefined, existing[0], C), new_num_args];\r\n    };\r\n\r\n    libExports.setOperator = function (operator, shift) {\r\n        _.setOperator(operator, shift);\r\n    };\r\n\r\n    libExports.getOperator = function (operator) {\r\n        return _.getOperator(operator);\r\n    };\r\n\r\n    libExports.aliasOperator = function (operator, withOperator) {\r\n        _.aliasOperator(operator, withOperator);\r\n    };\r\n\r\n    libExports.tree = function (expression) {\r\n        return _.tree(_.toRPN(_.tokenize(expression)));\r\n    };\r\n\r\n    libExports.htmlTree = function (expression, indent) {\r\n        var tree = this.tree(expression);\r\n\r\n        return '<div class=\"tree\">\\n' +\r\n                '    <ul>\\n' +\r\n                '        <li>\\n' +\r\n                tree.toHTML(3, indent) + '\\n' +\r\n                '        </li>\\n' +\r\n                '    </ul>\\n' +\r\n                '</div>';\r\n    };\r\n\r\n    libExports.addPeeker = function (name, f) {\r\n        if(_.peekers[name])\r\n            _.peekers[name].push(f);\r\n    };\r\n\r\n    libExports.removePeeker = function (name, f) {\r\n        remove(_.peekers[name], f);\r\n    };\r\n\r\n    libExports.parse = function (e) {\r\n        return String(e).split(';').map(function (x) {\r\n            return _.parse(x);\r\n        });\r\n    };\r\n\r\n    libExports.updateAPI();\r\n\r\n    return libExports; //Done\r\n//imports ======================================================================\r\n})({\r\n    //https://github.com/peterolson/BigInteger.js\r\n    bigInt: (function(){\r\n        var bigInt=function(undefined){\"use strict\";var BASE=1e7,LOG_BASE=7,MAX_INT=9007199254740992,MAX_INT_ARR=smallToArray(MAX_INT),LOG_MAX_INT=Math.log(MAX_INT);function Integer(v,radix){if(typeof v===\"undefined\")return Integer[0];if(typeof radix!==\"undefined\")return+radix===10?parseValue(v):parseBase(v,radix);return parseValue(v)}function BigInteger(value,sign){this.value=value;this.sign=sign;this.isSmall=false}BigInteger.prototype=Object.create(Integer.prototype);function SmallInteger(value){this.value=value;this.sign=value<0;this.isSmall=true}SmallInteger.prototype=Object.create(Integer.prototype);function isPrecise(n){return-MAX_INT<n&&n<MAX_INT}function smallToArray(n){if(n<1e7)return[n];if(n<1e14)return[n%1e7,Math.floor(n/1e7)];return[n%1e7,Math.floor(n/1e7)%1e7,Math.floor(n/1e14)]}function arrayToSmall(arr){trim(arr);var length=arr.length;if(length<4&&compareAbs(arr,MAX_INT_ARR)<0){switch(length){case 0:return 0;case 1:return arr[0];case 2:return arr[0]+arr[1]*BASE;default:return arr[0]+(arr[1]+arr[2]*BASE)*BASE}}return arr}function trim(v){var i=v.length;while(v[--i]===0);v.length=i+1}function createArray(length){var x=new Array(length);var i=-1;while(++i<length){x[i]=0}return x}function truncate(n){if(n>0)return Math.floor(n);return Math.ceil(n)}function add(a,b){var l_a=a.length,l_b=b.length,r=new Array(l_a),carry=0,base=BASE,sum,i;for(i=0;i<l_b;i++){sum=a[i]+b[i]+carry;carry=sum>=base?1:0;r[i]=sum-carry*base}while(i<l_a){sum=a[i]+carry;carry=sum===base?1:0;r[i++]=sum-carry*base}if(carry>0)r.push(carry);return r}function addAny(a,b){if(a.length>=b.length)return add(a,b);return add(b,a)}function addSmall(a,carry){var l=a.length,r=new Array(l),base=BASE,sum,i;for(i=0;i<l;i++){sum=a[i]-base+carry;carry=Math.floor(sum/base);r[i]=sum-carry*base;carry+=1}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base)}return r}BigInteger.prototype.add=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.subtract(n.negate())}var a=this.value,b=n.value;if(n.isSmall){return new BigInteger(addSmall(a,Math.abs(b)),this.sign)}return new BigInteger(addAny(a,b),this.sign)};BigInteger.prototype.plus=BigInteger.prototype.add;SmallInteger.prototype.add=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.subtract(n.negate())}var b=n.value;if(n.isSmall){if(isPrecise(a+b))return new SmallInteger(a+b);b=smallToArray(Math.abs(b))}return new BigInteger(addSmall(b,Math.abs(a)),a<0)};SmallInteger.prototype.plus=SmallInteger.prototype.add;function subtract(a,b){var a_l=a.length,b_l=b.length,r=new Array(a_l),borrow=0,base=BASE,i,difference;for(i=0;i<b_l;i++){difference=a[i]-borrow-b[i];if(difference<0){difference+=base;borrow=1}else borrow=0;r[i]=difference}for(i=b_l;i<a_l;i++){difference=a[i]-borrow;if(difference<0)difference+=base;else{r[i++]=difference;break}r[i]=difference}for(;i<a_l;i++){r[i]=a[i]}trim(r);return r}function subtractAny(a,b,sign){var value;if(compareAbs(a,b)>=0){value=subtract(a,b)}else{value=subtract(b,a);sign=!sign}value=arrayToSmall(value);if(typeof value===\"number\"){if(sign)value=-value;return new SmallInteger(value)}return new BigInteger(value,sign)}function subtractSmall(a,b,sign){var l=a.length,r=new Array(l),carry=-b,base=BASE,i,difference;for(i=0;i<l;i++){difference=a[i]+carry;carry=Math.floor(difference/base);difference%=base;r[i]=difference<0?difference+base:difference}r=arrayToSmall(r);if(typeof r===\"number\"){if(sign)r=-r;return new SmallInteger(r)}return new BigInteger(r,sign)}BigInteger.prototype.subtract=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.add(n.negate())}var a=this.value,b=n.value;if(n.isSmall)return subtractSmall(a,Math.abs(b),this.sign);return subtractAny(a,b,this.sign)};BigInteger.prototype.minus=BigInteger.prototype.subtract;SmallInteger.prototype.subtract=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.add(n.negate())}var b=n.value;if(n.isSmall){return new SmallInteger(a-b)}return subtractSmall(b,Math.abs(a),a>=0)};SmallInteger.prototype.minus=SmallInteger.prototype.subtract;BigInteger.prototype.negate=function(){return new BigInteger(this.value,!this.sign)};SmallInteger.prototype.negate=function(){var sign=this.sign;var small=new SmallInteger(-this.value);small.sign=!sign;return small};BigInteger.prototype.abs=function(){return new BigInteger(this.value,false)};SmallInteger.prototype.abs=function(){return new SmallInteger(Math.abs(this.value))};function multiplyLong(a,b){var a_l=a.length,b_l=b.length,l=a_l+b_l,r=createArray(l),base=BASE,product,carry,i,a_i,b_j;for(i=0;i<a_l;++i){a_i=a[i];for(var j=0;j<b_l;++j){b_j=b[j];product=a_i*b_j+r[i+j];carry=Math.floor(product/base);r[i+j]=product-carry*base;r[i+j+1]+=carry}}trim(r);return r}function multiplySmall(a,b){var l=a.length,r=new Array(l),base=BASE,carry=0,product,i;for(i=0;i<l;i++){product=a[i]*b+carry;carry=Math.floor(product/base);r[i]=product-carry*base}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base)}return r}function shiftLeft(x,n){var r=[];while(n-- >0)r.push(0);return r.concat(x)}function multiplyKaratsuba(x,y){var n=Math.max(x.length,y.length);if(n<=30)return multiplyLong(x,y);n=Math.ceil(n/2);var b=x.slice(n),a=x.slice(0,n),d=y.slice(n),c=y.slice(0,n);var ac=multiplyKaratsuba(a,c),bd=multiplyKaratsuba(b,d),abcd=multiplyKaratsuba(addAny(a,b),addAny(c,d));var product=addAny(addAny(ac,shiftLeft(subtract(subtract(abcd,ac),bd),n)),shiftLeft(bd,2*n));trim(product);return product}function useKaratsuba(l1,l2){return-.012*l1-.012*l2+15e-6*l1*l2>0}BigInteger.prototype.multiply=function(v){var n=parseValue(v),a=this.value,b=n.value,sign=this.sign!==n.sign,abs;if(n.isSmall){if(b===0)return Integer[0];if(b===1)return this;if(b===-1)return this.negate();abs=Math.abs(b);if(abs<BASE){return new BigInteger(multiplySmall(a,abs),sign)}b=smallToArray(abs)}if(useKaratsuba(a.length,b.length))return new BigInteger(multiplyKaratsuba(a,b),sign);return new BigInteger(multiplyLong(a,b),sign)};BigInteger.prototype.times=BigInteger.prototype.multiply;function multiplySmallAndArray(a,b,sign){if(a<BASE){return new BigInteger(multiplySmall(b,a),sign)}return new BigInteger(multiplyLong(b,smallToArray(a)),sign)}SmallInteger.prototype._multiplyBySmall=function(a){if(isPrecise(a.value*this.value)){return new SmallInteger(a.value*this.value)}return multiplySmallAndArray(Math.abs(a.value),smallToArray(Math.abs(this.value)),this.sign!==a.sign)};BigInteger.prototype._multiplyBySmall=function(a){if(a.value===0)return Integer[0];if(a.value===1)return this;if(a.value===-1)return this.negate();return multiplySmallAndArray(Math.abs(a.value),this.value,this.sign!==a.sign)};SmallInteger.prototype.multiply=function(v){return parseValue(v)._multiplyBySmall(this)};SmallInteger.prototype.times=SmallInteger.prototype.multiply;function square(a){var l=a.length,r=createArray(l+l),base=BASE,product,carry,i,a_i,a_j;for(i=0;i<l;i++){a_i=a[i];carry=0-a_i*a_i;for(var j=i;j<l;j++){a_j=a[j];product=2*(a_i*a_j)+r[i+j]+carry;carry=Math.floor(product/base);r[i+j]=product-carry*base}r[i+l]=carry}trim(r);return r}BigInteger.prototype.square=function(){return new BigInteger(square(this.value),false)};SmallInteger.prototype.square=function(){var value=this.value*this.value;if(isPrecise(value))return new SmallInteger(value);return new BigInteger(square(smallToArray(Math.abs(this.value))),false)};function divMod1(a,b){var a_l=a.length,b_l=b.length,base=BASE,result=createArray(b.length),divisorMostSignificantDigit=b[b_l-1],lambda=Math.ceil(base/(2*divisorMostSignificantDigit)),remainder=multiplySmall(a,lambda),divisor=multiplySmall(b,lambda),quotientDigit,shift,carry,borrow,i,l,q;if(remainder.length<=a_l)remainder.push(0);divisor.push(0);divisorMostSignificantDigit=divisor[b_l-1];for(shift=a_l-b_l;shift>=0;shift--){quotientDigit=base-1;if(remainder[shift+b_l]!==divisorMostSignificantDigit){quotientDigit=Math.floor((remainder[shift+b_l]*base+remainder[shift+b_l-1])/divisorMostSignificantDigit)}carry=0;borrow=0;l=divisor.length;for(i=0;i<l;i++){carry+=quotientDigit*divisor[i];q=Math.floor(carry/base);borrow+=remainder[shift+i]-(carry-q*base);carry=q;if(borrow<0){remainder[shift+i]=borrow+base;borrow=-1}else{remainder[shift+i]=borrow;borrow=0}}while(borrow!==0){quotientDigit-=1;carry=0;for(i=0;i<l;i++){carry+=remainder[shift+i]-base+divisor[i];if(carry<0){remainder[shift+i]=carry+base;carry=0}else{remainder[shift+i]=carry;carry=1}}borrow+=carry}result[shift]=quotientDigit}remainder=divModSmall(remainder,lambda)[0];return[arrayToSmall(result),arrayToSmall(remainder)]}function divMod2(a,b){var a_l=a.length,b_l=b.length,result=[],part=[],base=BASE,guess,xlen,highx,highy,check;while(a_l){part.unshift(a[--a_l]);trim(part);if(compareAbs(part,b)<0){result.push(0);continue}xlen=part.length;highx=part[xlen-1]*base+part[xlen-2];highy=b[b_l-1]*base+b[b_l-2];if(xlen>b_l){highx=(highx+1)*base}guess=Math.ceil(highx/highy);do{check=multiplySmall(b,guess);if(compareAbs(check,part)<=0)break;guess--}while(guess);result.push(guess);part=subtract(part,check)}result.reverse();return[arrayToSmall(result),arrayToSmall(part)]}function divModSmall(value,lambda){var length=value.length,quotient=createArray(length),base=BASE,i,q,remainder,divisor;remainder=0;for(i=length-1;i>=0;--i){divisor=remainder*base+value[i];q=truncate(divisor/lambda);remainder=divisor-q*lambda;quotient[i]=q|0}return[quotient,remainder|0]}function divModAny(self,v){var value,n=parseValue(v);var a=self.value,b=n.value;var quotient;if(b===0)throw new Error(\"Cannot divide by zero\");if(self.isSmall){if(n.isSmall){return[new SmallInteger(truncate(a/b)),new SmallInteger(a%b)]}return[Integer[0],self]}if(n.isSmall){if(b===1)return[self,Integer[0]];if(b==-1)return[self.negate(),Integer[0]];var abs=Math.abs(b);if(abs<BASE){value=divModSmall(a,abs);quotient=arrayToSmall(value[0]);var remainder=value[1];if(self.sign)remainder=-remainder;if(typeof quotient===\"number\"){if(self.sign!==n.sign)quotient=-quotient;return[new SmallInteger(quotient),new SmallInteger(remainder)]}return[new BigInteger(quotient,self.sign!==n.sign),new SmallInteger(remainder)]}b=smallToArray(abs)}var comparison=compareAbs(a,b);if(comparison===-1)return[Integer[0],self];if(comparison===0)return[Integer[self.sign===n.sign?1:-1],Integer[0]];if(a.length+b.length<=200)value=divMod1(a,b);else value=divMod2(a,b);quotient=value[0];var qSign=self.sign!==n.sign,mod=value[1],mSign=self.sign;if(typeof quotient===\"number\"){if(qSign)quotient=-quotient;quotient=new SmallInteger(quotient)}else quotient=new BigInteger(quotient,qSign);if(typeof mod===\"number\"){if(mSign)mod=-mod;mod=new SmallInteger(mod)}else mod=new BigInteger(mod,mSign);return[quotient,mod]}BigInteger.prototype.divmod=function(v){var result=divModAny(this,v);return{quotient:result[0],remainder:result[1]}};SmallInteger.prototype.divmod=BigInteger.prototype.divmod;BigInteger.prototype.divide=function(v){return divModAny(this,v)[0]};SmallInteger.prototype.over=SmallInteger.prototype.divide=BigInteger.prototype.over=BigInteger.prototype.divide;BigInteger.prototype.mod=function(v){return divModAny(this,v)[1]};SmallInteger.prototype.remainder=SmallInteger.prototype.mod=BigInteger.prototype.remainder=BigInteger.prototype.mod;BigInteger.prototype.pow=function(v){var n=parseValue(v),a=this.value,b=n.value,value,x,y;if(b===0)return Integer[1];if(a===0)return Integer[0];if(a===1)return Integer[1];if(a===-1)return n.isEven()?Integer[1]:Integer[-1];if(n.sign){return Integer[0]}if(!n.isSmall)throw new Error(\"The exponent \"+n.toString()+\" is too large.\");if(this.isSmall){if(isPrecise(value=Math.pow(a,b)))return new SmallInteger(truncate(value))}x=this;y=Integer[1];while(true){if(b&1===1){y=y.times(x);--b}if(b===0)break;b/=2;x=x.square()}return y};SmallInteger.prototype.pow=BigInteger.prototype.pow;BigInteger.prototype.modPow=function(exp,mod){exp=parseValue(exp);mod=parseValue(mod);if(mod.isZero())throw new Error(\"Cannot take modPow with modulus 0\");var r=Integer[1],base=this.mod(mod);while(exp.isPositive()){if(base.isZero())return Integer[0];if(exp.isOdd())r=r.multiply(base).mod(mod);exp=exp.divide(2);base=base.square().mod(mod)}return r};SmallInteger.prototype.modPow=BigInteger.prototype.modPow;function compareAbs(a,b){if(a.length!==b.length){return a.length>b.length?1:-1}for(var i=a.length-1;i>=0;i--){if(a[i]!==b[i])return a[i]>b[i]?1:-1}return 0}BigInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall)return 1;return compareAbs(a,b)};SmallInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=Math.abs(this.value),b=n.value;if(n.isSmall){b=Math.abs(b);return a===b?0:a>b?1:-1}return-1};BigInteger.prototype.compare=function(v){if(v===Infinity){return-1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(this.sign!==n.sign){return n.sign?1:-1}if(n.isSmall){return this.sign?-1:1}return compareAbs(a,b)*(this.sign?-1:1)};BigInteger.prototype.compareTo=BigInteger.prototype.compare;SmallInteger.prototype.compare=function(v){if(v===Infinity){return-1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall){return a==b?0:a>b?1:-1}if(a<0!==n.sign){return a<0?-1:1}return a<0?1:-1};SmallInteger.prototype.compareTo=SmallInteger.prototype.compare;BigInteger.prototype.equals=function(v){return this.compare(v)===0};SmallInteger.prototype.eq=SmallInteger.prototype.equals=BigInteger.prototype.eq=BigInteger.prototype.equals;BigInteger.prototype.notEquals=function(v){return this.compare(v)!==0};SmallInteger.prototype.neq=SmallInteger.prototype.notEquals=BigInteger.prototype.neq=BigInteger.prototype.notEquals;BigInteger.prototype.greater=function(v){return this.compare(v)>0};SmallInteger.prototype.gt=SmallInteger.prototype.greater=BigInteger.prototype.gt=BigInteger.prototype.greater;BigInteger.prototype.lesser=function(v){return this.compare(v)<0};SmallInteger.prototype.lt=SmallInteger.prototype.lesser=BigInteger.prototype.lt=BigInteger.prototype.lesser;BigInteger.prototype.greaterOrEquals=function(v){return this.compare(v)>=0};SmallInteger.prototype.geq=SmallInteger.prototype.greaterOrEquals=BigInteger.prototype.geq=BigInteger.prototype.greaterOrEquals;BigInteger.prototype.lesserOrEquals=function(v){return this.compare(v)<=0};SmallInteger.prototype.leq=SmallInteger.prototype.lesserOrEquals=BigInteger.prototype.leq=BigInteger.prototype.lesserOrEquals;BigInteger.prototype.isEven=function(){return(this.value[0]&1)===0};SmallInteger.prototype.isEven=function(){return(this.value&1)===0};BigInteger.prototype.isOdd=function(){return(this.value[0]&1)===1};SmallInteger.prototype.isOdd=function(){return(this.value&1)===1};BigInteger.prototype.isPositive=function(){return!this.sign};SmallInteger.prototype.isPositive=function(){return this.value>0};BigInteger.prototype.isNegative=function(){return this.sign};SmallInteger.prototype.isNegative=function(){return this.value<0};BigInteger.prototype.isUnit=function(){return false};SmallInteger.prototype.isUnit=function(){return Math.abs(this.value)===1};BigInteger.prototype.isZero=function(){return false};SmallInteger.prototype.isZero=function(){return this.value===0};BigInteger.prototype.isDivisibleBy=function(v){var n=parseValue(v);var value=n.value;if(value===0)return false;if(value===1)return true;if(value===2)return this.isEven();return this.mod(n).equals(Integer[0])};SmallInteger.prototype.isDivisibleBy=BigInteger.prototype.isDivisibleBy;function isBasicPrime(v){var n=v.abs();if(n.isUnit())return false;if(n.equals(2)||n.equals(3)||n.equals(5))return true;if(n.isEven()||n.isDivisibleBy(3)||n.isDivisibleBy(5))return false;if(n.lesser(49))return true}function millerRabinTest(n,a){var nPrev=n.prev(),b=nPrev,r=0,d,t,i,x;while(b.isEven())b=b.divide(2),r++;next:for(i=0;i<a.length;i++){if(n.lesser(a[i]))continue;x=bigInt(a[i]).modPow(b,n);if(x.equals(Integer[1])||x.equals(nPrev))continue;for(d=r-1;d!=0;d--){x=x.square().mod(n);if(x.isUnit())return false;if(x.equals(nPrev))continue next}return false}return true}BigInteger.prototype.isPrime=function(strict){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs();var bits=n.bitLength();if(bits<=64)return millerRabinTest(n,[2,325,9375,28178,450775,9780504,1795265022]);var logN=Math.log(2)*bits;var t=Math.ceil(strict===true?2*Math.pow(logN,2):logN);for(var a=[],i=0;i<t;i++){a.push(bigInt(i+2))}return millerRabinTest(n,a)};SmallInteger.prototype.isPrime=BigInteger.prototype.isPrime;BigInteger.prototype.isProbablePrime=function(iterations){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs();var t=iterations===undefined?5:iterations;for(var a=[],i=0;i<t;i++){a.push(bigInt.randBetween(2,n.minus(2)))}return millerRabinTest(n,a)};SmallInteger.prototype.isProbablePrime=BigInteger.prototype.isProbablePrime;BigInteger.prototype.modInv=function(n){var t=bigInt.zero,newT=bigInt.one,r=parseValue(n),newR=this.abs(),q,lastT,lastR;while(!newR.equals(bigInt.zero)){q=r.divide(newR);lastT=t;lastR=r;t=newT;r=newR;newT=lastT.subtract(q.multiply(newT));newR=lastR.subtract(q.multiply(newR))}if(!r.equals(1))throw new Error(this.toString()+\" and \"+n.toString()+\" are not co-prime\");if(t.compare(0)===-1){t=t.add(n)}if(this.isNegative()){return t.negate()}return t};SmallInteger.prototype.modInv=BigInteger.prototype.modInv;BigInteger.prototype.next=function(){var value=this.value;if(this.sign){return subtractSmall(value,1,this.sign)}return new BigInteger(addSmall(value,1),this.sign)};SmallInteger.prototype.next=function(){var value=this.value;if(value+1<MAX_INT)return new SmallInteger(value+1);return new BigInteger(MAX_INT_ARR,false)};BigInteger.prototype.prev=function(){var value=this.value;if(this.sign){return new BigInteger(addSmall(value,1),true)}return subtractSmall(value,1,this.sign)};SmallInteger.prototype.prev=function(){var value=this.value;if(value-1>-MAX_INT)return new SmallInteger(value-1);return new BigInteger(MAX_INT_ARR,true)};var powersOfTwo=[1];while(2*powersOfTwo[powersOfTwo.length-1]<=BASE)powersOfTwo.push(2*powersOfTwo[powersOfTwo.length-1]);var powers2Length=powersOfTwo.length,highestPower2=powersOfTwo[powers2Length-1];function shift_isSmall(n){return(typeof n===\"number\"||typeof n===\"string\")&&+Math.abs(n)<=BASE||n instanceof BigInteger&&n.value.length<=1}BigInteger.prototype.shiftLeft=function(n){if(!shift_isSmall(n)){throw new Error(String(n)+\" is too large for shifting.\")}n=+n;if(n<0)return this.shiftRight(-n);var result=this;if(result.isZero())return result;while(n>=powers2Length){result=result.multiply(highestPower2);n-=powers2Length-1}return result.multiply(powersOfTwo[n])};SmallInteger.prototype.shiftLeft=BigInteger.prototype.shiftLeft;BigInteger.prototype.shiftRight=function(n){var remQuo;if(!shift_isSmall(n)){throw new Error(String(n)+\" is too large for shifting.\")}n=+n;if(n<0)return this.shiftLeft(-n);var result=this;while(n>=powers2Length){if(result.isZero()||result.isNegative()&&result.isUnit())return result;remQuo=divModAny(result,highestPower2);result=remQuo[1].isNegative()?remQuo[0].prev():remQuo[0];n-=powers2Length-1}remQuo=divModAny(result,powersOfTwo[n]);return remQuo[1].isNegative()?remQuo[0].prev():remQuo[0]};SmallInteger.prototype.shiftRight=BigInteger.prototype.shiftRight;function bitwise(x,y,fn){y=parseValue(y);var xSign=x.isNegative(),ySign=y.isNegative();var xRem=xSign?x.not():x,yRem=ySign?y.not():y;var xDigit=0,yDigit=0;var xDivMod=null,yDivMod=null;var result=[];while(!xRem.isZero()||!yRem.isZero()){xDivMod=divModAny(xRem,highestPower2);xDigit=xDivMod[1].toJSNumber();if(xSign){xDigit=highestPower2-1-xDigit}yDivMod=divModAny(yRem,highestPower2);yDigit=yDivMod[1].toJSNumber();if(ySign){yDigit=highestPower2-1-yDigit}xRem=xDivMod[0];yRem=yDivMod[0];result.push(fn(xDigit,yDigit))}var sum=fn(xSign?1:0,ySign?1:0)!==0?bigInt(-1):bigInt(0);for(var i=result.length-1;i>=0;i-=1){sum=sum.multiply(highestPower2).add(bigInt(result[i]))}return sum}BigInteger.prototype.not=function(){return this.negate().prev()};SmallInteger.prototype.not=BigInteger.prototype.not;BigInteger.prototype.and=function(n){return bitwise(this,n,function(a,b){return a&b})};SmallInteger.prototype.and=BigInteger.prototype.and;BigInteger.prototype.or=function(n){return bitwise(this,n,function(a,b){return a|b})};SmallInteger.prototype.or=BigInteger.prototype.or;BigInteger.prototype.xor=function(n){return bitwise(this,n,function(a,b){return a^b})};SmallInteger.prototype.xor=BigInteger.prototype.xor;var LOBMASK_I=1<<30,LOBMASK_BI=(BASE&-BASE)*(BASE&-BASE)|LOBMASK_I;function roughLOB(n){var v=n.value,x=typeof v===\"number\"?v|LOBMASK_I:v[0]+v[1]*BASE|LOBMASK_BI;return x&-x}function integerLogarithm(value,base){if(base.compareTo(value)<=0){var tmp=integerLogarithm(value,base.square(base));var p=tmp.p;var e=tmp.e;var t=p.multiply(base);return t.compareTo(value)<=0?{p:t,e:e*2+1}:{p:p,e:e*2}}return{p:bigInt(1),e:0}}BigInteger.prototype.bitLength=function(){var n=this;if(n.compareTo(bigInt(0))<0){n=n.negate().subtract(bigInt(1))}if(n.compareTo(bigInt(0))===0){return bigInt(0)}return bigInt(integerLogarithm(n,bigInt(2)).e).add(bigInt(1))};SmallInteger.prototype.bitLength=BigInteger.prototype.bitLength;function max(a,b){a=parseValue(a);b=parseValue(b);return a.greater(b)?a:b}function min(a,b){a=parseValue(a);b=parseValue(b);return a.lesser(b)?a:b}function gcd(a,b){a=parseValue(a).abs();b=parseValue(b).abs();if(a.equals(b))return a;if(a.isZero())return b;if(b.isZero())return a;var c=Integer[1],d,t;while(a.isEven()&&b.isEven()){d=Math.min(roughLOB(a),roughLOB(b));a=a.divide(d);b=b.divide(d);c=c.multiply(d)}while(a.isEven()){a=a.divide(roughLOB(a))}do{while(b.isEven()){b=b.divide(roughLOB(b))}if(a.greater(b)){t=b;b=a;a=t}b=b.subtract(a)}while(!b.isZero());return c.isUnit()?a:a.multiply(c)}function lcm(a,b){a=parseValue(a).abs();b=parseValue(b).abs();return a.divide(gcd(a,b)).multiply(b)}function randBetween(a,b){a=parseValue(a);b=parseValue(b);var low=min(a,b),high=max(a,b);var range=high.subtract(low).add(1);if(range.isSmall)return low.add(Math.floor(Math.random()*range));var length=range.value.length-1;var result=[],restricted=true;for(var i=length;i>=0;i--){var top=restricted?range.value[i]:BASE;var digit=truncate(Math.random()*top);result.unshift(digit);if(digit<top)restricted=false}result=arrayToSmall(result);return low.add(typeof result===\"number\"?new SmallInteger(result):new BigInteger(result,false))}var parseBase=function(text,base){var length=text.length;var i;var absBase=Math.abs(base);for(var i=0;i<length;i++){var c=text[i].toLowerCase();if(c===\"-\")continue;if(/[a-z0-9]/.test(c)){if(/[0-9]/.test(c)&&+c>=absBase){if(c===\"1\"&&absBase===1)continue;throw new Error(c+\" is not a valid digit in base \"+base+\".\")}else if(c.charCodeAt(0)-87>=absBase){throw new Error(c+\" is not a valid digit in base \"+base+\".\")}}}if(2<=base&&base<=36){if(length<=LOG_MAX_INT/Math.log(base)){var result=parseInt(text,base);if(isNaN(result)){throw new Error(c+\" is not a valid digit in base \"+base+\".\")}return new SmallInteger(parseInt(text,base))}}base=parseValue(base);var digits=[];var isNegative=text[0]===\"-\";for(i=isNegative?1:0;i<text.length;i++){var c=text[i].toLowerCase(),charCode=c.charCodeAt(0);if(48<=charCode&&charCode<=57)digits.push(parseValue(c));else if(97<=charCode&&charCode<=122)digits.push(parseValue(c.charCodeAt(0)-87));else if(c===\"<\"){var start=i;do{i++}while(text[i]!==\">\");digits.push(parseValue(text.slice(start+1,i)))}else throw new Error(c+\" is not a valid character\")}return parseBaseFromArray(digits,base,isNegative)};function parseBaseFromArray(digits,base,isNegative){var val=Integer[0],pow=Integer[1],i;for(i=digits.length-1;i>=0;i--){val=val.add(digits[i].times(pow));pow=pow.times(base)}return isNegative?val.negate():val}function stringify(digit){if(digit<=35){return\"0123456789abcdefghijklmnopqrstuvwxyz\".charAt(digit)}return\"<\"+digit+\">\"}function toBase(n,base){base=bigInt(base);if(base.isZero()){if(n.isZero())return{value:[0],isNegative:false};throw new Error(\"Cannot convert nonzero numbers to base 0.\")}if(base.equals(-1)){if(n.isZero())return{value:[0],isNegative:false};if(n.isNegative())return{value:[].concat.apply([],Array.apply(null,Array(-n)).map(Array.prototype.valueOf,[1,0])),isNegative:false};var arr=Array.apply(null,Array(+n-1)).map(Array.prototype.valueOf,[0,1]);arr.unshift([1]);return{value:[].concat.apply([],arr),isNegative:false}}var neg=false;if(n.isNegative()&&base.isPositive()){neg=true;n=n.abs()}if(base.equals(1)){if(n.isZero())return{value:[0],isNegative:false};return{value:Array.apply(null,Array(+n)).map(Number.prototype.valueOf,1),isNegative:neg}}var out=[];var left=n,divmod;while(left.isNegative()||left.compareAbs(base)>=0){divmod=left.divmod(base);left=divmod.quotient;var digit=divmod.remainder;if(digit.isNegative()){digit=base.minus(digit).abs();left=left.next()}out.push(digit.toJSNumber())}out.push(left.toJSNumber());return{value:out.reverse(),isNegative:neg}}function toBaseString(n,base){var arr=toBase(n,base);return(arr.isNegative?\"-\":\"\")+arr.value.map(stringify).join(\"\")}BigInteger.prototype.toArray=function(radix){return toBase(this,radix)};SmallInteger.prototype.toArray=function(radix){return toBase(this,radix)};BigInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!==10)return toBaseString(this,radix);var v=this.value,l=v.length,str=String(v[--l]),zeros=\"0000000\",digit;while(--l>=0){digit=String(v[l]);str+=zeros.slice(digit.length)+digit}var sign=this.sign?\"-\":\"\";return sign+str};SmallInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!=10)return toBaseString(this,radix);return String(this.value)};BigInteger.prototype.toJSON=SmallInteger.prototype.toJSON=function(){return this.toString()};BigInteger.prototype.valueOf=function(){return parseInt(this.toString(),10)};BigInteger.prototype.toJSNumber=BigInteger.prototype.valueOf;SmallInteger.prototype.valueOf=function(){return this.value};SmallInteger.prototype.toJSNumber=SmallInteger.prototype.valueOf;function parseStringValue(v){if(isPrecise(+v)){var x=+v;if(x===truncate(x))return new SmallInteger(x);throw new Error(\"Invalid integer: \"+v)}var sign=v[0]===\"-\";if(sign)v=v.slice(1);var split=v.split(/e/i);if(split.length>2)throw new Error(\"Invalid integer: \"+split.join(\"e\"));if(split.length===2){var exp=split[1];if(exp[0]===\"+\")exp=exp.slice(1);exp=+exp;if(exp!==truncate(exp)||!isPrecise(exp))throw new Error(\"Invalid integer: \"+exp+\" is not a valid exponent.\");var text=split[0];var decimalPlace=text.indexOf(\".\");if(decimalPlace>=0){exp-=text.length-decimalPlace-1;text=text.slice(0,decimalPlace)+text.slice(decimalPlace+1)}if(exp<0)throw new Error(\"Cannot include negative exponent part for integers\");text+=new Array(exp+1).join(\"0\");v=text}var isValid=/^([0-9][0-9]*)$/.test(v);if(!isValid)throw new Error(\"Invalid integer: \"+v);var r=[],max=v.length,l=LOG_BASE,min=max-l;while(max>0){r.push(+v.slice(min,max));min-=l;if(min<0)min=0;max-=l}trim(r);return new BigInteger(r,sign)}function parseNumberValue(v){if(isPrecise(v)){if(v!==truncate(v))throw new Error(v+\" is not an integer.\");return new SmallInteger(v)}return parseStringValue(v.toString())}function parseValue(v){if(typeof v===\"number\"){return parseNumberValue(v)}if(typeof v===\"string\"){return parseStringValue(v)}return v}for(var i=0;i<1e3;i++){Integer[i]=new SmallInteger(i);if(i>0)Integer[-i]=new SmallInteger(-i)}Integer.one=Integer[1];Integer.zero=Integer[0];Integer.minusOne=Integer[-1];Integer.max=max;Integer.min=min;Integer.gcd=gcd;Integer.lcm=lcm;Integer.isInstance=function(x){return x instanceof BigInteger||x instanceof SmallInteger};Integer.randBetween=randBetween;Integer.fromArray=function(digits,base,isNegative){return parseBaseFromArray(digits.map(parseValue),parseValue(base||10),isNegative)};return Integer}();if(typeof module!==\"undefined\"&&module.hasOwnProperty(\"exports\")){module.exports=bigInt}if(typeof define===\"function\"&&define.amd){define(\"big-integer\",[],function(){return bigInt})}\r\n        return bigInt;\r\n    })(),\r\n    /*\r\n     *  decimal.js v10.2.1\r\n     *  An arbitrary-precision Decimal type for JavaScript.\r\n     *  https://github.com/MikeMcl/decimal.js\r\n     *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n     *  MIT Licence\r\n     */\r\n    bigDec: function(n){\"use strict\";var e,i,t,r,s=9e15,o=1e9,u=\"0123456789abcdef\",c=\"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\",f=\"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\",a={precision:20,rounding:4,modulo:1,toExpNeg:-7,toExpPos:21,minE:-s,maxE:s,crypto:!1},h=!0,d=\"[DecimalError] \",l=d+\"Invalid argument: \",p=d+\"Precision limit exceeded\",g=d+\"crypto unavailable\",m=Math.floor,w=Math.pow,v=/^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,N=/^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,b=/^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,E=/^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,x=1e7,y=7,M=c.length-1,q=f.length-1,O={name:\"[object Decimal]\"};function D(n){var e,i,t,r=n.length-1,s=\"\",o=n[0];if(r>0){for(s+=o,e=1;e<r;e++)t=n[e]+\"\",(i=y-t.length)&&(s+=k(i)),s+=t;o=n[e],(i=y-(t=o+\"\").length)&&(s+=k(i))}else if(0===o)return\"0\";for(;o%10==0;)o/=10;return s+o}function F(n,e,i){if(n!==~~n||n<e||n>i)throw Error(l+n)}function A(n,e,i,t){var r,s,o,u;for(s=n[0];s>=10;s/=10)--e;return--e<0?(e+=y,r=0):(r=Math.ceil((e+1)/y),e%=y),s=w(10,y-e),u=n[r]%s|0,null==t?e<3?(0==e?u=u/100|0:1==e&&(u=u/10|0),o=i<4&&99999==u||i>3&&49999==u||5e4==u||0==u):o=(i<4&&u+1==s||i>3&&u+1==s/2)&&(n[r+1]/s/100|0)==w(10,e-2)-1||(u==s/2||0==u)&&0==(n[r+1]/s/100|0):e<4?(0==e?u=u/1e3|0:1==e?u=u/100|0:2==e&&(u=u/10|0),o=(t||i<4)&&9999==u||!t&&i>3&&4999==u):o=((t||i<4)&&u+1==s||!t&&i>3&&u+1==s/2)&&(n[r+1]/s/1e3|0)==w(10,e-3)-1,o}function S(n,e,i){for(var t,r,s=[0],o=0,c=n.length;o<c;){for(r=s.length;r--;)s[r]*=e;for(s[0]+=u.indexOf(n.charAt(o++)),t=0;t<s.length;t++)s[t]>i-1&&(void 0===s[t+1]&&(s[t+1]=0),s[t+1]+=s[t]/i|0,s[t]%=i)}return s.reverse()}O.absoluteValue=O.abs=function(){var n=new this.constructor(this);return n.s<0&&(n.s=1),P(n)},O.ceil=function(){return P(new this.constructor(this),this.e+1,2)},O.comparedTo=O.cmp=function(n){var e,i,t,r,s=this,o=s.d,u=(n=new s.constructor(n)).d,c=s.s,f=n.s;if(!o||!u)return c&&f?c!==f?c:o===u?0:!o^c<0?1:-1:NaN;if(!o[0]||!u[0])return o[0]?c:u[0]?-f:0;if(c!==f)return c;if(s.e!==n.e)return s.e>n.e^c<0?1:-1;for(e=0,i=(t=o.length)<(r=u.length)?t:r;e<i;++e)if(o[e]!==u[e])return o[e]>u[e]^c<0?1:-1;return t===r?0:t>r^c<0?1:-1},O.cosine=O.cos=function(){var n,e,i=this,t=i.constructor;return i.d?i.d[0]?(n=t.precision,e=t.rounding,t.precision=n+Math.max(i.e,i.sd())+y,t.rounding=1,i=function(n,e){var i,t,r=e.d.length;r<32?(i=Math.ceil(r/3),t=(1/z(4,i)).toString()):(i=16,t=\"2.3283064365386962890625e-10\");n.precision+=i,e=J(n,1,e.times(t),new n(1));for(var s=i;s--;){var o=e.times(e);e=o.times(o).minus(o).times(8).plus(1)}return n.precision-=i,e}(t,G(t,i)),t.precision=n,t.rounding=e,P(2==r||3==r?i.neg():i,n,e,!0)):new t(1):new t(NaN)},O.cubeRoot=O.cbrt=function(){var n,e,i,t,r,s,o,u,c,f,a=this,d=a.constructor;if(!a.isFinite()||a.isZero())return new d(a);for(h=!1,(s=a.s*w(a.s*a,1/3))&&Math.abs(s)!=1/0?t=new d(s.toString()):(i=D(a.d),(s=((n=a.e)-i.length+1)%3)&&(i+=1==s||-2==s?\"0\":\"00\"),s=w(i,1/3),n=m((n+1)/3)-(n%3==(n<0?-1:2)),(t=new d(i=s==1/0?\"5e\"+n:(i=s.toExponential()).slice(0,i.indexOf(\"e\")+1)+n)).s=a.s),o=(n=d.precision)+3;;)if(f=(c=(u=t).times(u).times(u)).plus(a),t=Z(f.plus(a).times(u),f.plus(c),o+2,1),D(u.d).slice(0,o)===(i=D(t.d)).slice(0,o)){if(\"9999\"!=(i=i.slice(o-3,o+1))&&(r||\"4999\"!=i)){+i&&(+i.slice(1)||\"5\"!=i.charAt(0))||(P(t,n+1,1),e=!t.times(t).times(t).eq(a));break}if(!r&&(P(u,n+1,0),u.times(u).times(u).eq(a))){t=u;break}o+=4,r=1}return h=!0,P(t,n,d.rounding,e)},O.decimalPlaces=O.dp=function(){var n,e=this.d,i=NaN;if(e){if(i=((n=e.length-1)-m(this.e/y))*y,n=e[n])for(;n%10==0;n/=10)i--;i<0&&(i=0)}return i},O.dividedBy=O.div=function(n){return Z(this,new this.constructor(n))},O.dividedToIntegerBy=O.divToInt=function(n){var e=this.constructor;return P(Z(this,new e(n),0,1,1),e.precision,e.rounding)},O.equals=O.eq=function(n){return 0===this.cmp(n)},O.floor=function(){return P(new this.constructor(this),this.e+1,3)},O.greaterThan=O.gt=function(n){return this.cmp(n)>0},O.greaterThanOrEqualTo=O.gte=function(n){var e=this.cmp(n);return 1==e||0===e},O.hyperbolicCosine=O.cosh=function(){var n,e,i,t,r,s=this,o=s.constructor,u=new o(1);if(!s.isFinite())return new o(s.s?1/0:NaN);if(s.isZero())return u;i=o.precision,t=o.rounding,o.precision=i+Math.max(s.e,s.sd())+4,o.rounding=1,(r=s.d.length)<32?e=(1/z(4,n=Math.ceil(r/3))).toString():(n=16,e=\"2.3283064365386962890625e-10\"),s=J(o,1,s.times(e),new o(1),!0);for(var c,f=n,a=new o(8);f--;)c=s.times(s),s=u.minus(c.times(a.minus(c.times(a))));return P(s,o.precision=i,o.rounding=t,!0)},O.hyperbolicSine=O.sinh=function(){var n,e,i,t,r=this,s=r.constructor;if(!r.isFinite()||r.isZero())return new s(r);if(e=s.precision,i=s.rounding,s.precision=e+Math.max(r.e,r.sd())+4,s.rounding=1,(t=r.d.length)<3)r=J(s,2,r,r,!0);else{n=(n=1.4*Math.sqrt(t))>16?16:0|n,r=J(s,2,r=r.times(1/z(5,n)),r,!0);for(var o,u=new s(5),c=new s(16),f=new s(20);n--;)o=r.times(r),r=r.times(u.plus(o.times(c.times(o).plus(f))))}return s.precision=e,s.rounding=i,P(r,e,i,!0)},O.hyperbolicTangent=O.tanh=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+7,t.rounding=1,Z(i.sinh(),i.cosh(),t.precision=n,t.rounding=e)):new t(i.s)},O.inverseCosine=O.acos=function(){var n,e=this,i=e.constructor,t=e.abs().cmp(1),r=i.precision,s=i.rounding;return-1!==t?0===t?e.isNeg()?U(i,r,s):new i(0):new i(NaN):e.isZero()?U(i,r+4,s).times(.5):(i.precision=r+6,i.rounding=1,e=e.asin(),n=U(i,r+4,s).times(.5),i.precision=r,i.rounding=s,n.minus(e))},O.inverseHyperbolicCosine=O.acosh=function(){var n,e,i=this,t=i.constructor;return i.lte(1)?new t(i.eq(1)?0:NaN):i.isFinite()?(n=t.precision,e=t.rounding,t.precision=n+Math.max(Math.abs(i.e),i.sd())+4,t.rounding=1,h=!1,i=i.times(i).minus(1).sqrt().plus(i),h=!0,t.precision=n,t.rounding=e,i.ln()):new t(i)},O.inverseHyperbolicSine=O.asinh=function(){var n,e,i=this,t=i.constructor;return!i.isFinite()||i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+2*Math.max(Math.abs(i.e),i.sd())+6,t.rounding=1,h=!1,i=i.times(i).plus(1).sqrt().plus(i),h=!0,t.precision=n,t.rounding=e,i.ln())},O.inverseHyperbolicTangent=O.atanh=function(){var n,e,i,t,r=this,s=r.constructor;return r.isFinite()?r.e>=0?new s(r.abs().eq(1)?r.s/0:r.isZero()?r:NaN):(n=s.precision,e=s.rounding,t=r.sd(),Math.max(t,n)<2*-r.e-1?P(new s(r),n,e,!0):(s.precision=i=t-r.e,r=Z(r.plus(1),new s(1).minus(r),i+n,1),s.precision=n+4,s.rounding=1,r=r.ln(),s.precision=n,s.rounding=e,r.times(.5))):new s(NaN)},O.inverseSine=O.asin=function(){var n,e,i,t,r=this,s=r.constructor;return r.isZero()?new s(r):(e=r.abs().cmp(1),i=s.precision,t=s.rounding,-1!==e?0===e?((n=U(s,i+4,t).times(.5)).s=r.s,n):new s(NaN):(s.precision=i+6,s.rounding=1,r=r.div(new s(1).minus(r.times(r)).sqrt().plus(1)).atan(),s.precision=i,s.rounding=t,r.times(2)))},O.inverseTangent=O.atan=function(){var n,e,i,t,r,s,o,u,c,f=this,a=f.constructor,d=a.precision,l=a.rounding;if(f.isFinite()){if(f.isZero())return new a(f);if(f.abs().eq(1)&&d+4<=q)return(o=U(a,d+4,l).times(.25)).s=f.s,o}else{if(!f.s)return new a(NaN);if(d+4<=q)return(o=U(a,d+4,l).times(.5)).s=f.s,o}for(a.precision=u=d+10,a.rounding=1,n=i=Math.min(28,u/y+2|0);n;--n)f=f.div(f.times(f).plus(1).sqrt().plus(1));for(h=!1,e=Math.ceil(u/y),t=1,c=f.times(f),o=new a(f),r=f;-1!==n;)if(r=r.times(c),s=o.minus(r.div(t+=2)),r=r.times(c),void 0!==(o=s.plus(r.div(t+=2))).d[e])for(n=e;o.d[n]===s.d[n]&&n--;);return i&&(o=o.times(2<<i-1)),h=!0,P(o,a.precision=d,a.rounding=l,!0)},O.isFinite=function(){return!!this.d},O.isInteger=O.isInt=function(){return!!this.d&&m(this.e/y)>this.d.length-2},O.isNaN=function(){return!this.s},O.isNegative=O.isNeg=function(){return this.s<0},O.isPositive=O.isPos=function(){return this.s>0},O.isZero=function(){return!!this.d&&0===this.d[0]},O.lessThan=O.lt=function(n){return this.cmp(n)<0},O.lessThanOrEqualTo=O.lte=function(n){return this.cmp(n)<1},O.logarithm=O.log=function(n){var e,i,t,r,s,o,u,c,f=this.constructor,a=f.precision,d=f.rounding;if(null==n)n=new f(10),e=!0;else{if(i=(n=new f(n)).d,n.s<0||!i||!i[0]||n.eq(1))return new f(NaN);e=n.eq(10)}if(i=this.d,this.s<0||!i||!i[0]||this.eq(1))return new f(i&&!i[0]?-1/0:1!=this.s?NaN:i?0:1/0);if(e)if(i.length>1)s=!0;else{for(r=i[0];r%10==0;)r/=10;s=1!==r}if(h=!1,o=V(this,u=a+5),t=e?T(f,u+10):V(n,u),A((c=Z(o,t,u,1)).d,r=a,d))do{if(o=V(this,u+=10),t=e?T(f,u+10):V(n,u),c=Z(o,t,u,1),!s){+D(c.d).slice(r+1,r+15)+1==1e14&&(c=P(c,a+1,0));break}}while(A(c.d,r+=10,d));return h=!0,P(c,a,d)},O.minus=O.sub=function(n){var e,i,t,r,s,o,u,c,f,a,d,l,p=this,g=p.constructor;if(n=new g(n),!p.d||!n.d)return p.s&&n.s?p.d?n.s=-n.s:n=new g(n.d||p.s!==n.s?p:NaN):n=new g(NaN),n;if(p.s!=n.s)return n.s=-n.s,p.plus(n);if(f=p.d,l=n.d,u=g.precision,c=g.rounding,!f[0]||!l[0]){if(l[0])n.s=-n.s;else{if(!f[0])return new g(3===c?-0:0);n=new g(p)}return h?P(n,u,c):n}if(i=m(n.e/y),a=m(p.e/y),f=f.slice(),s=a-i){for((d=s<0)?(e=f,s=-s,o=l.length):(e=l,i=a,o=f.length),s>(t=Math.max(Math.ceil(u/y),o)+2)&&(s=t,e.length=1),e.reverse(),t=s;t--;)e.push(0);e.reverse()}else{for((d=(t=f.length)<(o=l.length))&&(o=t),t=0;t<o;t++)if(f[t]!=l[t]){d=f[t]<l[t];break}s=0}for(d&&(e=f,f=l,l=e,n.s=-n.s),o=f.length,t=l.length-o;t>0;--t)f[o++]=0;for(t=l.length;t>s;){if(f[--t]<l[t]){for(r=t;r&&0===f[--r];)f[r]=x-1;--f[r],f[t]+=x}f[t]-=l[t]}for(;0===f[--o];)f.pop();for(;0===f[0];f.shift())--i;return f[0]?(n.d=f,n.e=L(f,i),h?P(n,u,c):n):new g(3===c?-0:0)},O.modulo=O.mod=function(n){var e,i=this,t=i.constructor;return n=new t(n),!i.d||!n.s||n.d&&!n.d[0]?new t(NaN):!n.d||i.d&&!i.d[0]?P(new t(i),t.precision,t.rounding):(h=!1,9==t.modulo?(e=Z(i,n.abs(),0,3,1)).s*=n.s:e=Z(i,n,0,t.modulo,1),e=e.times(n),h=!0,i.minus(e))},O.naturalExponential=O.exp=function(){return B(this)},O.naturalLogarithm=O.ln=function(){return V(this)},O.negated=O.neg=function(){var n=new this.constructor(this);return n.s=-n.s,P(n)},O.plus=O.add=function(n){var e,i,t,r,s,o,u,c,f,a,d=this,l=d.constructor;if(n=new l(n),!d.d||!n.d)return d.s&&n.s?d.d||(n=new l(n.d||d.s===n.s?d:NaN)):n=new l(NaN),n;if(d.s!=n.s)return n.s=-n.s,d.minus(n);if(f=d.d,a=n.d,u=l.precision,c=l.rounding,!f[0]||!a[0])return a[0]||(n=new l(d)),h?P(n,u,c):n;if(s=m(d.e/y),t=m(n.e/y),f=f.slice(),r=s-t){for(r<0?(i=f,r=-r,o=a.length):(i=a,t=s,o=f.length),r>(o=(s=Math.ceil(u/y))>o?s+1:o+1)&&(r=o,i.length=1),i.reverse();r--;)i.push(0);i.reverse()}for((o=f.length)-(r=a.length)<0&&(r=o,i=a,a=f,f=i),e=0;r;)e=(f[--r]=f[r]+a[r]+e)/x|0,f[r]%=x;for(e&&(f.unshift(e),++t),o=f.length;0==f[--o];)f.pop();return n.d=f,n.e=L(f,t),h?P(n,u,c):n},O.precision=O.sd=function(n){var e,i=this;if(void 0!==n&&n!==!!n&&1!==n&&0!==n)throw Error(l+n);return i.d?(e=_(i.d),n&&i.e+1>e&&(e=i.e+1)):e=NaN,e},O.round=function(){var n=this,e=n.constructor;return P(new e(n),n.e+1,e.rounding)},O.sine=O.sin=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+Math.max(i.e,i.sd())+y,t.rounding=1,i=function(n,e){var i,t=e.d.length;if(t<3)return J(n,2,e,e);i=(i=1.4*Math.sqrt(t))>16?16:0|i,e=e.times(1/z(5,i)),e=J(n,2,e,e);for(var r,s=new n(5),o=new n(16),u=new n(20);i--;)r=e.times(e),e=e.times(s.plus(r.times(o.times(r).minus(u))));return e}(t,G(t,i)),t.precision=n,t.rounding=e,P(r>2?i.neg():i,n,e,!0)):new t(NaN)},O.squareRoot=O.sqrt=function(){var n,e,i,t,r,s,o=this,u=o.d,c=o.e,f=o.s,a=o.constructor;if(1!==f||!u||!u[0])return new a(!f||f<0&&(!u||u[0])?NaN:u?o:1/0);for(h=!1,0==(f=Math.sqrt(+o))||f==1/0?(((e=D(u)).length+c)%2==0&&(e+=\"0\"),f=Math.sqrt(e),c=m((c+1)/2)-(c<0||c%2),t=new a(e=f==1/0?\"5e\"+c:(e=f.toExponential()).slice(0,e.indexOf(\"e\")+1)+c)):t=new a(f.toString()),i=(c=a.precision)+3;;)if(t=(s=t).plus(Z(o,s,i+2,1)).times(.5),D(s.d).slice(0,i)===(e=D(t.d)).slice(0,i)){if(\"9999\"!=(e=e.slice(i-3,i+1))&&(r||\"4999\"!=e)){+e&&(+e.slice(1)||\"5\"!=e.charAt(0))||(P(t,c+1,1),n=!t.times(t).eq(o));break}if(!r&&(P(s,c+1,0),s.times(s).eq(o))){t=s;break}i+=4,r=1}return h=!0,P(t,c,a.rounding,n)},O.tangent=O.tan=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+10,t.rounding=1,(i=i.sin()).s=1,i=Z(i,new t(1).minus(i.times(i)).sqrt(),n+10,0),t.precision=n,t.rounding=e,P(2==r||4==r?i.neg():i,n,e,!0)):new t(NaN)},O.times=O.mul=function(n){var e,i,t,r,s,o,u,c,f,a=this,d=a.constructor,l=a.d,p=(n=new d(n)).d;if(n.s*=a.s,!(l&&l[0]&&p&&p[0]))return new d(!n.s||l&&!l[0]&&!p||p&&!p[0]&&!l?NaN:l&&p?0*n.s:n.s/0);for(i=m(a.e/y)+m(n.e/y),(c=l.length)<(f=p.length)&&(s=l,l=p,p=s,o=c,c=f,f=o),s=[],t=o=c+f;t--;)s.push(0);for(t=f;--t>=0;){for(e=0,r=c+t;r>t;)u=s[r]+p[t]*l[r-t-1]+e,s[r--]=u%x|0,e=u/x|0;s[r]=(s[r]+e)%x|0}for(;!s[--o];)s.pop();return e?++i:s.shift(),n.d=s,n.e=L(s,i),h?P(n,d.precision,d.rounding):n},O.toBinary=function(n,e){return K(this,2,n,e)},O.toDecimalPlaces=O.toDP=function(n,e){var i=this,t=i.constructor;return i=new t(i),void 0===n?i:(F(n,0,o),void 0===e?e=t.rounding:F(e,0,8),P(i,n+i.e+1,e))},O.toExponential=function(n,e){var i,t=this,r=t.constructor;return void 0===n?i=R(t,!0):(F(n,0,o),void 0===e?e=r.rounding:F(e,0,8),i=R(t=P(new r(t),n+1,e),!0,n+1)),t.isNeg()&&!t.isZero()?\"-\"+i:i},O.toFixed=function(n,e){var i,t,r=this,s=r.constructor;return void 0===n?i=R(r):(F(n,0,o),void 0===e?e=s.rounding:F(e,0,8),i=R(t=P(new s(r),n+r.e+1,e),!1,n+t.e+1)),r.isNeg()&&!r.isZero()?\"-\"+i:i},O.toFraction=function(n){var e,i,t,r,s,o,u,c,f,a,d,p,g=this,m=g.d,v=g.constructor;if(!m)return new v(g);if(f=i=new v(1),t=c=new v(0),o=(s=(e=new v(t)).e=_(m)-g.e-1)%y,e.d[0]=w(10,o<0?y+o:o),null==n)n=s>0?e:f;else{if(!(u=new v(n)).isInt()||u.lt(f))throw Error(l+u);n=u.gt(e)?s>0?e:f:u}for(h=!1,u=new v(D(m)),a=v.precision,v.precision=s=m.length*y*2;d=Z(u,e,0,1,1),1!=(r=i.plus(d.times(t))).cmp(n);)i=t,t=r,r=f,f=c.plus(d.times(r)),c=r,r=e,e=u.minus(d.times(r)),u=r;return r=Z(n.minus(i),t,0,1,1),c=c.plus(r.times(f)),i=i.plus(r.times(t)),c.s=f.s=g.s,p=Z(f,t,s,1).minus(g).abs().cmp(Z(c,i,s,1).minus(g).abs())<1?[f,t]:[c,i],v.precision=a,h=!0,p},O.toHexadecimal=O.toHex=function(n,e){return K(this,16,n,e)},O.toNearest=function(n,e){var i=this,t=i.constructor;if(i=new t(i),null==n){if(!i.d)return i;n=new t(1),e=t.rounding}else{if(n=new t(n),void 0===e?e=t.rounding:F(e,0,8),!i.d)return n.s?i:n;if(!n.d)return n.s&&(n.s=i.s),n}return n.d[0]?(h=!1,i=Z(i,n,0,e,1).times(n),h=!0,P(i)):(n.s=i.s,i=n),i},O.toNumber=function(){return+this},O.toOctal=function(n,e){return K(this,8,n,e)},O.toPower=O.pow=function(n){var e,i,t,r,s,o,u=this,c=u.constructor,f=+(n=new c(n));if(!(u.d&&n.d&&u.d[0]&&n.d[0]))return new c(w(+u,f));if((u=new c(u)).eq(1))return u;if(t=c.precision,s=c.rounding,n.eq(1))return P(u,t,s);if((e=m(n.e/y))>=n.d.length-1&&(i=f<0?-f:f)<=9007199254740991)return r=C(c,u,i,t),n.s<0?new c(1).div(r):P(r,t,s);if((o=u.s)<0){if(e<n.d.length-1)return new c(NaN);if(0==(1&n.d[e])&&(o=1),0==u.e&&1==u.d[0]&&1==u.d.length)return u.s=o,u}return(e=0!=(i=w(+u,f))&&isFinite(i)?new c(i+\"\").e:m(f*(Math.log(\"0.\"+D(u.d))/Math.LN10+u.e+1)))>c.maxE+1||e<c.minE-1?new c(e>0?o/0:0):(h=!1,c.rounding=u.s=1,i=Math.min(12,(e+\"\").length),(r=B(n.times(V(u,t+i)),t)).d&&A((r=P(r,t+5,1)).d,t,s)&&(e=t+10,+D((r=P(B(n.times(V(u,e+i)),e),e+5,1)).d).slice(t+1,t+15)+1==1e14&&(r=P(r,t+1,0))),r.s=o,h=!0,c.rounding=s,P(r,t,s))},O.toPrecision=function(n,e){var i,t=this,r=t.constructor;return void 0===n?i=R(t,t.e<=r.toExpNeg||t.e>=r.toExpPos):(F(n,1,o),void 0===e?e=r.rounding:F(e,0,8),i=R(t=P(new r(t),n,e),n<=t.e||t.e<=r.toExpNeg,n)),t.isNeg()&&!t.isZero()?\"-\"+i:i},O.toSignificantDigits=O.toSD=function(n,e){var i=this.constructor;return void 0===n?(n=i.precision,e=i.rounding):(F(n,1,o),void 0===e?e=i.rounding:F(e,0,8)),P(new i(this),n,e)},O.toString=function(){var n=this,e=n.constructor,i=R(n,n.e<=e.toExpNeg||n.e>=e.toExpPos);return n.isNeg()&&!n.isZero()?\"-\"+i:i},O.truncated=O.trunc=function(){return P(new this.constructor(this),this.e+1,1)},O.valueOf=O.toJSON=function(){var n=this,e=n.constructor,i=R(n,n.e<=e.toExpNeg||n.e>=e.toExpPos);return n.isNeg()?\"-\"+i:i};var Z=function(){function n(n,e,i){var t,r=0,s=n.length;for(n=n.slice();s--;)t=n[s]*e+r,n[s]=t%i|0,r=t/i|0;return r&&n.unshift(r),n}function e(n,e,i,t){var r,s;if(i!=t)s=i>t?1:-1;else for(r=s=0;r<i;r++)if(n[r]!=e[r]){s=n[r]>e[r]?1:-1;break}return s}function t(n,e,i,t){for(var r=0;i--;)n[i]-=r,r=n[i]<e[i]?1:0,n[i]=r*t+n[i]-e[i];for(;!n[0]&&n.length>1;)n.shift()}return function(r,s,o,u,c,f){var a,h,d,l,p,g,w,v,N,b,E,M,q,O,D,F,A,S,Z,R,L=r.constructor,T=r.s==s.s?1:-1,U=r.d,_=s.d;if(!(U&&U[0]&&_&&_[0]))return new L(r.s&&s.s&&(U?!_||U[0]!=_[0]:_)?U&&0==U[0]||!_?0*T:T/0:NaN);for(f?(p=1,h=r.e-s.e):(f=x,p=y,h=m(r.e/p)-m(s.e/p)),Z=_.length,A=U.length,b=(N=new L(T)).d=[],d=0;_[d]==(U[d]||0);d++);if(_[d]>(U[d]||0)&&h--,null==o?(O=o=L.precision,u=L.rounding):O=c?o+(r.e-s.e)+1:o,O<0)b.push(1),g=!0;else{if(O=O/p+2|0,d=0,1==Z){for(l=0,_=_[0],O++;(d<A||l)&&O--;d++)D=l*f+(U[d]||0),b[d]=D/_|0,l=D%_|0;g=l||d<A}else{for((l=f/(_[0]+1)|0)>1&&(_=n(_,l,f),U=n(U,l,f),Z=_.length,A=U.length),F=Z,M=(E=U.slice(0,Z)).length;M<Z;)E[M++]=0;(R=_.slice()).unshift(0),S=_[0],_[1]>=f/2&&++S;do{l=0,(a=e(_,E,Z,M))<0?(q=E[0],Z!=M&&(q=q*f+(E[1]||0)),(l=q/S|0)>1?(l>=f&&(l=f-1),1==(a=e(w=n(_,l,f),E,v=w.length,M=E.length))&&(l--,t(w,Z<v?R:_,v,f))):(0==l&&(a=l=1),w=_.slice()),(v=w.length)<M&&w.unshift(0),t(E,w,M,f),-1==a&&(a=e(_,E,Z,M=E.length))<1&&(l++,t(E,Z<M?R:_,M,f)),M=E.length):0===a&&(l++,E=[0]),b[d++]=l,a&&E[0]?E[M++]=U[F]||0:(E=[U[F]],M=1)}while((F++<A||void 0!==E[0])&&O--);g=void 0!==E[0]}b[0]||b.shift()}if(1==p)N.e=h,i=g;else{for(d=1,l=b[0];l>=10;l/=10)d++;N.e=d+h*p-1,P(N,c?o+N.e+1:o,u,g)}return N}}();function P(n,e,i,t){var r,s,o,u,c,f,a,d,l,p=n.constructor;n:if(null!=e){if(!(d=n.d))return n;for(r=1,u=d[0];u>=10;u/=10)r++;if((s=e-r)<0)s+=y,o=e,c=(a=d[l=0])/w(10,r-o-1)%10|0;else if((l=Math.ceil((s+1)/y))>=(u=d.length)){if(!t)break n;for(;u++<=l;)d.push(0);a=c=0,r=1,o=(s%=y)-y+1}else{for(a=u=d[l],r=1;u>=10;u/=10)r++;c=(o=(s%=y)-y+r)<0?0:a/w(10,r-o-1)%10|0}if(t=t||e<0||void 0!==d[l+1]||(o<0?a:a%w(10,r-o-1)),f=i<4?(c||t)&&(0==i||i==(n.s<0?3:2)):c>5||5==c&&(4==i||t||6==i&&(s>0?o>0?a/w(10,r-o):0:d[l-1])%10&1||i==(n.s<0?8:7)),e<1||!d[0])return d.length=0,f?(e-=n.e+1,d[0]=w(10,(y-e%y)%y),n.e=-e||0):d[0]=n.e=0,n;if(0==s?(d.length=l,u=1,l--):(d.length=l+1,u=w(10,y-s),d[l]=o>0?(a/w(10,r-o)%w(10,o)|0)*u:0),f)for(;;){if(0==l){for(s=1,o=d[0];o>=10;o/=10)s++;for(o=d[0]+=u,u=1;o>=10;o/=10)u++;s!=u&&(n.e++,d[0]==x&&(d[0]=1));break}if(d[l]+=u,d[l]!=x)break;d[l--]=0,u=1}for(s=d.length;0===d[--s];)d.pop()}return h&&(n.e>p.maxE?(n.d=null,n.e=NaN):n.e<p.minE&&(n.e=0,n.d=[0])),n}function R(n,e,i){if(!n.isFinite())return j(n);var t,r=n.e,s=D(n.d),o=s.length;return e?(i&&(t=i-o)>0?s=s.charAt(0)+\".\"+s.slice(1)+k(t):o>1&&(s=s.charAt(0)+\".\"+s.slice(1)),s=s+(n.e<0?\"e\":\"e+\")+n.e):r<0?(s=\"0.\"+k(-r-1)+s,i&&(t=i-o)>0&&(s+=k(t))):r>=o?(s+=k(r+1-o),i&&(t=i-r-1)>0&&(s=s+\".\"+k(t))):((t=r+1)<o&&(s=s.slice(0,t)+\".\"+s.slice(t)),i&&(t=i-o)>0&&(r+1===o&&(s+=\".\"),s+=k(t))),s}function L(n,e){var i=n[0];for(e*=y;i>=10;i/=10)e++;return e}function T(n,e,i){if(e>M)throw h=!0,i&&(n.precision=i),Error(p);return P(new n(c),e,1,!0)}function U(n,e,i){if(e>q)throw Error(p);return P(new n(f),e,i,!0)}function _(n){var e=n.length-1,i=e*y+1;if(e=n[e]){for(;e%10==0;e/=10)i--;for(e=n[0];e>=10;e/=10)i++}return i}function k(n){for(var e=\"\";n--;)e+=\"0\";return e}function C(n,e,i,t){var r,s=new n(1),o=Math.ceil(t/y+4);for(h=!1;;){if(i%2&&Q((s=s.times(e)).d,o)&&(r=!0),0===(i=m(i/2))){i=s.d.length-1,r&&0===s.d[i]&&++s.d[i];break}Q((e=e.times(e)).d,o)}return h=!0,s}function I(n){return 1&n.d[n.d.length-1]}function H(n,e,i){for(var t,r=new n(e[0]),s=0;++s<e.length;){if(!(t=new n(e[s])).s){r=t;break}r[i](t)&&(r=t)}return r}function B(n,e){var i,t,r,s,o,u,c,f=0,a=0,d=0,l=n.constructor,p=l.rounding,g=l.precision;if(!n.d||!n.d[0]||n.e>17)return new l(n.d?n.d[0]?n.s<0?0:1/0:1:n.s?n.s<0?0:n:NaN);for(null==e?(h=!1,c=g):c=e,u=new l(.03125);n.e>-2;)n=n.times(u),d+=5;for(c+=t=Math.log(w(2,d))/Math.LN10*2+5|0,i=s=o=new l(1),l.precision=c;;){if(s=P(s.times(n),c,1),i=i.times(++a),D((u=o.plus(Z(s,i,c,1))).d).slice(0,c)===D(o.d).slice(0,c)){for(r=d;r--;)o=P(o.times(o),c,1);if(null!=e)return l.precision=g,o;if(!(f<3&&A(o.d,c-t,p,f)))return P(o,l.precision=g,p,h=!0);l.precision=c+=10,i=s=u=new l(1),a=0,f++}o=u}}function V(n,e){var i,t,r,s,o,u,c,f,a,d,l,p=1,g=n,m=g.d,w=g.constructor,v=w.rounding,N=w.precision;if(g.s<0||!m||!m[0]||!g.e&&1==m[0]&&1==m.length)return new w(m&&!m[0]?-1/0:1!=g.s?NaN:m?0:g);if(null==e?(h=!1,a=N):a=e,w.precision=a+=10,t=(i=D(m)).charAt(0),!(Math.abs(s=g.e)<15e14))return f=T(w,a+2,N).times(s+\"\"),g=V(new w(t+\".\"+i.slice(1)),a-10).plus(f),w.precision=N,null==e?P(g,N,v,h=!0):g;for(;t<7&&1!=t||1==t&&i.charAt(1)>3;)t=(i=D((g=g.times(n)).d)).charAt(0),p++;for(s=g.e,t>1?(g=new w(\"0.\"+i),s++):g=new w(t+\".\"+i.slice(1)),d=g,c=o=g=Z(g.minus(1),g.plus(1),a,1),l=P(g.times(g),a,1),r=3;;){if(o=P(o.times(l),a,1),D((f=c.plus(Z(o,new w(r),a,1))).d).slice(0,a)===D(c.d).slice(0,a)){if(c=c.times(2),0!==s&&(c=c.plus(T(w,a+2,N).times(s+\"\"))),c=Z(c,new w(p),a,1),null!=e)return w.precision=N,c;if(!A(c.d,a-10,v,u))return P(c,w.precision=N,v,h=!0);w.precision=a+=10,f=o=g=Z(d.minus(1),d.plus(1),a,1),l=P(g.times(g),a,1),r=u=1}c=f,r+=2}}function j(n){return String(n.s*n.s/0)}function $(n,e){var i,t,r;for((i=e.indexOf(\".\"))>-1&&(e=e.replace(\".\",\"\")),(t=e.search(/e/i))>0?(i<0&&(i=t),i+=+e.slice(t+1),e=e.substring(0,t)):i<0&&(i=e.length),t=0;48===e.charCodeAt(t);t++);for(r=e.length;48===e.charCodeAt(r-1);--r);if(e=e.slice(t,r)){if(r-=t,n.e=i=i-t-1,n.d=[],t=(i+1)%y,i<0&&(t+=y),t<r){for(t&&n.d.push(+e.slice(0,t)),r-=y;t<r;)n.d.push(+e.slice(t,t+=y));e=e.slice(t),t=y-e.length}else t-=r;for(;t--;)e+=\"0\";n.d.push(+e),h&&(n.e>n.constructor.maxE?(n.d=null,n.e=NaN):n.e<n.constructor.minE&&(n.e=0,n.d=[0]))}else n.e=0,n.d=[0];return n}function W(n,i){var t,r,s,o,u,c,f,a,d;if(\"Infinity\"===i||\"NaN\"===i)return+i||(n.s=NaN),n.e=NaN,n.d=null,n;if(N.test(i))t=16,i=i.toLowerCase();else if(v.test(i))t=2;else{if(!b.test(i))throw Error(l+i);t=8}for((o=i.search(/p/i))>0?(f=+i.slice(o+1),i=i.substring(2,o)):i=i.slice(2),u=(o=i.indexOf(\".\"))>=0,r=n.constructor,u&&(o=(c=(i=i.replace(\".\",\"\")).length)-o,s=C(r,new r(t),o,2*o)),o=d=(a=S(i,t,x)).length-1;0===a[o];--o)a.pop();return o<0?new r(0*n.s):(n.e=L(a,d),n.d=a,h=!1,u&&(n=Z(n,s,4*c)),f&&(n=n.times(Math.abs(f)<54?w(2,f):e.pow(2,f))),h=!0,n)}function J(n,e,i,t,r){var s,o,u,c,f=n.precision,a=Math.ceil(f/y);for(h=!1,c=i.times(i),u=new n(t);;){if(o=Z(u.times(c),new n(e++*e++),f,1),u=r?t.plus(o):t.minus(o),t=Z(o.times(c),new n(e++*e++),f,1),void 0!==(o=u.plus(t)).d[a]){for(s=a;o.d[s]===u.d[s]&&s--;);if(-1==s)break}s=u,u=t,t=o,o=s,0}return h=!0,o.d.length=a+1,o}function z(n,e){for(var i=n;--e;)i*=n;return i}function G(n,e){var i,t=e.s<0,s=U(n,n.precision,1),o=s.times(.5);if((e=e.abs()).lte(o))return r=t?4:1,e;if((i=e.divToInt(s)).isZero())r=t?3:2;else{if((e=e.minus(i.times(s))).lte(o))return r=I(i)?t?2:3:t?4:1,e;r=I(i)?t?1:4:t?3:2}return e.minus(s).abs()}function K(n,e,t,r){var s,c,f,a,h,d,l,p,g,m=n.constructor,w=void 0!==t;if(w?(F(t,1,o),void 0===r?r=m.rounding:F(r,0,8)):(t=m.precision,r=m.rounding),n.isFinite()){for(w?(s=2,16==e?t=4*t-3:8==e&&(t=3*t-2)):s=e,(f=(l=R(n)).indexOf(\".\"))>=0&&(l=l.replace(\".\",\"\"),(g=new m(1)).e=l.length-f,g.d=S(R(g),10,s),g.e=g.d.length),c=h=(p=S(l,10,s)).length;0==p[--h];)p.pop();if(p[0]){if(f<0?c--:((n=new m(n)).d=p,n.e=c,p=(n=Z(n,g,t,r,0,s)).d,c=n.e,d=i),f=p[t],a=s/2,d=d||void 0!==p[t+1],d=r<4?(void 0!==f||d)&&(0===r||r===(n.s<0?3:2)):f>a||f===a&&(4===r||d||6===r&&1&p[t-1]||r===(n.s<0?8:7)),p.length=t,d)for(;++p[--t]>s-1;)p[t]=0,t||(++c,p.unshift(1));for(h=p.length;!p[h-1];--h);for(f=0,l=\"\";f<h;f++)l+=u.charAt(p[f]);if(w){if(h>1)if(16==e||8==e){for(f=16==e?4:3,--h;h%f;h++)l+=\"0\";for(h=(p=S(l,s,e)).length;!p[h-1];--h);for(f=1,l=\"1.\";f<h;f++)l+=u.charAt(p[f])}else l=l.charAt(0)+\".\"+l.slice(1);l=l+(c<0?\"p\":\"p+\")+c}else if(c<0){for(;++c;)l=\"0\"+l;l=\"0.\"+l}else if(++c>h)for(c-=h;c--;)l+=\"0\";else c<h&&(l=l.slice(0,c)+\".\"+l.slice(c))}else l=w?\"0p+0\":\"0\";l=(16==e?\"0x\":2==e?\"0b\":8==e?\"0o\":\"\")+l}else l=j(n);return n.s<0?\"-\"+l:l}function Q(n,e){if(n.length>e)return n.length=e,!0}function X(n){return new this(n).abs()}function Y(n){return new this(n).acos()}function nn(n){return new this(n).acosh()}function en(n,e){return new this(n).plus(e)}function tn(n){return new this(n).asin()}function rn(n){return new this(n).asinh()}function sn(n){return new this(n).atan()}function on(n){return new this(n).atanh()}function un(n,e){n=new this(n),e=new this(e);var i,t=this.precision,r=this.rounding,s=t+4;return n.s&&e.s?n.d||e.d?!e.d||n.isZero()?(i=e.s<0?U(this,t,r):new this(0)).s=n.s:!n.d||e.isZero()?(i=U(this,s,1).times(.5)).s=n.s:e.s<0?(this.precision=s,this.rounding=1,i=this.atan(Z(n,e,s,1)),e=U(this,s,1),this.precision=t,this.rounding=r,i=n.s<0?i.minus(e):i.plus(e)):i=this.atan(Z(n,e,s,1)):(i=U(this,s,1).times(e.s>0?.25:.75)).s=n.s:i=new this(NaN),i}function cn(n){return new this(n).cbrt()}function fn(n){return P(n=new this(n),n.e+1,2)}function an(n){if(!n||\"object\"!=typeof n)throw Error(d+\"Object expected\");var e,i,t,r=!0===n.defaults,u=[\"precision\",1,o,\"rounding\",0,8,\"toExpNeg\",-s,0,\"toExpPos\",0,s,\"maxE\",0,s,\"minE\",-s,0,\"modulo\",0,9];for(e=0;e<u.length;e+=3)if(i=u[e],r&&(this[i]=a[i]),void 0!==(t=n[i])){if(!(m(t)===t&&t>=u[e+1]&&t<=u[e+2]))throw Error(l+i+\": \"+t);this[i]=t}if(i=\"crypto\",r&&(this[i]=a[i]),void 0!==(t=n[i])){if(!0!==t&&!1!==t&&0!==t&&1!==t)throw Error(l+i+\": \"+t);if(t){if(\"undefined\"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw Error(g);this[i]=!0}else this[i]=!1}return this}function hn(n){return new this(n).cos()}function dn(n){return new this(n).cosh()}function ln(n,e){return new this(n).div(e)}function pn(n){return new this(n).exp()}function gn(n){return P(n=new this(n),n.e+1,3)}function mn(){var n,e,i=new this(0);for(h=!1,n=0;n<arguments.length;)if((e=new this(arguments[n++])).d)i.d&&(i=i.plus(e.times(e)));else{if(e.s)return h=!0,new this(1/0);i=e}return h=!0,i.sqrt()}function wn(n){return n instanceof e||n&&\"[object Decimal]\"===n.name||!1}function vn(n){return new this(n).ln()}function Nn(n,e){return new this(n).log(e)}function bn(n){return new this(n).log(2)}function En(n){return new this(n).log(10)}function xn(){return H(this,arguments,\"lt\")}function yn(){return H(this,arguments,\"gt\")}function Mn(n,e){return new this(n).mod(e)}function qn(n,e){return new this(n).mul(e)}function On(n,e){return new this(n).pow(e)}function Dn(n){var e,i,t,r,s=0,u=new this(1),c=[];if(void 0===n?n=this.precision:F(n,1,o),t=Math.ceil(n/y),this.crypto)if(crypto.getRandomValues)for(e=crypto.getRandomValues(new Uint32Array(t));s<t;)(r=e[s])>=429e7?e[s]=crypto.getRandomValues(new Uint32Array(1))[0]:c[s++]=r%1e7;else{if(!crypto.randomBytes)throw Error(g);for(e=crypto.randomBytes(t*=4);s<t;)(r=e[s]+(e[s+1]<<8)+(e[s+2]<<16)+((127&e[s+3])<<24))>=214e7?crypto.randomBytes(4).copy(e,s):(c.push(r%1e7),s+=4);s=t/4}else for(;s<t;)c[s++]=1e7*Math.random()|0;for(t=c[--s],n%=y,t&&n&&(r=w(10,y-n),c[s]=(t/r|0)*r);0===c[s];s--)c.pop();if(s<0)i=0,c=[0];else{for(i=-1;0===c[0];i-=y)c.shift();for(t=1,r=c[0];r>=10;r/=10)t++;t<y&&(i-=y-t)}return u.e=i,u.d=c,u}function Fn(n){return P(n=new this(n),n.e+1,this.rounding)}function An(n){return(n=new this(n)).d?n.d[0]?n.s:0*n.s:n.s||NaN}function Sn(n){return new this(n).sin()}function Zn(n){return new this(n).sinh()}function Pn(n){return new this(n).sqrt()}function Rn(n,e){return new this(n).sub(e)}function Ln(n){return new this(n).tan()}function Tn(n){return new this(n).tanh()}function Un(n){return P(n=new this(n),n.e+1,1)}return(e=function n(e){var i,t,r;function s(n){var e,i,t,r=this;if(!(r instanceof s))return new s(n);if(r.constructor=s,n instanceof s)return r.s=n.s,void(h?!n.d||n.e>s.maxE?(r.e=NaN,r.d=null):n.e<s.minE?(r.e=0,r.d=[0]):(r.e=n.e,r.d=n.d.slice()):(r.e=n.e,r.d=n.d?n.d.slice():n.d));if(\"number\"==(t=typeof n)){if(0===n)return r.s=1/n<0?-1:1,r.e=0,void(r.d=[0]);if(n<0?(n=-n,r.s=-1):r.s=1,n===~~n&&n<1e7){for(e=0,i=n;i>=10;i/=10)e++;return void(h?e>s.maxE?(r.e=NaN,r.d=null):e<s.minE?(r.e=0,r.d=[0]):(r.e=e,r.d=[n]):(r.e=e,r.d=[n]))}return 0*n!=0?(n||(r.s=NaN),r.e=NaN,void(r.d=null)):$(r,n.toString())}if(\"string\"!==t)throw Error(l+n);return 45===(i=n.charCodeAt(0))?(n=n.slice(1),r.s=-1):(43===i&&(n=n.slice(1)),r.s=1),E.test(n)?$(r,n):W(r,n)}if(s.prototype=O,s.ROUND_UP=0,s.ROUND_DOWN=1,s.ROUND_CEIL=2,s.ROUND_FLOOR=3,s.ROUND_HALF_UP=4,s.ROUND_HALF_DOWN=5,s.ROUND_HALF_EVEN=6,s.ROUND_HALF_CEIL=7,s.ROUND_HALF_FLOOR=8,s.EUCLID=9,s.config=s.set=an,s.clone=n,s.isDecimal=wn,s.abs=X,s.acos=Y,s.acosh=nn,s.add=en,s.asin=tn,s.asinh=rn,s.atan=sn,s.atanh=on,s.atan2=un,s.cbrt=cn,s.ceil=fn,s.cos=hn,s.cosh=dn,s.div=ln,s.exp=pn,s.floor=gn,s.hypot=mn,s.ln=vn,s.log=Nn,s.log10=En,s.log2=bn,s.max=xn,s.min=yn,s.mod=Mn,s.mul=qn,s.pow=On,s.random=Dn,s.round=Fn,s.sign=An,s.sin=Sn,s.sinh=Zn,s.sqrt=Pn,s.sub=Rn,s.tan=Ln,s.tanh=Tn,s.trunc=Un,void 0===e&&(e={}),e&&!0!==e.defaults)for(r=[\"precision\",\"rounding\",\"toExpNeg\",\"toExpPos\",\"maxE\",\"minE\",\"modulo\",\"crypto\"],i=0;i<r.length;)e.hasOwnProperty(t=r[i++])||(e[t]=this[t]);return s.config(e),s}(a)).default=e.Decimal=e,c=new e(c),f=new e(f),\"function\"==typeof define&&define.amd?define(function(){return e}):\"undefined\"!=typeof module&&module.exports?(\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator&&(O[Symbol.for(\"nodejs.util.inspect.custom\")]=O.toString,O[Symbol.toStringTag]=\"Decimal\"),module.exports=e):(n||(n=\"undefined\"!=typeof self&&self&&self.self==self?self:window),t=n.Decimal,e.noConflict=function(){return n.Decimal=t,e},n.Decimal=e),e}(this)\r\n//    bigDec: require('decimal.js')\r\n});\r\n\r\nif((typeof module) !== 'undefined') {\r\n    module.exports = nerdamer;\r\n};","/* global module */\r\n\r\n/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\r\n\r\nif((typeof module) !== 'undefined' && typeof nerdamer === 'undefined') {\r\n    var nerdamer = require('./nerdamer.core.js');\r\n    require('./Algebra.js');\r\n}\r\n\r\n(function () {\r\n    \"use strict\";\r\n\r\n    var core = nerdamer.getCore(),\r\n            _ = core.PARSER,\r\n            Frac = core.Frac,\r\n            Settings = core.Settings,\r\n            isSymbol = core.Utils.isSymbol,\r\n            FN = core.groups.FN,\r\n            Symbol = core.Symbol,\r\n            text = core.Utils.text,\r\n            inBrackets = core.Utils.inBrackets,\r\n            isInt = core.Utils.isInt,\r\n            format = core.Utils.format,\r\n            even = core.Utils.even,\r\n            evaluate = core.Utils.evaluate,\r\n            N = core.groups.N,\r\n            S = core.groups.S,\r\n            FN = core.groups.FN,\r\n            PL = core.groups.PL,\r\n            CP = core.groups.CP,\r\n            CB = core.groups.CB,\r\n            EX = core.groups.EX,\r\n            P = core.groups.P,\r\n            LOG = Settings.LOG,\r\n            EXP = 'exp',\r\n            ABS = 'abs',\r\n            SQRT = 'sqrt',\r\n            SIN = 'sin',\r\n            COS = 'cos',\r\n            TAN = 'tan',\r\n            SEC = 'sec',\r\n            CSC = 'csc',\r\n            COT = 'cot',\r\n            ASIN = 'asin',\r\n            ACOS = 'acos',\r\n            ATAN = 'atan',\r\n            ASEC = 'asec',\r\n            ACSC = 'acsc',\r\n            ACOT = 'acot',\r\n            SINH = 'sinh',\r\n            COSH = 'cosh',\r\n            TANH = 'tanh',\r\n            CSCH = 'csch',\r\n            SECH = 'sech',\r\n            COTH = 'coth',\r\n            ASECH = 'asech',\r\n            ACSCH = 'acsch',\r\n            ACOTH = 'acoth';\r\n\r\n    //custom errors\r\n    function NoIntegralFound(msg) {\r\n        this.message = msg || \"\";\r\n    }\r\n    NoIntegralFound.prototype = new Error();\r\n\r\n    //Preparations\r\n    Symbol.prototype.hasIntegral = function () {\r\n        return this.containsFunction('integrate');\r\n    };\r\n    //transforms a function\r\n    Symbol.prototype.fnTransform = function () {\r\n        if(this.group !== FN)\r\n            return this;\r\n        var retval, a = this.args[0];\r\n        var m = new Symbol(this.multiplier);\r\n        var sym = this.clone().toUnitMultiplier();\r\n        if(this.isLinear()) {\r\n            switch(this.fname) {\r\n                case SINH:\r\n                    retval = _.parse(format('(e^({0})-e^(-({0})))/2', a));\r\n                    break;\r\n                case COSH:\r\n                    retval = _.parse(format('(e^({0})+e^(-({0})))/2', a));\r\n                    break;\r\n                case TANH:\r\n                    retval = _.parse(format('(e^({0})-e^(-({0})))/(e^({0})+e^(-({0})))', a));\r\n                    break;\r\n                case TAN:\r\n                    retval = _.parse(format('sin({0})/cos({0})', a));\r\n                    break;\r\n                case CSC:\r\n                    retval = _.parse(format('1/sin({0})', a));\r\n                    break;\r\n                case SEC:\r\n                    retval = _.parse(format('1/cos({0})', a));\r\n                    break;\r\n                default:\r\n                    retval = sym;\r\n            }\r\n        }\r\n        else if(this.power.equals(2)) {\r\n            switch(this.fname) {\r\n                case SIN:\r\n                    retval = _.parse(format('1/2-cos(2*({0}))/2', a));\r\n                    break;\r\n                case COS:\r\n                    retval = _.parse(format('1/2+cos(2*({0}))/2', a));\r\n                    break;\r\n                case TAN:\r\n                    //retval = _.parse(format('(1-cos(2*({0})))/(1+cos(2*({0})))', a));\r\n                    retval = _.parse(format('sin({0})^2/cos({0})^2', a));\r\n                    break;\r\n                case COSH:\r\n                    retval = _.parse(format('1/2+cosh(2*({0}))/2', a));\r\n                    break;\r\n                case SINH:\r\n                    retval = _.parse(format('-1/2+cosh(2*({0}))/2', a));\r\n                    break;\r\n                case TANH:\r\n                    retval = _.parse(format('(1+cosh(2*({0})))/(-1+cosh(2*({0})))', a));\r\n                    break;\r\n                case SEC:\r\n                    retval = _.parse(format('(1-cos(2*({0})))/(1+cos(2*({0})))+1', a));\r\n                    break;\r\n                default:\r\n                    retval = sym;\r\n            }\r\n        }\r\n        else if(this.fname === SEC) {\r\n            retval = _.parse(format('1/cos({0})^({1})', this.args[0], this.power));\r\n        }\r\n        else if(this.fname === CSC) {\r\n            retval = _.parse(format('1/sin({0})^({1})', this.args[0], this.power));\r\n        }\r\n        else if(this.fname === TAN) {\r\n            if(this.power.lessThan(0)) {\r\n                retval = _.parse(format('cos({0})^(-({1}))/sin({0})^({1})', this.args[0], this.power.negate()));\r\n            }\r\n            else {\r\n                retval = _.parse(format('sin({0})^({1})/cos({0})^({1})', this.args[0], this.power));\r\n            }\r\n        }\r\n        else if(this.fname === SIN && this.power.lessThan(0)) {\r\n            retval = _.parse(format('csc({0})^(-({1}))', this.args[0], this.power.negate()));\r\n        }\r\n        else if(this.fname === COS && this.power.lessThan(0)) {\r\n            retval = _.parse(format('sec({0})^(-({1}))', this.args[0], this.power.negate()));\r\n        }\r\n        else if(this.fname === SIN && this.power.equals(3)) {\r\n            retval = _.parse(format('(3*sin({0})-sin(3*({0})))/4', this.args[0]));\r\n        }\r\n        else if(this.fname === COS && this.power.equals(3)) {\r\n            retval = _.parse(format('(cos(3*({0}))+3*cos({0}))/4', this.args[0]));\r\n        }\r\n        //cos(a*x)^(2*n) or sin(a*x)^(2*n)\r\n        else if((this.fname === COS || this.fname === SIN) && even(this.power)) {\r\n            var n = this.power / 2;\r\n            //convert to a double angle\r\n            var double_angle = _.pow(this.clone().toLinear(), _.parse(2)).fnTransform();\r\n            //raise to the n and expand\r\n            var transformed = _.expand(_.pow(double_angle, _.parse(n)));\r\n\r\n            retval = new Symbol(0);\r\n\r\n            transformed.each(function (s) {\r\n                var t = s.fnTransform();\r\n                retval = _.add(retval, t);\r\n            }, true);\r\n        }\r\n        else\r\n            retval = sym;\r\n\r\n        return _.multiply(retval, m);\r\n    };\r\n\r\n    Symbol.prototype.hasTrig = function () {\r\n        if(this.isConstant(true) || this.group === S)\r\n            return false;\r\n        if(this.fname && (core.Utils.in_trig(this.fname) || core.Utils.in_inverse_trig(this.fname)))\r\n            return true;\r\n        if(this.symbols) {\r\n            for(var x in this.symbols)\r\n                if(this.symbols[x].hasTrig())\r\n                    return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    core.Expression.prototype.hasIntegral = function () {\r\n        return this.symbol.hasIntegral();\r\n    };\r\n    /**\r\n     * Attempts to rewrite a symbol under one common denominator\r\n     * @param {Symbol} symbol \r\n     */\r\n    core.Utils.toCommonDenominator = function (symbol) {\r\n        //transform x/a+x -> (ax+x)/a\r\n        if(symbol.isComposite() && symbol.isLinear()) {\r\n            var m = new Symbol(symbol.multiplier);\r\n            var denominator = new Symbol(1);\r\n            var numerator = new Symbol(0);\r\n            symbol.each(function (x) {\r\n                denominator = _.multiply(denominator, x.getDenom());\r\n            }, true);\r\n\r\n            //remove the denomitor in each term\r\n            symbol.each(function (x) {\r\n                var num = x.getNum();\r\n                var den = x.getDenom();\r\n                var factor = _.multiply(num, _.divide(denominator.clone(), den));\r\n                numerator = _.add(numerator, factor);\r\n            });\r\n            var retval = _.multiply(m, core.Algebra.divide(_.expand(numerator), _.expand(denominator)));\r\n            return retval;\r\n        }\r\n        return symbol;\r\n    };\r\n    //A function to check if a function name is an inverse trig function\r\n    core.Utils.in_inverse_trig = function (x) {\r\n        var inv_trig_fns = [ASIN, ACOS, ATAN, ACSC, ASEC, ACOT];\r\n        return inv_trig_fns.indexOf(x) !== -1;\r\n    };\r\n    //A function to check if a function name is a trig function\r\n    core.Utils.in_trig = function (x) {\r\n        var trig_fns = [COS, SIN, TAN, SEC, CSC, COT];\r\n        return trig_fns.indexOf(x) !== -1;\r\n    };\r\n\r\n    core.Utils.in_htrig = function (x) {\r\n        var trig_fns = [SINH, COSH, TANH, ACSCH, ASECH, ACOTH];\r\n        return trig_fns.indexOf(x) !== -1;\r\n    };\r\n\r\n    // Matrix functions\r\n    core.Matrix.jacobian = function (eqns, vars) {\r\n        var jacobian = new core.Matrix();\r\n        //get the variables if not supplied\r\n        if(!vars) {\r\n            vars = core.Utils.arrayGetVariables(eqns);\r\n        }\r\n\r\n        vars.forEach(function (v, i) {\r\n            eqns.forEach(function (eq, j) {\r\n                var e = core.Calculus.diff(eq.clone(), v);\r\n                jacobian.set(j, i, e);\r\n            });\r\n        });\r\n\r\n        return jacobian;\r\n    };\r\n\r\n    core.Matrix.prototype.max = function () {\r\n        var max = new Symbol(0);\r\n        this.each(function (x) {\r\n            var e = x.abs();\r\n            if(e.gt(max))\r\n                max = e;\r\n        });\r\n        return max;\r\n    };\r\n\r\n    core.Matrix.cMatrix = function (value, vars) {\r\n        var m = new core.Matrix();\r\n        //make an initial guess\r\n        vars.forEach(function (v, i) {\r\n            m.set(i, 0, _.parse(value));\r\n        });\r\n        return m;\r\n    };\r\n\r\n    var all_functions = core.Utils.all_functions = function (arr) {\r\n        for(var i = 0, l = arr.length; i < l; i++)\r\n            if(arr[i].group !== FN)\r\n                return false;\r\n        return true;\r\n    },\r\n            cosAsinBtransform = core.Utils.cosAsinBtranform = function (symbol1, symbol2) {\r\n                var a, b;\r\n                a = symbol1.args[0];\r\n                b = symbol2.args[0];\r\n                return _.parse(format('(sin(({0})+({1}))-sin(({0})-({1})))/2', a, b));\r\n            },\r\n            cosAsinAtransform = core.Utils.cosAsinAtranform = function (symbol1, symbol2) {\r\n                //TODO: temporary fix for integrate(e^x*sin(x)*cos(x)^2).\r\n                //we technically know how to do this transform but more is needed for correct output\r\n                if(Number(symbol2.power) !== 1)\r\n                    return _.multiply(symbol1, symbol2);\r\n                var a;\r\n                a = symbol1.args[0];\r\n                return _.parse(format('(sin(2*({0})))/2', a));\r\n            },\r\n            sinAsinBtransform = core.Utils.cosAsinBtranform = function (symbol1, symbol2) {\r\n                var a, b;\r\n                a = symbol1.args[0];\r\n                b = symbol2.args[0];\r\n                return _.parse(format('(cos(({0})+({1}))-cos(({0})-({1})))/2', a, b));\r\n            },\r\n            trigTransform = core.Utils.trigTransform = function (arr) {\r\n                var map = {}, symbol, t,\r\n                        retval = new Symbol(1);\r\n                for(var i = 0, l = arr.length; i < l; i++) {\r\n                    symbol = arr[i];\r\n\r\n                    if(symbol.group === FN) {\r\n                        var fname = symbol.fname;\r\n\r\n                        if(fname === COS && map[SIN]) {\r\n\r\n                            if(map[SIN].args[0].toString() !== symbol.args[0].toString()) {\r\n                                t = cosAsinBtransform(symbol, map[SIN]);\r\n                            }\r\n                            else {\r\n                                t = cosAsinAtransform(symbol, map[SIN]);\r\n                            }\r\n                            delete map[SIN];\r\n\r\n                            retval = _.multiply(retval, t);\r\n                        }\r\n                        else if(fname === SIN && map[COS]) {\r\n                            if(map[COS].args[0].toString() !== symbol.args[0].toString()) {\r\n                                t = cosAsinBtransform(symbol, map[COS]);\r\n                            }\r\n                            else {\r\n                                t = cosAsinAtransform(symbol, map[COS]);\r\n                            }\r\n                            delete map[COS];\r\n\r\n                            retval = _.multiply(retval, t);\r\n                        }\r\n                        else if(fname === SIN && map[SIN]) {\r\n                            if(map[SIN].args[0].toString() !== symbol.args[0].toString()) {\r\n                                t = sinAsinBtransform(symbol, map[SIN]);\r\n                                delete map[SIN];\r\n                            }\r\n                            else {\r\n                                //This should actually be redundant code but let's put just in case\r\n                                t = _.multiply(symbol, map[SIN]);\r\n                                delete map[SIN];\r\n                            }\r\n\r\n                            retval = t;\r\n                        }\r\n                        else {\r\n                            map[fname] = symbol;\r\n                        }\r\n                    }\r\n                    else\r\n                        retval = _.multiply(retval, symbol);\r\n                }\r\n\r\n                //put back the remaining functions\r\n                for(var x in map)\r\n                    retval = _.multiply(retval, map[x]);\r\n\r\n                return retval;\r\n\r\n            };\r\n\r\n    core.Settings.integration_depth = 10;\r\n\r\n    core.Settings.max_lim_depth = 10;\r\n\r\n    var __ = core.Calculus = {\r\n\r\n        version: '1.4.6',\r\n\r\n        sum: function (fn, index, start, end) {\r\n            if(!(index.group === core.groups.S))\r\n                throw new core.exceptions.NerdamerTypeError('Index must be symbol. ' + text(index) + ' provided');\r\n            index = index.value;\r\n            var retval;\r\n            if(core.Utils.isNumericSymbol(start) && core.Utils.isNumericSymbol(end)) {\r\n                var modifier = end - start < 200 ? '' : 'PARSE2NUMBER';\r\n                start = Number(start);\r\n                end = Number(end);\r\n                retval = core.Utils.block(modifier, function () {\r\n                    var f = fn.text(),\r\n                            subs = {'~': true}, //lock subs. Is this even being used?\r\n                            retval = new core.Symbol(0);\r\n\r\n                    for(var i = start; i <= end; i++) {\r\n                        subs[index] = new Symbol(i);\r\n                        var ans = _.parse(f, subs);\r\n                        retval = _.add(retval, ans);\r\n                    }\r\n                    return retval;\r\n                });\r\n            }\r\n            else {\r\n                retval = _.symfunction('sum', arguments);\r\n            }\r\n\r\n            return retval;\r\n        },\r\n        product: function (fn, index, start, end) {\r\n            if(!(index.group === core.groups.S))\r\n                throw new core.exceptions.NerdamerTypeError('Index must be symbol. ' + text(index) + ' provided');\r\n            index = index.value;\r\n            var retval;\r\n            if(core.Utils.isNumericSymbol(start) && core.Utils.isNumericSymbol(end)) {\r\n                var modifier = end - start < 200 ? '' : 'PARSE2NUMBER';\r\n                retval = core.Utils.block(modifier, function () {\r\n                    start = Number(start);\r\n                    end = Number(end.multiplier);\r\n\r\n                    var f = fn.text(),\r\n                            subs = {},\r\n                            retval = new core.Symbol(1);\r\n\r\n                    for(var i = start; i <= end; i++) {\r\n                        subs[index] = new Symbol(i);\r\n                        retval = _.multiply(retval, _.parse(f, subs));\r\n                    }\r\n                    return retval;\r\n                });\r\n            }\r\n            else {\r\n                retval = _.symfunction('product', arguments);\r\n            }\r\n\r\n            return retval;\r\n        },\r\n        diff: function (symbol, wrt, nth) {\r\n            if(core.Utils.isVector(symbol)) {\r\n                var vector = new core.Vector([]);\r\n                symbol.each(function (x) {\r\n                    vector.elements.push(__.diff(x, wrt, nth));\r\n                });\r\n                return vector;\r\n            }\r\n            else if(core.Utils.isMatrix(symbol)) {\r\n                var matrix = new core.Matrix();\r\n                symbol.each(function (x, i, j) {\r\n                    matrix.set(i, j, __.diff(x, wrt, nth));\r\n                });\r\n                return matrix;\r\n            }\r\n\r\n            var d = isSymbol(wrt) ? wrt.text() : wrt;\r\n            //the nth derivative\r\n            nth = isSymbol(nth) ? nth.multiplier : nth || 1;\r\n\r\n            if(d === undefined)\r\n                d = core.Utils.variables(symbol)[0];\r\n\r\n            //unwrap sqrt\r\n            if(symbol.group === FN && symbol.fname === SQRT) {\r\n                var s = symbol.args[0],\r\n                        sp = symbol.power.clone();\r\n                //these groups go to zero anyway so why waste time?\r\n                if(s.group !== N || s.group !== P) {\r\n                    s.power = isSymbol(s.power) ? _.multiply(s.power, _.multiply(new Symbol(1 / 2)), sp) : s.power.multiply(new Frac(0.5)).multiply(sp);\r\n                    s.multiplier = s.multiplier.multiply(symbol.multiplier);\r\n                }\r\n\r\n                symbol = s;\r\n            }\r\n\r\n            if(symbol.group === FN && !isSymbol(symbol.power)) {\r\n                var a = derive(_.parse(symbol));\r\n                var b = __.diff(symbol.args[0].clone(), d);\r\n                symbol = _.multiply(a, b);//chain rule\r\n            }\r\n            else {\r\n                symbol = derive(symbol);\r\n            }\r\n\r\n            if(nth > 1) {\r\n                nth--;\r\n                symbol = __.diff(symbol, wrt, nth);\r\n            }\r\n\r\n            return symbol;\r\n\r\n            // Equivalent to \"derivative of the outside\".\r\n            function polydiff(symbol) {\r\n                if(symbol.value === d || symbol.contains(d, true)) {\r\n                    symbol.multiplier = symbol.multiplier.multiply(symbol.power);\r\n                    symbol.power = symbol.power.subtract(new Frac(1));\r\n                    if(symbol.power.equals(0)) {\r\n                        symbol = Symbol(symbol.multiplier);\r\n                    }\r\n                }\r\n\r\n                return symbol;\r\n            }\r\n            \r\n            function derive(symbol) {\r\n                var g = symbol.group, a, b, cp;\r\n\r\n                if(g === N || g === S && symbol.value !== d || g === P) {\r\n                    symbol = Symbol(0);\r\n                }\r\n                else if(g === S) {\r\n                    symbol = polydiff(symbol);\r\n                }\r\n                else if(g === CB) {\r\n                    var m = symbol.multiplier.clone();\r\n                    symbol.toUnitMultiplier();\r\n                    var retval = _.multiply(product_rule(symbol), polydiff(symbol));\r\n                    retval.multiplier = retval.multiplier.multiply(m);\r\n                    return retval;\r\n                }\r\n                else if(g === FN && symbol.power.equals(1)) {\r\n                    // Table of known derivatives\r\n                    switch(symbol.fname) {\r\n                        case LOG:\r\n                            cp = symbol.clone();\r\n                            symbol = symbol.args[0].clone();//get the arguments\r\n                            symbol.power = symbol.power.negate();\r\n                            symbol.multiplier = cp.multiplier.divide(symbol.multiplier);\r\n                            break;\r\n                        case COS:\r\n                            //cos -> -sin\r\n                            symbol.fname = SIN;\r\n                            symbol.multiplier.negate();\r\n                            break;\r\n                        case SIN:\r\n                            //sin -> cos\r\n                            symbol.fname = COS;\r\n                            break;\r\n                        case TAN:\r\n                            //tan -> sec^2\r\n                            symbol.fname = SEC;\r\n                            symbol.power = new Frac(2);\r\n                            break;\r\n                        case SEC:\r\n                            // Use a clone if this gives errors\r\n                            symbol = qdiff(symbol, TAN);\r\n                            break;\r\n                        case CSC:\r\n                            symbol = qdiff(symbol, '-cot');\r\n                            break;\r\n                        case COT:\r\n                            symbol.fname = CSC;\r\n                            symbol.multiplier.negate();\r\n                            symbol.power = new Frac(2);\r\n                            break;\r\n                        case ASIN:\r\n                            symbol = _.parse('(sqrt(1-(' + text(symbol.args[0]) + ')^2))^(-1)');\r\n                            break;\r\n                        case ACOS:\r\n                            symbol = _.parse('-(sqrt(1-(' + text(symbol.args[0]) + ')^2))^(-1)');\r\n                            break;\r\n                        case ATAN:\r\n                            symbol = _.parse('(1+(' + text(symbol.args[0]) + ')^2)^(-1)');\r\n                            break;\r\n                        case ABS:\r\n                            m = symbol.multiplier.clone();\r\n                            symbol.toUnitMultiplier();\r\n                            //depending on the complexity of the symbol it's easier to just parse it into a new symbol\r\n                            //this should really be readdressed soon\r\n                            b = symbol.args[0].clone();\r\n                            b.toUnitMultiplier();\r\n                            symbol = _.parse(inBrackets(text(symbol.args[0])) + '/abs' + inBrackets(text(b)));\r\n                            symbol.multiplier = m;\r\n                            break;\r\n                        case 'parens':\r\n                            //see product rule: f'.g goes to zero since f' will return zero. This way we only get back\r\n                            //1*g'\r\n                            symbol = Symbol(1);\r\n                            break;\r\n                        case 'cosh':\r\n                            //cosh -> -sinh\r\n                            symbol.fname = 'sinh';\r\n                            break;\r\n                        case 'sinh':\r\n                            //sinh -> cosh\r\n                            symbol.fname = 'cosh';\r\n                            break;\r\n                        case TANH:\r\n                            //tanh -> sech^2\r\n                            symbol.fname = SECH;\r\n                            symbol.power = new Frac(2);\r\n                            break;\r\n                        case SECH:\r\n                            // Use a clone if this gives errors\r\n                            symbol = qdiff(symbol, '-tanh');\r\n                            break;\r\n                        case CSCH:\r\n                            var arg = String(symbol.args[0]);\r\n                            return _.parse('-coth(' + arg + ')*csch(' + arg + ')');\r\n                            break;\r\n                        case COTH:\r\n                            var arg = String(symbol.args[0]);\r\n                            return _.parse('-csch(' + arg + ')^2');\r\n                            break;\r\n                        case 'asinh':\r\n                            symbol = _.parse('(sqrt(1+(' + text(symbol.args[0]) + ')^2))^(-1)');\r\n                            break;\r\n                        case 'acosh':\r\n                            symbol = _.parse('(sqrt(-1+(' + text(symbol.args[0]) + ')^2))^(-1)');\r\n                            break;\r\n                        case 'atanh':\r\n                            symbol = _.parse('(1-(' + text(symbol.args[0]) + ')^2)^(-1)');\r\n                            break;\r\n                        case ASECH:\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('-1/(sqrt(1/(' + arg + ')^2-1)*(' + arg + ')^2)');\r\n                            break;\r\n                        case ACOTH:\r\n                            symbol = _.parse('-1/((' + symbol.args[0] + ')^2-1)');\r\n                            break;\r\n                        case ACSCH:\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('-1/(sqrt(1/(' + arg + ')^2+1)*(' + arg + ')^2)');\r\n                            break;\r\n                        case ASEC:\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('1/(sqrt(1-1/(' + arg + ')^2)*(' + arg + ')^2)');\r\n                            break;\r\n                        case ACSC:\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('-1/(sqrt(1-1/(' + arg + ')^2)*(' + arg + ')^2)');\r\n                            break;\r\n                        case ACOT:\r\n                            symbol = _.parse('-1/((' + symbol.args[0] + ')^2+1)');\r\n                            break;\r\n                        case 'S':\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('sin((pi*(' + arg + ')^2)/2)');\r\n                            break;\r\n                        case 'C':\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('cos((pi*(' + arg + ')^2)/2)');\r\n                            break;\r\n                        case 'Si':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('sin(' + arg + ')/(' + arg + ')');\r\n                            break;\r\n                        case 'Shi':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('sinh(' + arg + ')/(' + arg + ')');\r\n                            break;\r\n                        case 'Ci':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('cos(' + arg + ')/(' + arg + ')');\r\n                            break;\r\n                        case 'Chi':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('cosh(' + arg + ')/(' + arg + ')');\r\n                            break;\r\n                        case 'Ei':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('e^(' + arg + ')/(' + arg + ')');\r\n                            break;\r\n                        case 'Li':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('1/' + Settings.LOG + '(' + arg + ')');\r\n                            break;\r\n                        case 'erf':\r\n                            symbol = _.parse('(2*e^(-(' + symbol.args[0] + ')^2))/sqrt(pi)');\r\n                            break;\r\n                        case 'atan2':\r\n                            var x_ = String(symbol.args[0]),\r\n                                    y_ = String(symbol.args[1]);\r\n                            symbol = _.parse('(' + y_ + ')/((' + y_ + ')^2+(' + x_ + ')^2)');\r\n                            break;\r\n                        case 'sign':\r\n                            symbol = new Symbol(0);\r\n                            break;\r\n                        case 'sinc':\r\n                            symbol = _.parse(format('(({0})*cos({0})-sin({0}))*({0})^(-2)', symbol.args[0]));\r\n                            break;\r\n                        case Settings.LOG10:\r\n                            symbol = _.parse('1/((' + symbol.args[0] + ')*' + Settings.LOG + '(10))');\r\n                            break;\r\n                        default:\r\n                            symbol = _.symfunction('diff', [symbol, wrt]);\r\n                    }\r\n                }\r\n                else if(g === EX || g === FN && isSymbol(symbol.power)) {\r\n                    var value;\r\n                    if(g === EX) {\r\n                        value = symbol.value;\r\n                    }\r\n                    else if(g === FN && symbol.contains(d)) {\r\n                        value = symbol.fname + inBrackets(text(symbol.args[0]));\r\n                    }\r\n                    else {\r\n                        value = symbol.value + inBrackets(text(symbol.args[0]));\r\n                    }\r\n                    a = _.multiply(_.parse(LOG + inBrackets(value)), symbol.power.clone());\r\n                    b = __.diff(_.multiply(_.parse(LOG + inBrackets(value)), symbol.power.clone()), d);\r\n                    symbol = _.multiply(symbol, b);\r\n                }\r\n                else if(g === FN && !symbol.power.equals(1)) {\r\n                    b = symbol.clone();\r\n                    b.toLinear();\r\n                    b.toUnitMultiplier();\r\n                    symbol = _.multiply(polydiff(symbol.clone()), derive(b));\r\n                }\r\n                else if(g === CP || g === PL) {\r\n                    // Note: Do not use `parse` since this puts back the sqrt and causes a bug as in #610. Use clone.\r\n                    var c = symbol.clone();\r\n                    var result = new Symbol(0);\r\n                    for(var x in symbol.symbols) {\r\n                        result = _.add(result, __.diff(symbol.symbols[x].clone(), d));\r\n                    }\r\n                    symbol = _.multiply(polydiff(c), result);\r\n                }\r\n\r\n                symbol.updateHash();\r\n\r\n                return symbol;\r\n            }\r\n            ;\r\n\r\n            function qdiff(symbol, val, altVal) {\r\n                return _.multiply(symbol, _.parse(val + inBrackets(altVal || text(symbol.args[0]))));\r\n            }\r\n            ;\r\n\r\n            function product_rule(symbol) {\r\n                //grab all the symbols within the CB symbol\r\n                var symbols = symbol.collectSymbols(),\r\n                        result = new Symbol(0),\r\n                        l = symbols.length;\r\n                //loop over all the symbols\r\n                for(var i = 0; i < l; i++) {\r\n                    var df = __.diff(symbols[i].clone(), d);\r\n                    for(var j = 0; j < l; j++) {\r\n                        //skip the symbol of which we just pulled the derivative\r\n                        if(i !== j) {\r\n                            //multiply out the remaining symbols\r\n                            df = _.multiply(df, symbols[j].clone());\r\n                        }\r\n                    }\r\n                    //add the derivative to the result\r\n                    result = _.add(result, df);\r\n                }\r\n                return result; //done\r\n            }\r\n            ;\r\n        },\r\n        integration: {\r\n            u_substitution: function (symbols, dx) {\r\n                function try_combo(a, b, f) {\r\n                    var d = __.diff(b, dx);\r\n                    var q = f ? f(a, b) : _.divide(a.clone(), d);\r\n                    if(!q.contains(dx, true))\r\n                        return q;\r\n                    return null;\r\n                }\r\n                function do_fn_sub(fname, arg) {\r\n                    var subbed = __.integrate(_.symfunction(fname, [new Symbol(u)]), u, 0);\r\n                    subbed = subbed.sub(new Symbol(u), arg);\r\n                    subbed.updateHash();\r\n                    return subbed;\r\n                }\r\n\r\n                var a = symbols[0].clone(),\r\n                        b = symbols[1].clone(),\r\n                        g1 = a.group,\r\n                        g2 = b.group,\r\n                        //may cause problems if person is using this already. Will need\r\n                        //to find algorithm for detecting conflict\r\n                        u = '__u__',\r\n                        Q;\r\n                if(g1 === FN && g2 !== FN) {\r\n                    //e.g. 2*x*cos(x^2)\r\n                    var arg = a.args[0];\r\n                    Q = try_combo(b, arg.clone());\r\n                    if(Q)\r\n                        return _.multiply(Q, do_fn_sub(a.fname, arg));\r\n                    Q = try_combo(b, a);\r\n                    if(Q) {\r\n                        return __.integration.poly_integrate(a);\r\n                    }\r\n                }\r\n                else if(g2 === FN && g1 !== FN) {\r\n                    //e.g. 2*(x+1)*cos((x+1)^2\r\n                    var arg = b.args[0];\r\n                    Q = try_combo(a, arg.clone());\r\n                    if(Q)\r\n                        return _.multiply(Q, do_fn_sub(b.fname, arg));\r\n                }\r\n                else if(g1 === FN && g2 === FN) {\r\n                    Q = try_combo(a.clone(), b.clone());\r\n                    if(Q)\r\n                        return _.multiply(__.integration.poly_integrate(b), Q);\r\n                    Q = try_combo(b.clone(), a.clone());\r\n                    if(Q)\r\n                        return _.multiply(__.integration.poly_integrate(b), Q);\r\n                }\r\n                else if(g1 === EX && g2 !== EX) {\r\n                    var p = a.power;\r\n                    Q = try_combo(b, p.clone());\r\n                    if(!Q) {\r\n                        //one more try\r\n                        var dc = __.integration.decompose_arg(p.clone(), dx);\r\n                        //consider the possibility of a^x^(n-1)*x^n dx\r\n                        var xp = __.diff(dc[2].clone(), dx);\r\n                        var dc2 = __.integration.decompose_arg(xp.clone(), dx);\r\n                        //if their powers equal, so if dx*p == b\r\n                        if(_.multiply(dc[1], dc2[1]).power.equals(b.power)) {\r\n                            var m = _.divide(dc[0].clone(), dc2[0].clone());\r\n\r\n                            var new_val = _.multiply(m.clone(), _.pow(new Symbol(a.value), _.multiply(dc[0], new Symbol(u))));\r\n                            new_val = _.multiply(new_val, new Symbol(u));\r\n                            return __.integration.by_parts(new_val, u, 0, {}).sub(u, dc[1].clone());\r\n                        }\r\n\r\n                    }\r\n                    var integrated = __.integrate(a.sub(p.clone(), new Symbol(u)), u, 0),\r\n                            retval = _.multiply(integrated.sub(new Symbol(u), p), Q);\r\n\r\n\r\n                    return retval;\r\n                }\r\n                else if(g2 === EX && g1 !== EX) {\r\n                    var p = b.power;\r\n                    Q = try_combo(a, p.clone());\r\n                    var integrated = __.integrate(b.sub(p, new Symbol(u)), u, 0);\r\n                    return _.multiply(integrated.sub(new Symbol(u), p), Q);\r\n                }\r\n                else if(a.isComposite() || b.isComposite()) {\r\n                    var f = function (a, b) {\r\n                        var d = __.diff(b, dx);\r\n                        var A = core.Algebra.Factor.factor(a),\r\n                                B = core.Algebra.Factor.factor(d);\r\n                        var q = _.divide(A, B);\r\n                        return q;\r\n                    };\r\n                    var f1 = a.isComposite() ? a.clone().toLinear() : a.clone(),\r\n                            f2 = b.isComposite() ? b.clone().toLinear() : b.clone();\r\n                    Q = try_combo(f1.clone(), f2.clone(), f);\r\n                    if(Q)\r\n                        return _.multiply(__.integration.poly_integrate(b), Q);\r\n                    Q = try_combo(f2.clone(), f1.clone(), f);\r\n                    if(Q)\r\n                        return _.multiply(__.integration.poly_integrate(a), Q);\r\n                }\r\n            },\r\n            //simple integration of a single polynomial x^(n+1)/(n+1)\r\n            poly_integrate: function (x) {\r\n                var p = x.power.toString(),\r\n                        m = x.multiplier.toDecimal(),\r\n                        s = x.toUnitMultiplier().toLinear();\r\n                if(Number(p) === -1) {\r\n                    return _.multiply(new Symbol(m), _.symfunction(LOG, [s]));\r\n                }\r\n                return _.parse(format('({0})*({1})^(({2})+1)/(({2})+1)', m, s, p));\r\n            },\r\n            //If we're just spinning wheels we want to stop. This is why we \r\n            //wrap integration in a try catch block and call this to stop.\r\n            stop: function (msg) {\r\n                msg = msg || 'Unable to compute integral!';\r\n                core.Utils.warn(msg);\r\n                throw new NoIntegralFound(msg);\r\n            },\r\n            partial_fraction: function (input, dx, depth, opt) {\r\n                //TODO: This whole thing needs to be rolled into one but for now I'll leave it as two separate parts\r\n                if(!isSymbol(dx))\r\n                    dx = _.parse(dx);\r\n\r\n                var result, partial_fractions;\r\n                result = new Symbol(0);\r\n                partial_fractions = core.Algebra.PartFrac.partfrac(input, dx);\r\n\r\n                if(partial_fractions.group === CB && partial_fractions.isLinear()) {\r\n                    //perform a quick check to make sure that all partial fractions are linear\r\n                    partial_fractions.each(function (x) {\r\n                        if(!x.isLinear())\r\n                            __.integration.stop();\r\n                    });\r\n                    partial_fractions.each(function (x) {\r\n                        result = _.add(result, __.integrate(x, dx, depth, opt));\r\n                    });\r\n                }\r\n                else {\r\n                    result = _.add(result, __.integrate(partial_fractions, dx, depth, opt));\r\n                }\r\n                return result;\r\n            },\r\n            get_udv: function (symbol) {\r\n                var parts = [[/*L*/], [/*I*/], [/*A*/], [/*T*/], [/*E*/]];\r\n                //first we sort them \r\n                var setSymbol = function (x) {\r\n                    var g = x.group;\r\n                    if(g === FN) {\r\n                        var fname = x.fname;\r\n                        if(core.Utils.in_trig(fname) || core.Utils.in_htrig(fname))\r\n                            parts[3].push(x);\r\n                        else if(core.Utils.in_inverse_trig(fname))\r\n                            parts[1].push(x);\r\n                        else if(fname === LOG)\r\n                            parts[0].push(x);\r\n                        else {\r\n                            __.integration.stop();\r\n                        }\r\n                    }\r\n                    else if(g === S || x.isComposite() && x.isLinear() || g === CB && x.isLinear()) {\r\n                        parts[2].push(x);\r\n                    }\r\n                    else if(g === EX || x.isComposite() && !x.isLinear())\r\n                        parts[4].push(x);\r\n                    else\r\n                        __.integration.stop();\r\n                };\r\n\r\n                if(symbol.group === CB)\r\n                    symbol.each(function (x) {\r\n                        setSymbol(Symbol.unwrapSQRT(x, true));\r\n                    });\r\n                else\r\n                    setSymbol(symbol);\r\n                var u, dv = new Symbol(1);\r\n                //compile u and dv\r\n                for(var i = 0; i < 5; i++) {\r\n                    var part = parts[i], t,\r\n                            l = part.length;\r\n                    if(l > 0) {\r\n                        if(l > 1) {\r\n                            t = new Symbol(1);\r\n                            for(var j = 0; j < l; j++)\r\n                                t = _.multiply(t, part[j].clone());\r\n                        }\r\n                        else\r\n                            t = part[0].clone();\r\n\r\n                        if(!u) {\r\n                            u = t;//the first u encountered gets chosen\r\n                            u.multiplier = u.multiplier.multiply(symbol.multiplier); //the first one gets the mutliplier\r\n                        }\r\n                        else\r\n                            dv = _.multiply(dv, t); //everything else belongs to dv\r\n                    }\r\n                }\r\n\r\n                return [u, dv];\r\n            },\r\n\r\n            trig_sub: function (symbol, dx, depth, opt, parts, symbols) {\r\n                parts = parts || __.integration.decompose_arg(symbol.clone().toLinear(), dx);\r\n                var b = parts[3],\r\n                        ax = parts[2],\r\n                        a = parts[0],\r\n                        x = parts[1];\r\n                if(x.power.equals(2) && a.greaterThan(0)) {\r\n                    //use tan(x)\r\n                    var t = core.Utils.getU(symbol), //get an appropriate u\r\n                            u = _.parse(TAN + inBrackets(t)), //u\r\n                            du = _.parse(SEC + inBrackets(t) + '^2'), //du\r\n                            f = _.multiply(symbol.sub(x, u), du);\r\n                    var integral = __.integrate(f, t, depth, opt).sub(u, x);\r\n                    core.Utils.clearU(u);\r\n                    return integral;\r\n                }\r\n            },\r\n\r\n            by_parts: function (symbol, dx, depth, o) {\r\n                o.previous = o.previous || [];\r\n                var udv, u, dv, du, v, vdu, uv, retval, integral_vdu, m, c, vdu_s;\r\n                //first LIATE\r\n                udv = __.integration.get_udv(symbol);\r\n                u = udv[0];\r\n                dv = udv[1];\r\n                du = Symbol.unwrapSQRT(_.expand(__.diff(u.clone(), dx)), true);\r\n                c = du.clone().stripVar(dx);\r\n                //strip any coefficients\r\n                du = _.divide(du, c.clone());\r\n                v = __.integrate(dv.clone(), dx, depth || 0);\r\n                vdu = _.multiply(v.clone(), du);\r\n                vdu_s = vdu.toString();\r\n                //currently only supports e^x*(some trig)\r\n                if(o.previous.indexOf(vdu_s) !== -1 && (core.Utils.in_trig(u.fname)) && dv.isE()) {\r\n                    //We're going to exploit the fact that vdu can never be constant\r\n                    //to work out way out of this cycle. We'll return the length of\r\n                    //the this.previous array until we're back at level one\r\n                    o.is_cyclic = true;\r\n                    //return the integral. \r\n                    return new Symbol(1);\r\n                }\r\n                else\r\n                    o.previous.push(vdu_s);\r\n\r\n                uv = _.multiply(u, v);\r\n                //clear the multiplier so we're dealing with a bare integral\r\n                m = vdu.multiplier.clone();\r\n                vdu.toUnitMultiplier();\r\n                integral_vdu = _.multiply(__.integrate(vdu.clone(), dx, depth, o), c);\r\n                integral_vdu.multiplier = integral_vdu.multiplier.multiply(m);\r\n                retval = _.subtract(uv, integral_vdu);\r\n                //we know that there cannot be constants so they're a holdover from a cyclic integral\r\n                if(o.is_cyclic) {\r\n                    //start popping the previous stack so we know how deep in we are\r\n                    o.previous.pop();\r\n                    if(o.previous.length === 0) {\r\n                        retval = _.expand(retval);\r\n                        var rem = new Symbol(0);\r\n                        retval.each(function (x) {\r\n                            if(!x.contains(dx))\r\n                                rem = _.add(rem, x.clone());\r\n                        });\r\n                        //get the actual uv\r\n                        retval = _.divide(_.subtract(retval, rem.clone()), _.subtract(new Symbol(1), rem));\r\n                    }\r\n                }\r\n\r\n                return retval;\r\n            },\r\n            /*\r\n             * dependents: [Solve, integrate]\r\n             */\r\n            decompose_arg: core.Utils.decompose_fn\r\n        },\r\n        //TODO: nerdamer.integrate('-e^(-a*t)*sin(t)', 't') -> gives incorrect output\r\n        integrate: function (original_symbol, dt, depth, opt) {\r\n            //assume integration wrt independent variable if expression only has one variable\r\n            if(!dt) {\r\n                var vars = core.Utils.variables(original_symbol);\r\n                if(vars.length === 1)\r\n                    dt = vars[0];\r\n                //defaults to x\r\n                dt = dt || 'x';\r\n            }\r\n            //add support for integrating vectors\r\n            if(core.Utils.isVector(original_symbol)) {\r\n                var vector = new core.Vector([]);\r\n                original_symbol.each(function (x) {\r\n                    vector.elements.push(__.integrate(x, dt));\r\n                });\r\n                return vector;\r\n            }\r\n            if(!isNaN(dt))\r\n                _.error('variable expected but received ' + dt);\r\n            //get rid of constants right away\r\n            if(original_symbol.isConstant(true))\r\n                return _.multiply(original_symbol.clone(), _.parse(dt));\r\n\r\n            //configurations options for integral. This is needed for tracking extra options\r\n            //e.g. cyclic integrals or additional settings\r\n            opt = opt || {};\r\n            return core.Utils.block('PARSE2NUMBER', function () {\r\n                //make a note of the original symbol. Set only if undefined\r\n                depth = depth || 0;\r\n                var dx = isSymbol(dt) ? dt.toString() : dt,\r\n                        //we don't want the symbol in sqrt form. x^(1/2) is prefererred\r\n                        symbol = Symbol.unwrapSQRT(original_symbol.clone(), true),\r\n                        g = symbol.group,\r\n                        retval;\r\n\r\n                try {\r\n                    //We stop integration after x amount of recursive calls\r\n                    if(++depth > core.Settings.integration_depth)\r\n                        __.integration.stop('Maximum depth reached. Exiting!');\r\n\r\n                    //constants. We first eliminate anything that doesn't have dx. Everything after this has \r\n                    //to have dx or else it would have been taken care of below\r\n                    if(!symbol.contains(dx, true)) {\r\n                        retval = _.multiply(symbol.clone(), _.parse(dx));\r\n                    }\r\n                    //e.g. 2*x\r\n                    else if(g === S) {\r\n                        retval = __.integration.poly_integrate(symbol, dx, depth);\r\n                    }\r\n                    else if(g === EX) {\r\n                        if(symbol.previousGroup === FN && !(symbol.fname === 'sqrt' || symbol.fname === Settings.PARENTHESIS))\r\n                            __.integration.stop();\r\n                        //check the base\r\n                        if(symbol.contains(dx) && symbol.previousGroup !== FN) {\r\n                            //if the symbol also contains dx then we stop since we currently \r\n                            //don't know what to do with it e.g. x^x\r\n                            if(symbol.power.contains(dx))\r\n                                __.integration.stop();\r\n                            else {\r\n                                var t = __.diff(symbol.clone().toLinear(), dx);\r\n                                if(t.contains(dx))\r\n                                    __.integration.stop();\r\n                                //since at this point it's the base only then we do standard single poly integration\r\n                                //e.g. x^y\r\n                                retval = __.integration.poly_integrate(symbol, dx, depth);\r\n                            }\r\n                        }\r\n                        //e.g. a^x or 9^x\r\n                        else {\r\n                            var a = __.diff(symbol.power.clone(), dx);\r\n                            if(a.contains(dx)) {\r\n                                var aa = a.stripVar(dx),\r\n                                        x = _.divide(a.clone(), aa.clone());\r\n                                if(x.group === S && x.isLinear()) {\r\n                                    aa.multiplier = aa.multiplier.divide(new Frac(2));\r\n                                    return _.parse(format('({2})*(sqrt(pi)*erf(sqrt(-{0})*{1}))/(2*sqrt(-{0}))', aa, dx, symbol.multiplier));\r\n                                }\r\n                                else\r\n                                    __.integration.stop();\r\n                            }\r\n                            if(symbol.isE()) {\r\n                                if(a.isLinear())\r\n                                    retval = symbol;\r\n                                else {\r\n                                    if(a.isE() && a.power.group === S && a.power.power.equals(1))\r\n                                        retval = _.multiply(_.symfunction('Ei', [symbol.power.clone()]), symbol.power);\r\n                                    else\r\n                                        __.integration.stop();\r\n                                }\r\n                            }\r\n                            else {\r\n                                var d = _.symfunction(LOG, [_.parse(symbol.value)]);\r\n                                retval = _.divide(symbol, d);\r\n                            }\r\n                            retval = _.divide(retval, a);\r\n                        }\r\n                    }\r\n                    else if(symbol.isComposite() && symbol.isLinear()) {\r\n                        var m = _.parse(symbol.multiplier);\r\n                        symbol.toUnitMultiplier();\r\n                        retval = new Symbol(0);\r\n                        symbol.each(function (x) {\r\n                            retval = _.add(retval, __.integrate(x, dx, depth));\r\n                        });\r\n                        retval = _.multiply(m, retval);\r\n                    }\r\n                    else if(g === CP) {\r\n                        if(symbol.power.greaterThan(1))\r\n                            symbol = _.expand(symbol);\r\n                        if(symbol.power.equals(1)) {\r\n                            retval = new Symbol(0);\r\n                            symbol.each(function (x) {\r\n                                retval = _.add(retval, __.integrate(x, dx, depth));\r\n                            }, true);\r\n                        }\r\n                        else {\r\n                            var p = Number(symbol.power),\r\n                                    m = symbol.multiplier.clone();//temporarily remove the multiplier\r\n                            symbol.toUnitMultiplier();\r\n                            var //below we consider the form ax+b\r\n                                    fn = symbol.clone().toLinear(), //get just the pure function without the power\r\n                                    decomp = __.integration.decompose_arg(fn, dx),\r\n                                    //I have no idea why I used bx+a and not ax+b. TODO change this to something that makes sense\r\n                                    b = decomp[3],\r\n                                    ax = decomp[2],\r\n                                    a = decomp[0],\r\n                                    x = decomp[1];\r\n                            if(p === -1 && x.group !== PL && x.power.equals(2)) {\r\n                                var b_is_positive = isInt(b) ? b > 0 : true;\r\n                                //we can now check for atan\r\n                                if(x.group === S && x.power.equals(2) && b_is_positive) {\r\n                                    ////then we have atan\r\n                                    //abs is redundants since the sign appears in both denom and num.\r\n                                    var unwrapAbs = function (s) {\r\n                                        var result = new Symbol(1);\r\n                                        s.each(function (x) {\r\n                                            result = _.multiply(result, x.fname === 'abs' ? x.args[0] : x);\r\n                                        });\r\n                                        return result;\r\n                                    };\r\n                                    var A = a.clone(),\r\n                                            B = b.clone();\r\n                                    A = _.pow(A, new Symbol(1 / 2));\r\n                                    B = _.pow(B, new Symbol(1 / 2));\r\n                                    //unwrap abs\r\n\r\n                                    var d = _.multiply(unwrapAbs(B), unwrapAbs(A)),\r\n                                            f = _.symfunction(ATAN, [_.divide(_.multiply(a, x.toLinear()), d.clone())]);\r\n                                    retval = _.divide(f, d);\r\n                                }\r\n                                else if(x.group === S && x.isLinear()) {\r\n                                    retval = _.divide(__.integration.poly_integrate(symbol), a);\r\n                                }\r\n                                else {\r\n                                    //1/(x^4+1)\r\n                                    if(x.power.equals(4)) {\r\n                                        //https://www.freemathhelp.com/forum/threads/55678-difficult-integration-int-1-(1-x-4)-dx\r\n                                        var A, B, C, D, E, F, f1, f2, f3, f4, L1, L2;\r\n                                        var br = inBrackets;\r\n                                        //apply rule: ax^4+b = (√ax^2+√2∜a∜bx+√b)(√ax^2-√2∜a∜bx+√b)\r\n                                        //get quadratic factors\r\n                                        A = _.parse(SQRT + br(a) + '*' + dx + '^2');\r\n                                        B = _.parse(SQRT + br(2) + '*' + br(a) + '^' + br('1/4') + '*' + br(b) + '^' + br('1/4') + '*' + dx);\r\n                                        C = _.parse(SQRT + br(b));\r\n                                        f1 = _.add(_.add(A.clone(), B.clone()), C.clone());\r\n                                        f2 = _.add(_.subtract(A, B), C);\r\n                                        //calculate numerators: [D+E, D-E] -> [√2*b^(3/4)+√b∜ax, √2*b^(3/4)-√b∜ax]\r\n                                        D = _.parse(SQRT + br(2) + '*' + br(b) + '^' + br('3/4'));\r\n                                        E = _.parse(SQRT + br(b) + '*' + br(b) + '^' + br('1/4') + '*' + dx);\r\n                                        //let F = 2b√2∜b\r\n                                        F = _.parse(2 + '*' + br(b) + '*' + SQRT + br(2) + '*' + br(b) + '^' + br('1/4'));\r\n                                        //calculate the factors\r\n                                        L1 = _.divide(_.subtract(D.clone(), E.clone()), _.multiply(F.clone(), f2));\r\n                                        L2 = _.divide(_.add(D, E), _.multiply(F, f1.clone()));\r\n                                        retval = _.add(\r\n                                                __.integrate(L1, dx, depth, opt),\r\n                                                __.integrate(L2, dx, depth, opt)\r\n                                                );\r\n                                    }\r\n                                    else\r\n                                        //let's try partial fractions\r\n                                        retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                                }\r\n                            }\r\n                            else if(p === -1 / 2) {\r\n                                //detect asin and atan\r\n                                if(x.group === S && x.power.equals(2)) {\r\n                                    if(ax.multiplier.lessThan(0) && !b.multiplier.lessThan(0)) {\r\n                                        a.negate();\r\n                                        //it's asin\r\n                                        if(b.isConstant() && a.isConstant()) {\r\n                                            var d = _.symfunction(SQRT, [a.clone()]),\r\n                                                    d2 = _.symfunction(SQRT, [_.multiply(a.clone(), b)]);\r\n                                            retval = _.divide(_.symfunction(ASIN, [_.divide(ax.toLinear(), d2)]), d);\r\n                                        }\r\n                                        //I'm not sure about this one. I'm trusting Wolfram Alpha here\r\n                                        else {\r\n                                            var sqrt_a = _.symfunction(SQRT, [a]),\r\n                                                    sqrt_ax = _.multiply(sqrt_a.clone(), x.clone().toLinear());\r\n                                            retval = _.divide(_.symfunction(ATAN, [_.divide(sqrt_ax, _.symfunction(SQRT, [fn.clone()]))]), sqrt_a);\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        /*WHAT HAPPENS HERE???? e.g. integrate(3/sqrt(-a+b*x^2),x) or integrate(3/sqrt(a+b*x^2),x)*/\r\n                                        __.integration.stop();\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    //This would be a case like 1/(sqrt(1-x^3) or 1/(1-(x+1)^2)\r\n                                    __.integration.stop();\r\n                                }\r\n                            }\r\n                            else if(p === 1/2 && x.power.equals(2) && a.greaterThan(0)) {\r\n                                // TODO: Revisit\r\n                                __.integration.stop();\r\n                            }\r\n                            else {\r\n                                if(x.isLinear() && x.group !== PL)\r\n                                    retval = _.divide(__.integration.poly_integrate(symbol), a);\r\n                                else if(x.power.equals(2) && a.greaterThan(0)) {\r\n                                    var sqa, sqb, aob, bsqi, n, integral, u, v, uv;\r\n                                    //1/(a*x^2+b^2)^n\r\n                                    //strip the value of b so b = 1\r\n                                    sqa = _.parse(SQRT + inBrackets(a)); //strip a so b = 1\r\n                                    sqb = _.parse(SQRT + inBrackets(b));\r\n                                    aob = _.multiply(sqa.clone(), sqb.clone()).invert();\r\n                                    bsqi = _.pow(b, new Symbol(symbol.power));\r\n                                    uv = core.Utils.getU(symbol);\r\n                                    u = _.multiply(aob, x.clone().toLinear());\r\n                                    v = _.parse(ATAN + inBrackets(u));\r\n                                    //the conversion will be 1+tan(x)^2 -> sec(x)^2\r\n                                    //since the denominator is now (sec(x)^2)^n and the numerator is sec(x)^2 \r\n                                    //then the remaining sec will be (n-1)*2;\r\n                                    var n = (Math.abs(symbol.power) - 1) * 2;\r\n                                    //1/sec(x)^n can now be converted to cos(x)^n and we can pull the integral of that\r\n                                    var integral = __.integrate(_.parse(COS + inBrackets(uv) + '^' + n));\r\n                                    core.Utils.clearU(uv);\r\n                                    return _.multiply(integral.sub(uv, v), bsqi);\r\n                                }\r\n                                else {\r\n                                    if(symbol.group !== CB && !symbol.power.lessThan(0)) {\r\n                                        retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                    }\r\n                                    else {\r\n                                        var f = symbol.clone().toLinear();\r\n                                        var factored = core.Algebra.Factor.factor(f);\r\n                                        var was_factored = factored.toString() !== f.toString();\r\n                                        if(core.Algebra.degree(f, _.parse(dx)).equals(2) && !was_factored) {\r\n                                            try {\r\n                                                var f1, fx, u, sq;\r\n                                                sq = core.Algebra.sqComplete(f, dx);\r\n                                                u = core.Utils.getU(f);\r\n                                                f1 = sq.f.sub(sq.a, u);\r\n                                                fx = _.pow(f1, _.parse(symbol.power));\r\n                                                retval = __.integrate(fx, u).sub(u, sq.a);\r\n                                            }\r\n                                            catch(e) {\r\n                                                __.integration.stop();\r\n                                            }\r\n                                        }\r\n                                        else\r\n                                            retval = __.integration.partial_fraction(symbol, dx, depth, opt);\r\n                                    }\r\n                                }\r\n                            }\r\n                            retval.multiplier = retval.multiplier.multiply(m);\r\n                        }\r\n                    }\r\n                    else if(g === FN) {\r\n                        var arg = symbol.args[0],\r\n                                m = symbol.multiplier.clone();\r\n                        symbol.toUnitMultiplier();\r\n                        var decomp = __.integration.decompose_arg(arg, dx);\r\n                        //easies way I can think of to get the coefficient and to make sure\r\n                        //that the symbol is linear wrt dx. I'm not actually trying to get the \r\n                        //derivative\r\n                        var a = decomp[0],\r\n                                x = decomp[1],\r\n                                fname = symbol.fname;\r\n                        //log is a special case that can be handled with integration by parts\r\n                        if(fname === LOG || (fname === ASIN || fname === ACOS || fname === ATAN && x.isLinear())) {\r\n                            /*integration by parts */\r\n                            var p = symbol.power.toString();\r\n                            if(isInt(p))\r\n                                depth = depth - p; //it needs more room to find the integral\r\n\r\n                            if(!arg.isComposite())\r\n                                retval = _.multiply(_.parse(m), __.integration.by_parts(symbol, dx, depth, opt));\r\n                            else {\r\n                                //integral u du\r\n                                var u = core.Utils.getU(symbol);\r\n                                var f = _.pow(_.parse(LOG + inBrackets(u)), new Symbol(p));\r\n                                var du = __.diff(arg, dx);\r\n                                var u_du = _.multiply(f, du);\r\n                                var integral = __.integrate(u_du, u, depth, opt);\r\n                                retval = _.multiply(_.parse(m), integral.sub(u, arg));\r\n                            }\r\n\r\n                        }\r\n                        else if(fname === TAN && symbol.power.lessThan(0)) {\r\n                            //convert to cotangent\r\n                            var sym = symbol.clone();\r\n                            sym.power.negate();\r\n                            sym.fname = COT;\r\n                            return _.multiply(_.parse(m), __.integrate(sym, dx, depth));\r\n                        }\r\n                        else {\r\n                            if(!a.contains(dx, true) && symbol.isLinear()) { //perform a deep search for safety\r\n                                //first handle the special cases \r\n                                if(fname === ABS) {\r\n                                    //REVISIT **TODO**\r\n                                    var x = _.divide(arg.clone(), a.clone());\r\n                                    if(x.group === S && !x.power.lessThan(0)) {\r\n                                        if(core.Utils.even(x.power)) {\r\n                                            retval = __.integrate(arg, dx, depth);\r\n                                        }\r\n                                        else {\r\n                                            var integrated = __.integrate(x, dx, depth);\r\n                                            integrated.power = integrated.power.subtract(new Frac(1));\r\n                                            retval = _.multiply(_.multiply(_.symfunction(ABS, [x.toLinear()]), integrated), a);\r\n                                        }\r\n                                    }\r\n                                    else\r\n                                        __.integration.stop();\r\n                                }\r\n                                else {\r\n                                    var ag = symbol.args[0].group,\r\n                                            decomposed = __.integration.decompose_arg(arg, dx);\r\n\r\n                                    if(!(ag === CP || ag === S || ag === CB) || !decomposed[1].power.equals(1) || arg.hasFunc())\r\n                                        __.integration.stop();\r\n                                    /**TODO**/ //ASIN, ACOS, ATAN\r\n                                    switch(fname) {\r\n                                        case COS:\r\n                                            retval = _.symfunction(SIN, [arg]);\r\n                                            break;\r\n                                        case SIN:\r\n                                            retval = _.symfunction(COS, [arg]);\r\n                                            retval.negate();\r\n                                            break;\r\n                                        case TAN:\r\n                                            retval = _.parse(format(Settings.LOG + '(sec({0}))', arg));\r\n                                            break;\r\n                                        case SEC:\r\n                                            retval = _.parse(format(Settings.LOG + '(tan({0})+sec({0}))', arg));\r\n                                            break;\r\n                                        case CSC:\r\n                                            retval = _.parse(format('-' + Settings.LOG + '(csc({0})+cot({0}))', arg));\r\n                                            break;\r\n                                        case COT:\r\n                                            retval = _.parse(format(Settings.LOG + '(sin({0}))', arg));\r\n                                            break;\r\n                                        case SINH:\r\n                                            retval = _.symfunction(COSH, [arg]);\r\n                                            break;\r\n                                        case COSH:\r\n                                            retval = _.symfunction(SINH, [arg]);\r\n                                            break;\r\n                                        case TANH:\r\n                                            retval = _.parse(format(Settings.LOG + '(cosh({0}))', arg));\r\n                                            break;\r\n                                        case ASEC:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                        case ACSC:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                        case ACOT:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                            //inverse htrig\r\n                                        case ASECH:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                        case ACSCH:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                        case ACOTH:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                            //end inverse htrig\r\n                                            //htrigh\r\n                                        case SECH:\r\n                                            retval = _.parse(format('atan(sinh({0}))', arg));\r\n                                            break;\r\n                                        case CSCH:\r\n                                            retval = _.parse(format(Settings.LOG + '(tanh(({0})/2))', arg));\r\n                                            break;\r\n                                        case COTH:\r\n                                            retval = _.parse(format(Settings.LOG + '(sinh({0}))', arg));\r\n                                            break;\r\n                                            //end htrig\r\n                                        case EXP:\r\n                                            retval = __.integrate(_.parse(format('e^({0})', arg)), dx, depth);\r\n                                            break;\r\n                                        case 'S':\r\n                                            var arg = symbol.args[0].clone(),\r\n                                                    dc = __.integration.decompose_arg(arg, dx),\r\n                                                    x_ = dc[1],\r\n                                                    a_ = dc[0];\r\n                                            var b_ = dc[3];\r\n                                            retval = _.parse(format('(cos((1/2)*pi*(({1})+({0})*({2}))^2)+pi*(({1})+({0})*({2}))*S(({1})+({0})*({2})))/(({0})*pi)', a_, b_, x));\r\n                                            break;\r\n                                        case 'C':\r\n                                            var arg = symbol.args[0].clone(),\r\n                                                    dc = __.integration.decompose_arg(arg, dx),\r\n                                                    x_ = dc[1],\r\n                                                    a_ = dc[0];\r\n                                            var b_ = dc[3];\r\n                                            retval = _.parse(format('(pi*(({1})+({0})*({2}))*C(({1})+({0})*({2}))-sin((1/2)*pi*(({1})+({0})*({2}))^2))/(({0})*pi)', a_, b_, x_));\r\n                                            break;\r\n                                        case 'erf':\r\n                                            var arg = symbol.args[0].clone(),\r\n                                                    dc = __.integration.decompose_arg(arg, dx),\r\n                                                    x_ = dc[1],\r\n                                                    a_ = dc[0];\r\n                                            retval = _.parse(format('e^(-(({2}))^2)/(({0})*sqrt(pi))+(1/({0})+({1}))*erf(({2}))', a_, x_, arg));\r\n                                            break;\r\n                                        case 'sign':\r\n                                            retval = _.multiply(symbol.clone(), arg.clone());\r\n                                            break;\r\n                                        default:\r\n                                            __.integration.stop();\r\n                                    }\r\n\r\n                                    retval = _.divide(retval, a);\r\n                                }\r\n                            }\r\n                            else if(x.isLinear()) {\r\n                                if(fname === COS || fname === SIN) {\r\n                                    var p = Number(symbol.power);\r\n                                    //check to see if it's negative and then just transform it to sec or csc\r\n                                    if(p < 0) {\r\n                                        symbol.fname = fname === SIN ? CSC : SEC;\r\n                                        symbol.invert().updateHash();\r\n                                        retval = __.integrate(symbol, dx, depth);\r\n                                    }\r\n                                    else {\r\n                                        var arg = symbol.args[0],\r\n                                                rd = symbol.clone(), //cos^(n-1)\r\n                                                rd2 = symbol.clone(), //cos^(n-2)\r\n                                                q = new Symbol((p - 1) / p), //\r\n                                                na = _.multiply(a.clone(), new Symbol(p)).invert(); //1/(n*a)\r\n                                        rd.power = rd.power.subtract(new Frac(1));\r\n                                        rd2.power = rd2.power.subtract(new Frac(2));\r\n\r\n                                        var t = _.symfunction(fname === COS ? SIN : COS, [arg.clone()]);\r\n                                        if(fname === SIN)\r\n                                            t.negate();\r\n                                        retval = _.add(_.multiply(_.multiply(na, rd), t), _.multiply(q, __.integrate(_.parse(rd2), dx, depth)));\r\n                                    }\r\n                                }\r\n                                //tan(x)^n or cot(x)^n\r\n                                else if(fname === TAN || fname === COT) {\r\n                                    //http://www.sosmath.com/calculus/integration/moretrigpower/moretrigpower.html\r\n                                    if(symbol.args[0].isLinear(dx)) {\r\n                                        var n = symbol.power.subtract(new Frac(1)).toString(),\r\n                                                r = symbol.clone().toUnitMultiplier(),\r\n                                                w = _.parse(format((fname === COT ? '-' : '') + '1/({2}*{0})*{3}({1})^({0})', n, arg, a, fname));\r\n                                        r.power = r.power.subtract(new Frac(2));\r\n                                        if(r.power.equals(0))\r\n                                            r = _.parse(r);\r\n                                        retval = _.subtract(w, __.integrate(r, dx, depth));\r\n                                    }\r\n                                }\r\n                                //sec(x)^n or csc(x)^n\r\n                                else if(fname === SEC || fname === CSC) {\r\n                                    //http://www.sosmath.com/calculus/integration/moretrigpower/moretrigpower.html\r\n                                    var n1 = symbol.power.subtract(new Frac(1)).toString(),\r\n                                            n2 = symbol.power.subtract(new Frac(2)).toString(),\r\n                                            f2 = fname === SEC ? TAN : COT,\r\n                                            r = symbol.clone().toUnitMultiplier(),\r\n                                            parse_str = format((fname === CSC ? '-' : '') + '1/({0}*{1})*{4}({3})^({2})*{5}({3})', a, n1, n2, arg, fname, f2),\r\n                                            w = _.parse(parse_str);\r\n                                    r.power = r.power.subtract(new Frac(2));\r\n                                    if(r.power.equals(0))\r\n                                        r = _.parse(r);\r\n                                    retval = _.add(w, _.multiply(new Symbol(n2 / n1), __.integrate(r, dx, depth)));\r\n                                }\r\n                                else if((fname === COSH || fname === SINH) && symbol.power.equals(2)) {\r\n                                    retval = __.integrate(symbol.fnTransform(), dx, depth);\r\n                                }\r\n                                else\r\n                                    __.integration.stop();\r\n                            }\r\n                            else\r\n                                __.integration.stop();\r\n\r\n                            retval.multiplier = retval.multiplier.multiply(m);\r\n                        }\r\n                    }\r\n                    else if(g === PL) {\r\n                        retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                    }\r\n                    else if(g === CB) {\r\n                        var den = symbol.getDenom();\r\n                        if(den.group === S)\r\n                            symbol = _.expand(symbol);\r\n\r\n                        //separate the coefficient since all we care about are symbols containing dx\r\n                        var coeff = symbol.stripVar(dx);\r\n                        //now get only those that apply\r\n                        var cfsymbol = _.divide(symbol.clone(), coeff.clone()); //a coeff free symbol\r\n                        //peform a correction for stripVar. This is a serious TODO!\r\n                        if(coeff.contains(dx)) {\r\n                            cfsymbol = _.multiply(cfsymbol, coeff);\r\n                            coeff = new Symbol(1);\r\n                        }\r\n\r\n                        //if we only have one symbol left then let's not waste time. Just pull the integral\r\n                        //and let the chips fall where they may\r\n                        if(cfsymbol.group !== CB) {\r\n                            if(cfsymbol.equals(1)) {\r\n                                return __.integrate(_.expand(symbol), dx, depth);\r\n                            }\r\n\r\n                            //only factor for multivariate which are polynomials\r\n                            if(cfsymbol.clone().toLinear().isPoly(true) && core.Utils.variables(cfsymbol).length > 1) {\r\n                                cfsymbol = core.Algebra.Factor.factor(cfsymbol);\r\n                            }\r\n\r\n                            retval = __.integrate(cfsymbol, dx, depth);\r\n                        }\r\n                        else {\r\n                            //we collect the symbols and sort them descending group, descending power, descending alpabethically\r\n                            var symbols = cfsymbol.collectSymbols().sort(function (a, b) {\r\n                                if(a.group === b.group) {\r\n                                    if(Number(a.power) === Number(b.power))\r\n                                        if(a < b)\r\n                                            return 1; //I want sin first\r\n                                        else\r\n                                            return -1;\r\n                                    return b.power - a.power; //descending power\r\n                                }\r\n                                return b.group - a.group; //descending groups\r\n                            }).map(function (x) {\r\n                                var unwrapped = Symbol.unwrapSQRT(x, true);\r\n                                if(unwrapped.fname === EXP) {\r\n                                    return _.parse(format('({1})*e^({0})', unwrapped.args[0], unwrapped.multiplier));\r\n                                }\r\n                                return unwrapped;\r\n                            });\r\n                            var l = symbols.length;\r\n                            if(symbol.power < 0) {\r\n                                if(l === 2) {\r\n                                    return __.integrate(_.expand(symbol), dx, depth, opt);\r\n                                }\r\n                            }\r\n                            //otherwise the denominator is one lumped together symbol \r\n                            else {\r\n                                //generate an image for \r\n                                if(l === 2) {\r\n                                    //try u substitution\r\n                                    try {\r\n                                        retval = __.integration.u_substitution(symbols, dx);\r\n                                    }\r\n                                    catch(e) {/* failed :`(*/\r\n                                        ;\r\n                                    }\r\n\r\n                                    if(!retval) {\r\n                                        //no success with u substitution so let's try known combinations\r\n                                        //are they two functions\r\n                                        var g1 = symbols[0].group,\r\n                                                g2 = symbols[1].group,\r\n                                                sym1 = symbols[0],\r\n                                                sym2 = symbols[1],\r\n                                                fn1 = sym1.fname,\r\n                                                fn2 = sym2.fname;\r\n                                        //reset the symbol minus the coeff\r\n                                        symbol = _.multiply(sym1.clone(), sym2.clone());\r\n                                        if(g1 === FN && g2 === FN) {\r\n                                            if(fn1 === LOG || fn2 === LOG) {\r\n                                                retval = __.integration.by_parts(symbol.clone(), dx, depth, opt);\r\n                                            }\r\n                                            else {\r\n                                                symbols.sort(function (a, b) {\r\n                                                    return b.fname > a.fname;\r\n                                                });\r\n                                                var arg1 = sym1.args[0];\r\n                                                //make sure the arguments are suitable. We don't know how to integrate non-linear arguments\r\n                                                if(!arg1.isLinear() || !(arg1.group === CP || arg1.group === CB || arg1.group === S))\r\n                                                    __.integration.stop();\r\n\r\n                                                var decomp = __.integration.decompose_arg(arg1, dx);\r\n                                                x = decomp[1],\r\n                                                        a = decomp[0];\r\n                                                if(!x.isLinear()) //again... linear arguments only wrt x\r\n                                                    __.integration.stop();\r\n\r\n                                                //they have to have the same arguments and then we have cleared all the check to \r\n                                                //make sure we can integrate FN & FN\r\n                                                var arg2 = sym2.args[0];\r\n                                                //make sure that their argument matches\r\n                                                if(arg1.equals(arg2)) {\r\n                                                    if(fn1 === SIN && fn2 === COS || fn1 === COS && fn2 === SIN) {\r\n                                                        if(sym1.power.lessThan(0))\r\n                                                            __.integration.stop();//we don't know how to handle, sin(x)^n/cos(x)^m where m > n,  yet\r\n                                                        //if it's in the form sin(x)^n*cos(x)^n then we can just return tan(x)^n which we know how to integrate\r\n                                                        if(fn1 === SIN && sym1.power.add(sym2.power).equals(0)) {\r\n                                                            sym1.fname = TAN;\r\n                                                            sym1.updateHash();\r\n                                                            retval = __.integrate(sym1, dx, depth);\r\n                                                        }\r\n                                                        else {\r\n                                                            if(even(sym1.power) && fn2 === COS && sym2.power.lessThan(0)) {\r\n                                                                //transform sin^(2*n) to (1-cos^2)^n\r\n                                                                var n = Number(sym1.power) / 2,\r\n                                                                        new_sym = _.parse(format('(1-cos({0})^2)^({1})', sym1.args[0], n));\r\n                                                                retval = __.integrate(_.expand(_.multiply(new_sym, sym2.clone())), dx, depth, opt);\r\n                                                            }\r\n                                                            else if(even(sym1.power) && fn2 === SIN && sym2.power.lessThan(0)) {\r\n                                                                //transform cos^(2*n) to (1-sin^2)^n\r\n                                                                var n = Number(sym1.power) / 2,\r\n                                                                        new_sym = _.parse(format('(1-sin({0})^2)^({1})', sym1.args[0], n));\r\n                                                                retval = __.integrate(_.expand(_.multiply(new_sym, sym2.clone())), dx, depth, opt);\r\n                                                            }\r\n                                                            else {\r\n                                                                var p1_even = core.Utils.even(sym1.power),\r\n                                                                        p2_even = core.Utils.even(sym2.power);\r\n                                                                retval = new Symbol(0);\r\n                                                                if(!p1_even || !p2_even) {\r\n                                                                    var u, r, trans;\r\n                                                                    //since cos(x) is odd it carries du. If sin was odd then it would be the other way around\r\n                                                                    //know that p1 satifies the odd portion in this case. If p2 did than it would contain r\r\n                                                                    if(!p1_even) {\r\n                                                                        //u = sin(x)\r\n                                                                        u = sym2;\r\n                                                                        r = sym1;\r\n                                                                    }\r\n                                                                    else {\r\n                                                                        u = sym1;\r\n                                                                        r = sym2;\r\n                                                                    }\r\n                                                                    //get the sign of du. In this case r carries du as stated before and D(cos(x),x) = -sin(x)\r\n                                                                    var sign = u.fname === COS ? -1 : 1,\r\n                                                                            n = r.power,\r\n                                                                            //remove the du e.g. cos(x)^2*sin(x)^3 dx -> cos(x)^2*sin(x)^2*sin(x). We're left with two \r\n                                                                            //even powers afterwards which can be transformed\r\n                                                                            k = (n - 1) / 2,\r\n                                                                            //make the transformation cos(x)^2 = 1 - sin(x)^2\r\n                                                                            trans = _.parse('(1-' + u.fname + core.Utils.inBrackets(arg1) + '^2)^' + k),\r\n                                                                            sym = _.expand(_.multiply(new Symbol(sign), _.multiply(u.clone(), trans)));\r\n                                                                    //we can now just loop through and integrate each since it's now just a polynomial with functions\r\n                                                                    sym.each(function (x) {\r\n                                                                        retval = _.add(retval, __.integration.poly_integrate(x.clone()));\r\n                                                                    });\r\n                                                                }\r\n                                                                else {\r\n                                                                    //performs double angle transformation\r\n                                                                    var double_angle = function (symbol) {\r\n                                                                        var p = symbol.power,\r\n                                                                                k = p / 2, e;\r\n                                                                        if(symbol.fname === COS)\r\n                                                                            e = '((1/2)+(cos(2*(' + symbol.args[0] + '))/2))^' + k;\r\n                                                                        else\r\n                                                                            e = '((1/2)-(cos(2*(' + symbol.args[0] + '))/2))^' + k;\r\n\r\n                                                                        return _.parse(e);\r\n                                                                    };\r\n                                                                    //they're both even so transform both using double angle identities and we'll just\r\n                                                                    //be able to integrate by the sum of integrals\r\n                                                                    var a = double_angle(sym1),\r\n                                                                            b = double_angle(sym2),\r\n                                                                            t = _.multiply(a, b);\r\n                                                                    var sym = _.expand(t);\r\n                                                                    sym.each(function (x) {\r\n                                                                        retval = _.add(retval, __.integrate(x, dx, depth));\r\n                                                                    });\r\n                                                                    return _.multiply(retval, coeff);\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                    //tan(x)*sec(x)^n \r\n                                                    else if(fn1 === SEC && fn2 === TAN && x.isLinear() && sym2.isLinear()) {\r\n                                                        retval = _.parse(format('sec({0})^({1})/({1})', sym1.args[0], sym1.power));\r\n                                                    }\r\n                                                    else if(fn1 === TAN && fn2 === SEC && x.isLinear()) {\r\n                                                        //remaining: tan(x)^3*sec(x)^6\r\n                                                        if(sym1.isLinear() && sym2.isLinear()) {\r\n                                                            retval = _.divide(_.symfunction(SEC, [arg1.clone()]), a);\r\n                                                        }\r\n                                                        else if(even(sym1.power)) {\r\n                                                            var p = Number(sym1.power) / 2;\r\n                                                            //transform tangent\r\n                                                            var t = _.parse(format('(sec({0})^2-1)^({1})', sym1.args[0], p));\r\n                                                            retval = __.integrate(_.expand(_.multiply(t, sym2)), dx, depth);\r\n                                                        }\r\n                                                        else\r\n                                                            __.integration.stop();\r\n                                                    }\r\n                                                    else if(fn1 === SEC && fn2 === COS) {\r\n                                                        sym1.fname = COS;\r\n                                                        sym1.invert().updateHash();\r\n                                                        retval = __.integrate(_.multiply(sym1, sym2), dx, depth);\r\n                                                    }\r\n                                                    else if(fn1 === SIN && fn2 === CSC) {\r\n                                                        sym2.fname = SIN;\r\n                                                        sym2.invert().updateHash();\r\n                                                        retval = __.integrate(_.multiply(sym1, sym2), dx, depth);\r\n                                                    }\r\n                                                    //tan/cos\r\n                                                    else if(fn1 === TAN && (fn2 === COS || fn2 === SIN) && sym2.power.lessThan(0)) {\r\n                                                        var t = _.multiply(sym1.fnTransform(), sym2);\r\n                                                        retval = __.integrate(_.expand(t), dx, depth);\r\n                                                    }\r\n                                                    else {\r\n                                                        var t = _.multiply(sym1.fnTransform(), sym2.fnTransform());\r\n                                                        retval = __.integrate(_.expand(t), dx, depth);\r\n                                                    }\r\n                                                }\r\n                                                //TODO: In progress\r\n                                                else if((fn1 === SIN || fn1 === COS) && (fn2 === SIN || fn2 === COS)) {\r\n\r\n                                                    if(sym1.isLinear() && sym2.isLinear()) {\r\n                                                        //if in the form cos(a*x)*sin(b*x)\r\n                                                        if(sym1.args[0].isLinear() && sym2.args[0].isLinear()) {\r\n                                                            //use identity (sin(b*x+a*x)+sin(b*x-a*x))/2\r\n                                                            var ax, bx;\r\n                                                            if(fn2 === SIN) {\r\n                                                                ax = sym1.args[0];\r\n                                                                bx = sym2.args[0];\r\n                                                            }\r\n                                                            else {\r\n                                                                bx = sym1.args[0];\r\n                                                                ax = sym2.args[0];\r\n                                                            }\r\n\r\n                                                            //make the transformation\r\n                                                            f = _.parse(format('(sin(({1})+({0}))+sin(({1})-({0})))/2', ax.toString(), bx.toString()));\r\n\r\n                                                            //integrate it\r\n                                                            retval = __.integrate(f, dx, depth);\r\n                                                        }\r\n                                                        else {\r\n                                                            var transformed = trigTransform(symbols);\r\n                                                            retval = __.integrate(_.expand(transformed), dx, depth);\r\n                                                        }\r\n                                                    }\r\n                                                    else {\r\n                                                        var transformed = new Symbol(1);\r\n                                                        symbols.map(function (sym) {\r\n                                                            var s = sym.fnTransform();\r\n                                                            transformed = _.multiply(transformed, s);\r\n                                                        });\r\n                                                        var t = _.expand(transformed);\r\n\r\n                                                        retval = __.integrate(t, dx, depth);\r\n\r\n                                                        if(retval.hasIntegral()) {\r\n                                                            retval = __.integrate(trigTransform(transformed.collectSymbols()), dx, depth);\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                                else {\r\n                                                    __.integration.stop();\r\n                                                }\r\n\r\n                                            }\r\n                                        }\r\n                                        else if(g1 === FN && g2 === S) {\r\n                                            var sym1_is_linear = sym1.isLinear();\r\n                                            if(sym1.fname === COS && sym1_is_linear && sym2.power.equals(-1))\r\n                                                retval = _.symfunction('Ci', [sym1.args[0]]);\r\n                                            else if(sym1.fname === COS && sym2.power.equals(-1)) {\r\n                                                retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);\r\n                                            }\r\n                                            else if(sym1.fname === COSH && sym1_is_linear && sym2.power.equals(-1))\r\n                                                retval = _.symfunction('Chi', [sym1.args[0]]);\r\n                                            else if(sym1.fname === COSH && sym2.power.equals(-1)) {\r\n                                                retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);\r\n                                            }\r\n                                            else if(sym1.fname === SIN && sym1_is_linear && sym2.power.equals(-1))\r\n                                                retval = _.symfunction('Si', [sym1.args[0]]);\r\n                                            else if(sym1.fname === SIN && sym2.power.equals(-1)) {\r\n                                                retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);\r\n                                            }\r\n                                            else if(sym1.fname === SINH && sym1_is_linear && sym2.power.equals(-1))\r\n                                                retval = _.symfunction('Shi', [sym1.args[0]]);\r\n                                            else if(sym1.fname === SINH && sym2.power.equals(-1)) {\r\n                                                retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);\r\n                                            }\r\n                                            else if(sym1.fname === LOG && sym2.power.equals(-1)) {\r\n                                                //log(x)^n/x = log(x)^(n+1)/(n+1)\r\n                                                retval = __.integration.poly_integrate(sym1, dx, depth);\r\n                                            }\r\n                                            else if(sym1.fname === 'erf') {\r\n                                                if(sym2.power.equals(1)) {\r\n                                                    var dc = __.integration.decompose_arg(sym1.args[0], dx),\r\n                                                            a_ = dc[0],\r\n                                                            x_ = dc[1],\r\n                                                            arg = sym1.args[0].toString();\r\n                                                    retval = _.parse(format('(e^(-(({2}))^2)*(sqrt(pi)*e^((({2}))^2)*(2*({0})^2*({1})^2-3)*erf(({2}))+2*({0})*({1})-2))/(4*sqrt(pi)*({0})^2)', a_, x_, arg))\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                //since group S is guaranteed convergence we need not worry about tracking depth of integration\r\n                                                retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            }\r\n                                        }\r\n                                        else if(g1 === EX && g2 === S) {\r\n                                            var x = fn1 === LOG ? __.integration.decompose_arg(sym1.args[0], dx)[1] : null;\r\n                                            if(sym1.isE() && (sym1.power.group === S || sym1.power.group === CB) && sym2.power.equals(-1)) {\r\n                                                retval = _.symfunction('Ei', [sym1.power.clone()]);\r\n                                            }\r\n                                            else if(fn1 === LOG && x.value === sym2.value) {\r\n                                                retval = __.integration.poly_integrate(sym1, dx, depth);\r\n                                            }\r\n                                            else\r\n                                                retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                        }\r\n                                        else if(g1 === PL && g2 === S) {\r\n                                            //first try to reduce the top\r\n                                            if(sym2.value === sym1.value && sym1.power.equals(-1)) {\r\n                                                //find the lowest power in the denominator\r\n                                                var pd = Math.min.apply(null, core.Utils.keys(sym1.symbols));\r\n                                                //get the lowest common value between denominator and numerator\r\n                                                var pc = Math.min(pd, sym2.power);\r\n                                                //reduce both denominator and numerator by that factor\r\n                                                var factor = sym2.clone();\r\n                                                factor.power = new Frac(pc);\r\n                                                sym2 = _.divide(sym2, factor.clone()); //reduce the denominator\r\n                                                var t = new Symbol(0);\r\n                                                sym1.each(function (x) {\r\n                                                    t = _.add(t, _.divide(x.clone(), factor.clone()));\r\n                                                });\r\n                                                t.multiplier = sym1.multiplier;\r\n                                                symbol = _.divide(sym2, t);\r\n                                            }\r\n                                            else {\r\n                                                symbol = _.expand(symbol);\r\n                                            }\r\n                                            retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                                        }\r\n                                        else if(g1 === CP && g2 === S) {\r\n                                            var f = sym1.clone().toLinear(),\r\n                                                    f_is_linear = core.Algebra.degree(f, _.parse(dx)).equals(1);\r\n                                            //handle cases x^(2*n)/sqrt(1-x^2)\r\n                                            if(sym1.power.equals(-1 / 2)) {\r\n                                                var decomp = __.integration.decompose_arg(sym1.clone().toLinear(), dx);\r\n                                                var a = decomp[0].negate(),\r\n                                                        x = decomp[1],\r\n                                                        b = decomp[3],\r\n                                                        p1 = Number(sym1.power),\r\n                                                        p2 = Number(sym2.power);\r\n                                                if(isInt(p2) && core.Utils.even(p2) && x.power.equals(2)) {\r\n                                                    //if the substitution \r\n                                                    var c = _.divide(_.multiply(_.pow(b.clone(), new Symbol(2)),\r\n                                                            _.symfunction(SQRT, [_.divide(b.clone(), a.clone())])),\r\n                                                            _.pow(a.clone(), new Symbol(2)));\r\n                                                    c = _.multiply(c, _.symfunction(SQRT, [b]).invert());\r\n                                                    var dummy = _.parse('sin(u)');\r\n                                                    dummy.power = dummy.power.multiply(sym2.power);\r\n                                                    var integral = __.integrate(dummy, 'u', depth);\r\n                                                    var bksub = _.parse(ASIN + '(' + SQRT + '(' + a + '/' + b + ')*' + dx + ')');\r\n                                                    retval = _.multiply(c, integral.sub(new Symbol('u'), bksub));\r\n                                                }\r\n                                                else if(p1 === -1 / 2) {\r\n                                                    var u_transform = function (f, u) {\r\n                                                        var integral = _.parse(__.integrate(f, dx, depth, opt).sub(dx, format(u, dx)));\r\n                                                        if(!integral.hasIntegral())\r\n                                                            return integral;\r\n                                                    }\r\n                                                    if(p2 === -1) {\r\n                                                        retval = u_transform(\r\n                                                                _.expand(_.expand(_.pow(_.multiply(sym1.invert(), sym2.invert()), new Symbol(2)))).invert(),\r\n                                                                'sqrt(1-1/({0})^2)'\r\n                                                                );\r\n                                                    }\r\n                                                    else if(p2 === -2) {\r\n                                                        //apply transformation to see if it matches asin(x)\r\n                                                        retval = u_transform(\r\n                                                                _.sqrt(_.expand(_.divide(_.pow(symbol, new Symbol(2)).invert(), _.pow(new Symbol(dx), new Symbol(2))).negate())).invert(),\r\n                                                                'sqrt(1-1/({0})^2)'\r\n                                                                );\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            else if(sym1.power.equals(-1) && sym2.isLinear() && f_is_linear) {\r\n                                                retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                                            }\r\n                                            else if(!sym1.power.lessThan(0) && isInt(sym1.power)) {\r\n                                                //sum of integrals\r\n                                                var expanded = _.expand(sym1);\r\n                                                retval = new Symbol(0);\r\n                                                expanded.each(function (x) {\r\n                                                    if(x.group === PL) {\r\n                                                        x.each(function (y) {\r\n                                                            retval = _.add(retval, __.integrate(_.multiply(sym2.clone(), y), dx, depth));\r\n                                                        });\r\n                                                    }\r\n                                                    else\r\n                                                        retval = _.add(retval, __.integrate(_.multiply(sym2.clone(), x), dx, depth));\r\n                                                });\r\n                                            }\r\n                                            else if(sym1.power.lessThan(-2)) {\r\n                                                retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            }\r\n                                            else if(sym1.power.lessThan(0) && sym2.power.greaterThan(1)) {\r\n                                                var decomp = __.integration.decompose_arg(sym1.clone().toLinear(), dx),\r\n                                                        a = decomp[0].negate(),\r\n                                                        x = decomp[1],\r\n                                                        b = decomp[3],\r\n                                                        fn = sym1.clone().toLinear();\r\n\r\n                                                if(x.group !== PL && x.isLinear()) {\r\n                                                    var p = Number(sym2.power),\r\n                                                            du = '_u_',\r\n                                                            u = new Symbol(du),\r\n                                                            //pull the integral with the subsitution\r\n                                                            U = _.expand(_.divide(_.pow(_.subtract(u.clone(), b.clone()), new Symbol(p)), u.clone())),\r\n                                                            scope = {};\r\n\r\n                                                    //generate a scope for resubbing the symbol\r\n                                                    scope[du] = fn;\r\n                                                    var U2 = _.parse(U, scope);\r\n                                                    retval = __.integrate(U2, dx, 0);\r\n                                                }\r\n                                                else if(sym2.power.greaterThan(x.power) || sym2.power.equals(x.power)) {\r\n\r\n                                                    //factor out coefficients\r\n                                                    var factors = new core.Algebra.Classes.Factors();\r\n                                                    sym1 = core.Algebra.Factor.coeffFactor(sym1.invert(), factors);\r\n                                                    var div = core.Algebra.divide(sym2, sym1);\r\n                                                    //it assumed that the result will be of group CB\r\n                                                    if(div.group !== CB) {\r\n                                                        retval = new Symbol(0);\r\n                                                        div.each(function (t) {\r\n                                                            retval = _.add(retval, __.integrate(t, dx, depth));\r\n                                                        });\r\n                                                        //put back the factors\r\n                                                        factors.each(function (factor) {\r\n                                                            retval = _.divide(retval, factor);\r\n                                                        });\r\n\r\n                                                        retval = _.expand(retval);\r\n                                                    }\r\n                                                    else {\r\n                                                        //try something else\r\n                                                        retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                                    }\r\n                                                }\r\n                                                else\r\n                                                    retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                                            }\r\n                                            else {\r\n                                                //handle cases such as (1-x^2)^(n/2)*x^(m) where n is odd ___ cracking knuckles... This can get a little hairy \r\n                                                if(sym1.power.den.equals(2)) {\r\n                                                    //assume the function is in the form (a^2-b*x^n)^(m/2)\r\n                                                    var dc = __.integration.decompose_arg(sym1.clone().toLinear(), dx),\r\n                                                            //using the above definition\r\n                                                            a = dc[3], x = dc[1], b = dc[0], bx = dc[2];\r\n                                                    if(x.power.equals(2) && b.lessThan(0)) { //if n is even && b is negative\r\n                                                        //make a equal 1 so we can do a trig sub\r\n                                                        if(!a.equals(1)) { //divide a out of everything\r\n                                                            //move a to the coeff\r\n                                                            coeff = _.multiply(coeff, _.pow(a, new Symbol(2)));\r\n                                                        }\r\n                                                        var u = dx;\r\n                                                        var c = _.divide(_.pow(b.clone().negate(), new Symbol(1 / 2)), _.pow(a, new Symbol(1 / 2))),\r\n                                                                du = _.symfunction(COS, [new Symbol(u)]),\r\n                                                                cosn = _.pow(_.symfunction(COS, [new Symbol(u)]), new Symbol(sym1.power.num)),\r\n                                                                X = _.pow(_.symfunction(SIN, [new Symbol(u)]), new Symbol(sym2.power)),\r\n                                                                val = _.multiply(_.multiply(cosn, du), X),\r\n                                                                integral = __.integrate(val, u, depth);\r\n                                                        //but remember that u = asin(sqrt(b)*a*x)\r\n                                                        retval = integral.sub(u, _.symfunction(ASIN, [_.multiply(new Symbol(dx), c)]));\r\n                                                    }\r\n                                                    else {\r\n                                                        retval = __.integration.partial_fraction(symbol, dx, depth, opt);\r\n                                                    }\r\n                                                }\r\n                                                else if(f_is_linear) {\r\n                                                    retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                                                }\r\n                                            }\r\n\r\n                                        }\r\n                                        else if(sym1.isComposite() && sym2.isComposite()) {\r\n                                            //sum of integrals\r\n                                            retval = new Symbol(0);\r\n                                            if(sym1.power.greaterThan(0) && sym2.power.greaterThan(0)) {\r\n                                                //combine and pull the integral of each\r\n                                                var sym = _.expand(symbol);\r\n                                                sym.each(function (x) {\r\n                                                    retval = _.add(retval, __.integrate(x, dx, depth));\r\n                                                }, true);\r\n                                            }\r\n                                            else {\r\n                                                var p1 = Number(sym1.power),\r\n                                                        p2 = Number(sym2.power);\r\n                                                if(p1 < 0 && p2 > 0) {\r\n                                                    //swap\r\n                                                    var t = sym1;\r\n                                                    sym1 = sym2;\r\n                                                    sym2 = t;\r\n                                                }\r\n                                                if(p1 === -1 && p2 === -1) {\r\n                                                    retval = __.integration.partial_fraction(symbol, dx);\r\n                                                }\r\n                                                else {\r\n                                                    sym1.each(function (x) {\r\n                                                        var k = _.multiply(x, sym2.clone());\r\n                                                        var integral = __.integrate(k, dx, depth);\r\n                                                        retval = _.add(retval, integral);\r\n                                                    });\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        else if(g1 === CP && symbols[0].power.greaterThan(0)) {\r\n                                            sym1 = _.expand(sym1);\r\n                                            retval = new Symbol(0);\r\n                                            sym1.each(function (x) {\r\n                                                retval = _.add(retval, __.integrate(_.multiply(x, sym2.clone()), dx, depth));\r\n                                            }, true);\r\n                                        }\r\n                                        else if(g1 === FN && g2 === EX && core.Utils.in_htrig(sym1.fname)) {\r\n                                            sym1 = sym1.fnTransform();\r\n                                            retval = __.integrate(_.expand(_.multiply(sym1, sym2)), dx, depth);\r\n                                        }\r\n                                        else if(g1 === FN && g2 === CP || g2 === FN && g1 === CP) {\r\n                                            if(g2 === FN && g1 === CP) {\r\n                                                var t = sym1;\r\n                                                sym1 = sym2;\r\n                                                sym2 = t; //swap\r\n                                            }\r\n                                            var du, sym2_clone, p, q, sa, sb;\r\n                                            du = Symbol.unwrapSQRT(__.diff(sym1.clone(), dx), true);\r\n                                            sym2_clone = Symbol.unwrapSQRT(sym2, true);\r\n                                            if(du.power.equals(sym2_clone.power)) {\r\n                                                p = new Symbol(sym2.power);\r\n                                                sa = du.clone().toLinear();\r\n                                                sb = sym2.clone().toLinear();\r\n                                                q = core.Algebra.divide(sa.toLinear(), sb);\r\n                                                if(q.isConstant()) {\r\n                                                    var nq = _.pow(q, p.negate());\r\n                                                    retval = _.multiply(nq, __.integration.poly_integrate(sym1.clone()));\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            var syma = sym1.clone().toLinear();\r\n                                            var symb = sym2.clone().toLinear();\r\n                                            if(g1 === EX && g2 === EX && sym1.power.contains(dx) && sym2.power.contains(dx)\r\n                                                    && !syma.contains(dx) && !symb.contains(dx)) {\r\n                                                retval = _.parse(format('(({0})^(({2})*({4}))*({1})^(({3})*({4})))/(log(({0})^({2}))+log(({1})^({3})))',\r\n                                                        syma.toString(),\r\n                                                        symb.toString(),\r\n                                                        sym1.power.multiplier.toString(),\r\n                                                        sym2.power.multiplier.toString(),\r\n                                                        dx\r\n                                                        ));\r\n                                            }\r\n                                            else\r\n                                                retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else if(l === 3 && (symbols[2].group === S && symbols[2].power.lessThan(2) || symbols[0].group === CP)) {\r\n                                    var first = symbols[0];\r\n                                    if(first.group === CP) { //TODO {support higher powers of x in the future}\r\n                                        if(first.power.greaterThan(1))\r\n                                            first = _.expand(first);\r\n                                        var r = _.multiply(symbols[1], symbols[2]);\r\n                                        retval = new Symbol(0);\r\n                                        first.each(function (x) {\r\n                                            var t = _.multiply(x, r.clone());\r\n                                            var intg = __.integrate(t, dx, depth);\r\n                                            retval = _.add(retval, intg);\r\n                                        }, true);\r\n                                    }\r\n                                    else {\r\n                                        //try integration by parts although technically it will never work\r\n                                        retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                    }\r\n\r\n                                }\r\n                                else if(all_functions(symbols)) {\r\n                                    var t = new Symbol(1);\r\n                                    for(var i = 0, l = symbols.length; i < l; i++) {\r\n                                        t = _.multiply(t, symbols[i].fnTransform());\r\n                                    }\r\n                                    t = _.expand(t);\r\n                                    retval = __.integrate(t, dx, depth);\r\n                                }\r\n                                else {\r\n                                    //one more go\r\n                                    var transformed = trigTransform(symbols);\r\n                                    retval = __.integrate(_.expand(transformed), dx, depth);\r\n                                }\r\n                            }\r\n\r\n                        }\r\n\r\n                        retval = _.multiply(retval, coeff);\r\n                    }\r\n                    //if an integral was found then we return it\r\n                    if(retval)\r\n                        return retval;\r\n                }\r\n\r\n                catch(error) {\r\n                    //do nothing if it's a NoIntegralFound error otherwise let it bubble\r\n                    if(!(error instanceof NoIntegralFound || error instanceof core.exceptions.DivisionByZero))\r\n                        throw error;\r\n                }\r\n\r\n                //no symbol found so we return the integral again\r\n                return _.symfunction('integrate', [original_symbol, dt]);\r\n            }, false);\r\n        },\r\n        defint: function (symbol, from, to, dx) {\r\n            dx = dx || 'x'; //make x the default variable of integration\r\n            var get_value = function (integral, vars, point) {\r\n                try {\r\n                    return _.parse(integral, vars);\r\n                }\r\n                catch(e) {\r\n                    //it failed for some reason so return the limit\r\n                    var lim = __.Limit.limit(integral, dx, point);\r\n                    return lim;\r\n                }\r\n            };\r\n\r\n            var vars = core.Utils.variables(symbol),\r\n                    hasTrig = symbol.hasTrig();\r\n            var retval, integral;\r\n\r\n            // Fix #593 - Only assume the first variable if dx is not defined.\r\n            if(vars.length === 1 && !dx)\r\n                dx = vars[0];\r\n\r\n            if(!hasTrig) {\r\n                integral = __.integrate(symbol, dx);\r\n            }\r\n\r\n            if(!hasTrig && !integral.hasIntegral()) {\r\n                var upper = {},\r\n                        lower = {},\r\n                        a, b;\r\n                upper[dx] = to;\r\n                lower[dx] = from;\r\n\r\n                a = get_value(integral, upper, to, dx);\r\n                b = get_value(integral, lower, from, dx);\r\n                retval = _.subtract(a, b);\r\n            }\r\n            else if(vars.length === 1 && from.isConstant() && to.isConstant()) {\r\n\r\n                var f = core.Utils.build(symbol);\r\n                retval = new Symbol(core.Math2.num_integrate(f, Number(from), Number(to)));\r\n            }\r\n            else\r\n                retval = _.symfunction('defint', [symbol, from, to, dx]);\r\n            return retval;\r\n        },\r\n\r\n        Limit: {\r\n            interval: function (start, end) {\r\n                return _.parse(format('[{0}, {1}]', start, end));\r\n            },\r\n            diverges: function () {\r\n                return __.Limit.interval('-Infinity', 'Infinity');\r\n            },\r\n            divide: function (f, g, x, lim, depth) {\r\n                if(depth++ > Settings.max_lim_depth) {\r\n                    return;\r\n                }\r\n\r\n                var fin = f.clone(), gin = g.clone();\r\n\r\n                //But first a little \"cheating\". x/|x| ends up in an infinite loop since the d/dx |x| -> x/|x|\r\n                //To break this loop we simply provide the answer. Keep in mind that currently limit only provides\r\n                //the two-sided limit.\r\n                //Known limit\r\n                if(g.fname === ABS) {\r\n                    var sign = f.sign();\r\n                    var lim_sign = lim.sign();\r\n\r\n                    if(lim.isInfinity)\r\n                        return _.multiply(new Symbol(sign), new Symbol(lim_sign));\r\n\r\n                    else if(lim.equals(0)) {\r\n                        var fm = _.parse(f.multiplier);\r\n                        var gm = _.parse(g.multiplier);\r\n                        return _.divide(_.multiply(fm, __.Limit.interval('-1', '1')), gm);\r\n                    }\r\n                    else {\r\n                        //TODO: Support more limits\r\n                        __.Limit.diverges();\r\n                    }\r\n                }\r\n\r\n                var isInfinity = function (L) {\r\n                    if(core.Utils.isVector(L)) {\r\n                        for(var i = 0; i < L.elements.length; i++)\r\n                            if(!L.elements[i].isInfinity)\r\n                                return false;\r\n                        return true;\r\n                    }\r\n                    return L.isInfinity;\r\n                };\r\n\r\n                var equals = function (L, v) {\r\n                    if(core.Utils.isVector(L)) {\r\n                        return false;\r\n                    }\r\n                    return L.equals(v);\r\n                };\r\n\r\n                var retval;\r\n                do {\r\n                    var lim1 = evaluate(__.Limit.limit(f.clone(), x, lim, depth));\r\n                    var lim2 = evaluate(__.Limit.limit(g.clone(), x, lim, depth));\r\n\r\n                    //if it's in indeterminate form apply L'Hospital's rule\r\n                    var indeterminate = isInfinity(lim1) && isInfinity(lim2) || equals(lim1, 0) && equals(lim2, 0);\r\n                    //pull the derivatives\r\n                    if(indeterminate) {\r\n                        var ft = __.diff(f.clone(), x);\r\n                        var gt = __.diff(g.clone(), x);\r\n\r\n                        var t_symbol = _.expand(_.divide(ft, gt));\r\n                        f = t_symbol.getNum();\r\n                        g = t_symbol.getDenom();\r\n\r\n                    }\r\n                }\r\n                while(indeterminate)\r\n\r\n                //REMEMBER: \r\n                //- 1/cos(x)\r\n                //n/0 is still possible since we only checked for 0/0\r\n                var den_is_zero = lim2.equals(0);\r\n                var p = Number(gin.power);\r\n\r\n                if(lim.isConstant(true) && den_is_zero) {\r\n                    retval = Symbol.infinity(core.Utils.even(p) && lim1.lessThan(0) ? -1 : undefined);\r\n                }\r\n                else if(den_is_zero) {\r\n                    retval = __.Limit.diverges();\r\n                }\r\n                else {\r\n                    retval = _.divide(lim1, lim2);\r\n                }\r\n\r\n                return retval;\r\n            },\r\n            rewriteToLog: function (symbol) {\r\n                var p = symbol.power.clone();\r\n                symbol.toLinear();\r\n                return _.pow(new Symbol('e'), _.multiply(p, _.symfunction(Settings.LOG + '', [symbol])));\r\n            },\r\n            getSubbed: function (f, x, lim) {\r\n                var retval;\r\n                //1. rewrite EX with base e\r\n                if(f.group === EX) {\r\n                    f = __.rewriteToLog(f);\r\n                }\r\n                //2. try simple substitution\r\n                try {\r\n                    retval = f.sub(x, lim);\r\n                }\r\n                catch(e) {\r\n                    //Nope. No go, so just return the unsubbed function so we can test the limit instead.\r\n                    retval = f;\r\n                }\r\n\r\n                return retval;\r\n            },\r\n            isInterval: function (limit) {\r\n                return core.Utils.isVector(limit);\r\n            },\r\n            isConvergent: function (limit) {\r\n                //it's not convergent if it lies on the interval -Infinity to Infinity\r\n                if(\r\n                        //It lies on the interval -Infinity to Infinity\r\n                        __.Limit.isInterval(limit) && limit.elements[0].isInfinity && limit.elements[1].isInfinity ||\r\n                        //We weren't able to calculate the limit\r\n                        limit.containsFunction('limit')\r\n                        ) {\r\n                    return false; //Then no\r\n                }\r\n                return true; //It is\r\n            },\r\n            limit: function (symbol, x, lim, depth) {\r\n                //Simplify the symbol\r\n                if(symbol.isLinear() && symbol.isComposite()) {\r\n\r\n                    //Apply sum of limits\r\n                    var limit = new Symbol(0);\r\n                    symbol.each(function (s) {\r\n                        limit = _.add(limit, __.Limit.limit(s, x, lim, depth));\r\n                    }, true);\r\n\r\n                    return limit;\r\n                }\r\n                ;\r\n\r\n                symbol = core.Algebra.Simplify.simplify(symbol);\r\n\r\n                depth = depth || 1;\r\n\r\n                if(depth++ > Settings.max_lim_depth) {\r\n                    return;\r\n                }\r\n\r\n                //store the multiplier\r\n                var m = _.parse(symbol.multiplier);\r\n                //strip the multiplier\r\n                symbol.toUnitMultiplier();\r\n                try {\r\n                    //https://en.wikipedia.org/wiki/List_of_limits\r\n                    var retval;\r\n                    //we try the simplest option first where c is some limit\r\n                    //lim a as x->c = a where c \r\n                    if(symbol.isConstant(true)) {\r\n                        retval = symbol;\r\n                    }\r\n                    else {\r\n                        var point = {};\r\n                        point[x] = lim;\r\n                        //lim x as x->c = c where c\r\n\r\n                        try {\r\n\r\n                            //evaluate the function at the given limit\r\n                            var t = _.parse(symbol.sub(x, lim), point);\r\n\r\n                            //a constant or infinity is known so we're done\r\n                            if(t.isConstant(true) || t.isInfinity)\r\n                                retval = t;\r\n\r\n                        }\r\n                        catch(e) { /*Nothing. Maybe we tried to divide by zero.*/\r\n                        }\r\n                        ;\r\n\r\n                        if(!retval) {\r\n                            //split the symbol in the numerator and the denominator\r\n                            var num = symbol.getNum();\r\n                            var den = symbol.getDenom();\r\n\r\n                            if(den.isConstant(true)) {\r\n                                //We still don't have a limit so we generate tests.\r\n                                if(symbol.group === EX) {\r\n                                    //https://en.wikipedia.org/wiki/List_of_limits\r\n                                    //Speed boost for exponentials by detecting patterns\r\n                                    var f = symbol.clone().toLinear();\r\n                                    var p = symbol.power.clone();\r\n                                    var _num = f.getNum();\r\n                                    var _den = f.getDenom();\r\n                                    var fn = core.Utils.decompose_fn(_den, x, true);\r\n                                    //start detection of pattern (x/(x+1))^x\r\n                                    if(_num.group === S && _num.multiplier.isOne() && fn.ax.group === S && fn.b.isConstant(true) && fn.a.isOne() && fn.b.isConstant(true)) {\r\n                                        retval = _.parse(format('(1/e^({0}))', fn.b));\r\n                                    }\r\n                                    else {\r\n                                        var symbol_ = __.Limit.rewriteToLog(symbol.clone());\r\n                                        //get the base\r\n                                        var pow = symbol_.power.clone();\r\n                                        var base = symbol_.clone().toLinear();\r\n                                        var lim_base = __.Limit.limit(base, x, lim, depth);\r\n                                        var lim_pow = __.Limit.limit(pow, x, lim, depth);\r\n                                        retval = _.pow(lim_base, lim_pow);\r\n                                    }\r\n                                }\r\n                                else if(symbol.group === FN && symbol.args.length === 1) {\r\n                                    var evaluates;\r\n                                    //Squeeze theorem lim f(g(x)) = lim f(lim g))\r\n                                    var arg = __.Limit.limit(symbol.args[0], x, lim, depth);\r\n                                    if(core.Utils.isVector(arg)) {\r\n                                        //get the limit over that interval\r\n                                        retval = arg.map(function (e) {\r\n                                            var clone = symbol.clone();\r\n                                            clone.args[0] = e;\r\n                                            return __.Limit.limit(_.symfunction(symbol.fname, [e]), x, lim, depth);\r\n                                        });\r\n\r\n                                        return _.multiply(m, retval);\r\n                                    }\r\n                                    //if the argument is constant then we're done\r\n                                    else if(arg.isConstant(true)) {\r\n\r\n                                        //double check that it evaluates\r\n                                        var trial = _.symfunction(symbol.fname, [arg]);\r\n                                        //trial evaluation\r\n                                        try {\r\n                                            evaluate(trial);\r\n                                            evaluates = true;\r\n                                        }\r\n                                        catch(e) {\r\n\r\n                                            evaluates = false;\r\n                                        }\r\n                                    }\r\n                                    if(evaluates) {\r\n                                        retval = trial;\r\n                                    }\r\n                                    else {\r\n                                        //if the limit converges. We'll deal with non-convergent ones later\r\n                                        if(__.Limit.isConvergent(arg)) {\r\n                                            if(symbol.fname === LOG) {\r\n                                                switch(arg.toString()) {\r\n                                                    //lim -> 0\r\n                                                    case '0':\r\n                                                        retval = Symbol.infinity().negate();\r\n                                                        break;\r\n                                                    case 'Infinity':\r\n                                                        retval = Symbol.infinity();\r\n                                                        break;\r\n                                                    case '-Infinity':\r\n                                                        retval = Symbol.infinity();\r\n                                                        break;\r\n                                                }\r\n                                            }\r\n                                            else if((symbol.fname === COS || symbol.fname === SIN) && lim.isInfinity) {\r\n                                                retval = __.Limit.interval(-1, 1);\r\n                                            }\r\n                                            else if((symbol.fname === TAN)) {\r\n                                                var s_arg = symbol.args[0];\r\n                                                var n = s_arg.getNum();\r\n                                                var d = s_arg.getDenom();\r\n                                                var pi = n.toUnitMultiplier();\r\n                                                if(lim.isInfinity || pi.equals('pi') && d.equals(2)) {\r\n                                                    retval = divergent();\r\n                                                }\r\n                                            }\r\n                                            else if(symbol.fname === Settings.FACTORIAL) {\r\n                                                if(arg.isInfinity)\r\n                                                    return Symbol.infinity();\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else if(symbol.group === S) {\r\n                                    if(symbol.power > 0)\r\n                                        //these functions always converge to the limit\r\n                                        return _.parse(symbol, point);\r\n                                    else {\r\n                                        //we're dealing with 1/x^n but remember that infinity has already been dealt\r\n                                        //with by substitution\r\n                                        if(core.Utils.even(symbol.power)) {\r\n                                            //even powers converge to infinity\r\n                                            retval = Symbol.infinity();\r\n                                        }\r\n                                        else {\r\n                                            //odd ones don't\r\n                                            retval = __.Limit.diverges();\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else if(symbol.group === CB) {\r\n\r\n                                    var lim1, lim2;\r\n                                    //loop through all the symbols\r\n                                    //thus => lim f*g*h = lim (f*g)*h = (lim f*g)*(lim h)\r\n                                    //symbols of lower groups are generally easier to differentiatee so get them to the right by first sorting\r\n                                    var symbols = symbol.collectSymbols().sort(function (a, b) {\r\n                                        return a.group - b.group;\r\n                                    });\r\n\r\n                                    var f = symbols.pop();\r\n                                    //calculate the first limit so we can keep going down the list\r\n                                    lim1 = evaluate(__.Limit.limit(f, x, lim, depth));\r\n\r\n                                    //reduces all the limits one at a time\r\n                                    while(symbols.length) {\r\n                                        //get the second limit\r\n                                        var g = symbols.pop();\r\n                                        //get the limit of g\r\n                                        lim2 = evaluate(__.Limit.limit(g, x, lim, depth));\r\n\r\n                                        //if the limit is in indeterminate form aplly L'Hospital by inverting g and then f/(1/g)\r\n                                        if((lim1.isInfinity || !__.Limit.isConvergent(lim1) && lim2.equals(0) || lim1.equals(0) && __.Limit.isConvergent(lim2))) {\r\n                                            if(g.containsFunction(LOG)) {\r\n                                                //swap them\r\n                                                g = [f, f = g][0];\r\n                                            }\r\n                                            //invert the symbol\r\n                                            g.invert();\r\n\r\n                                            // Product of infinities\r\n                                            if(lim1.isInfinity && lim2.isInfinity) {\r\n                                                lim1 = Symbol.infinity()\r\n                                            }\r\n                                            else {\r\n                                                lim1 = __.Limit.divide(f, g, x, lim, depth);\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            //lim f*g = (lim f)*(lim g)\r\n                                            lim1 = _.multiply(lim1, lim2);\r\n                                            //let f*g equal f and h equal g \r\n                                            f = _.multiply(f, g);\r\n                                        }\r\n                                    }\r\n\r\n                                    //Done, lim1 is the limit we're looking for     \r\n                                    retval = lim1;\r\n                                }\r\n                                else if(symbol.isComposite()) {\r\n                                    var _lim;\r\n                                    if(!symbol.isLinear())\r\n                                        symbol = _.expand(symbol);\r\n                                    //Apply lim f+g = (lim f)+(lim g)\r\n                                    retval = new Symbol(0);\r\n\r\n                                    var symbols = symbol.collectSymbols().sort(function (a, b) {\r\n                                        return b.group - a.group;\r\n                                    });\r\n\r\n                                    var _symbols = [];\r\n                                    //Analyze the functions first\r\n                                    var fns = new Symbol(0);\r\n                                    for(var i = 0, l = symbols.length; i < l; i++) {\r\n                                        var sym = symbols[i].clone();\r\n                                        if(sym.group === FN || sym.group === CB && sym.hasFunc()) {\r\n                                            fns = _.add(fns, sym);\r\n                                        }\r\n                                        else\r\n                                            _symbols.push(sym);\r\n                                    }\r\n                                    _symbols.unshift(fns);\r\n\r\n                                    //make sure that we didn't just repackage the exact same symbol\r\n                                    if(_symbols.length !== 1) {\r\n                                        symbols = _symbols;\r\n                                    }\r\n\r\n                                    for(var i = 0, l = symbols.length; i < l; i++) {\r\n                                        var sym = symbols[i];\r\n                                        //If the addition of the limits is undefined then the limit diverges so return -infinity to infinity\r\n                                        try {\r\n                                            _lim = __.Limit.limit(sym, x, lim, depth);\r\n                                        }\r\n                                        catch(e) {\r\n                                            _lim = __.Limit.diverges();\r\n                                        }\r\n\r\n                                        try {\r\n                                            retval = _.add(retval, _lim);\r\n                                        }\r\n                                        catch(e) {\r\n                                            if(depth++ > Settings.max_lim_depth) {\r\n                                                return;\r\n                                            }\r\n                                            ;\r\n                                            retval = __.Limit.limit(__.diff(symbol, x), x, lim, depth);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                retval = __.Limit.divide(num, den, x, lim, depth);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    //if we still don't have a solution\r\n                    if(!retval)\r\n                        //return it symbolically\r\n                        retval = _.symfunction('limit', [symbol, x, lim]);\r\n                }\r\n                catch(e) {\r\n                    //if all else fails return the symbolic function\r\n                    retval = _.symfunction('limit', [symbol, x, lim]);\r\n                }\r\n\r\n                return _.multiply(m, retval);\r\n            }\r\n        },\r\n        Fresnel: {\r\n            S: function (x) {\r\n                if(x.isConstant(true)) {\r\n                    return __.defint(_.parse('sin(pi*x^2/2)'), Symbol(0), x, 'x');\r\n                }\r\n                return _.symfunction('S', arguments);\r\n            },\r\n            C: function (x) {\r\n                if(x.isConstant(true)) {\r\n                    return __.defint(_.parse('cos(pi*x^2/2)'), Symbol(0), x, 'x');\r\n                }\r\n                return _.symfunction('C', arguments);\r\n            }\r\n        }\r\n    };\r\n\r\n    nerdamer.register([\r\n        {\r\n            name: 'diff',\r\n            visible: true,\r\n            numargs: [1, 3],\r\n            build: function () {\r\n                return __.diff;\r\n            }\r\n        },\r\n        {\r\n            name: 'sum',\r\n            visible: true,\r\n            numargs: 4,\r\n            build: function () {\r\n                return __.sum;\r\n            }\r\n        },\r\n        {\r\n            name: 'product',\r\n            visible: true,\r\n            numargs: 4,\r\n            build: function () {\r\n                return __.product;\r\n            }\r\n        },\r\n        {\r\n            name: 'integrate',\r\n            visible: true,\r\n            numargs: [1, 2],\r\n            build: function () {\r\n                return __.integrate;\r\n            }\r\n        },\r\n        {\r\n            name: 'defint',\r\n            visible: true,\r\n            numargs: [3, 4],\r\n            build: function () {\r\n                return __.defint;\r\n            }\r\n        },\r\n        {\r\n            name: 'S',\r\n            visible: true,\r\n            numargs: 1,\r\n            build: function () {\r\n                return __.Fresnel.S;\r\n            }\r\n        },\r\n        {\r\n            name: 'C',\r\n            visible: true,\r\n            numargs: 1,\r\n            build: function () {\r\n                return __.Fresnel.C;\r\n            }\r\n        },\r\n        {\r\n            name: 'limit',\r\n            visible: true,\r\n            numargs: [3, 4],\r\n            build: function () {\r\n                return __.Limit.limit;\r\n            }\r\n        }\r\n    ]);\r\n    //link registered functions externally\r\n    nerdamer.updateAPI();\r\n\r\n})();","/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * License : MIT\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\r\n\r\n/* global module, Function */\r\n\r\nif((typeof module) !== 'undefined') {\r\n    var nerdamer = require('./nerdamer.core.js');\r\n    require('./Calculus.js');\r\n}\r\n\r\n(function () {\r\n    \"use strict\";\r\n\r\n    /*shortcuts*/\r\n    var core = nerdamer.getCore(),\r\n            _ = core.PARSER,\r\n            N = core.groups.N,\r\n            P = core.groups.P,\r\n            S = core.groups.S,\r\n            EX = core.groups.EX,\r\n            FN = core.groups.FN,\r\n            PL = core.groups.PL,\r\n            CP = core.groups.CP,\r\n            CB = core.groups.CB,\r\n            keys = core.Utils.keys,\r\n            even = core.Utils.even,\r\n            variables = core.Utils.variables,\r\n            format = core.Utils.format,\r\n            round = core.Utils.round,\r\n            Frac = core.Frac,\r\n            isInt = core.Utils.isInt,\r\n            Symbol = core.Symbol,\r\n            CONST_HASH = core.Settings.CONST_HASH,\r\n            math = core.Utils.importFunctions(),\r\n            evaluate = core.Utils.evaluate;\r\n    //*************** CLASSES ***************//\r\n    /**\r\n     * Converts a symbol into an equivalent polynomial arrays of \r\n     * the form [[coefficient_1, power_1],[coefficient_2, power_2], ... ]\r\n     * Univariate polymials only. \r\n     * @param {Symbol|Number} symbol\r\n     * @param {String} variable The variable name of the polynomial\r\n     * @param {int} order\r\n     */\r\n    function Polynomial(symbol, variable, order) {\r\n        if(core.Utils.isSymbol(symbol)) {\r\n            this.parse(symbol);\r\n            this.variable = this.variable || variable;\r\n        }\r\n        else if(!isNaN(symbol)) {\r\n            order = order || 0;\r\n            if(variable === undefined)\r\n                throw new core.exceptions.InvalidVariableNameError('Polynomial expects a variable name when creating using order');\r\n            this.coeffs = [];\r\n            this.coeffs[order] = symbol;\r\n            this.fill(symbol);\r\n        }\r\n        else if(typeof symbol === 'string') {\r\n            this.parse(_.parse(symbol));\r\n        }\r\n    }\r\n    /**\r\n     * Creates a Polynomial given an array of coefficients\r\n     * @param {int[]} arr\r\n     * @param {String} variable\r\n     * @returns {Polynomial}\r\n     */\r\n    Polynomial.fromArray = function (arr, variable) {\r\n        if(typeof variable === 'undefined')\r\n            throw new core.exceptions.InvalidVariableNameError('A variable name must be specified when creating polynomial from array');\r\n        var p = new Polynomial();\r\n        p.coeffs = arr;\r\n        p.variable = variable;\r\n        return p;\r\n    };\r\n\r\n    Polynomial.fit = function (c1, c2, n, base, p, variable) {\r\n        //after having looped through and mod 10 the number to get the matching factor\r\n        var terms = new Array(p + 1),\r\n                t = n - c2;\r\n        terms[0] = c2; //the constants is assumed to be correct\r\n        //constant for x^p is also assumed know so add\r\n        terms[p] = c1;\r\n        t -= c1 * Math.pow(base, p);\r\n        //start fitting\r\n        for(var i = p - 1; i > 0; i--) {\r\n            var b = Math.pow(base, i), //we want as many wholes as possible\r\n                    q = t / b,\r\n                    sign = Math.sign(q);\r\n            var c = sign * Math.floor(Math.abs(q));\r\n            t -= c * b;\r\n            terms[i] = c;\r\n        }\r\n        if(t !== 0)\r\n            return null;\r\n        for(var i = 0; i < terms.length; i++)\r\n            terms[i] = new Frac(terms[i]);\r\n\r\n        return Polynomial.fromArray(terms, variable);\r\n    };\r\n\r\n    Polynomial.prototype = {\r\n        /**\r\n         * Converts Symbol to Polynomial\r\n         * @param {Symbol} symbol\r\n         * @param {Array} c - a collector array\r\n         * @returns {Polynomial}\r\n         */\r\n        parse: function (symbol, c) {\r\n            this.variable = variables(symbol)[0];\r\n            if(!symbol.isPoly())\r\n                throw core.exceptions.NerdamerTypeError('Polynomial Expected! Received ' + core.Utils.text(symbol));\r\n            c = c || [];\r\n            if(!symbol.power.absEquals(1))\r\n                symbol = _.expand(symbol);\r\n\r\n            if(symbol.group === core.groups.N) {\r\n                c[0] = symbol.multiplier;\r\n            }\r\n            else if(symbol.group === core.groups.S) {\r\n                c[symbol.power.toDecimal()] = symbol.multiplier;\r\n            }\r\n            else {\r\n                for(var x in symbol.symbols) {\r\n                    var sub = symbol.symbols[x],\r\n                            p = sub.power;\r\n                    if(core.Utils.isSymbol(p))\r\n                        throw new core.exceptions.NerdamerTypeError('power cannot be a Symbol');\r\n\r\n                    p = sub.group === N ? 0 : p.toDecimal();\r\n                    if(sub.symbols) {\r\n                        this.parse(sub, c);\r\n                    }\r\n                    else {\r\n                        c[p] = sub.multiplier;\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.coeffs = c;\r\n\r\n            this.fill();\r\n        },\r\n        /**\r\n         * Fills in the holes in a polynomial with zeroes\r\n         * @param {Number} x - The number to fill the holes with\r\n         */\r\n        fill: function (x) {\r\n            x = Number(x) || 0;\r\n            var l = this.coeffs.length;\r\n            for(var i = 0; i < l; i++) {\r\n                if(this.coeffs[i] === undefined) {\r\n                    this.coeffs[i] = new Frac(x);\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * Removes higher order zeros or a specific coefficient\r\n         * @returns {Array}\r\n         */\r\n        trim: function () {\r\n            var l = this.coeffs.length;\r\n            while(l--) {\r\n                var c = this.coeffs[l];\r\n                var equalsZero = c.equals(0);\r\n                if(c && equalsZero) {\r\n                    if(l === 0)\r\n                        break;\r\n                    this.coeffs.pop();\r\n                }\r\n                else\r\n                    break;\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /*\r\n         * Returns polynomial mod p **currently fails**\r\n         * @param {Number} p\r\n         * @returns {Polynomial}\r\n         */\r\n        modP: function (p) {\r\n            var l = this.coeffs.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var c = this.coeffs[i];\r\n                if(c < 0) { //go borrow\r\n                    var b; //a coefficient > 0\r\n                    for(var j = i; j < l; j++) {//starting from where we left off\r\n                        if(this.coeffs[j] > 0) {\r\n                            b = this.coeffs[j];\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if(b) { //if such a coefficient exists\r\n                        for(j; j > i; j--) { //go down the line and adjust using p\r\n                            this.coeffs[j] = this.coeffs[j].subtract(new Frac(1));\r\n                            this.coeffs[j - 1] = this.coeffs[j - 1].add(new Frac(p));\r\n                        }\r\n                        c = this.coeffs[i]; //reset c\r\n                    }\r\n                }\r\n\r\n                var d = c.mod(p);\r\n                var w = c.subtract(d).divide(p);\r\n                if(!w.equals(0)) {\r\n                    var up_one = i + 1;\r\n                    var next = this.coeffs[up_one] || new Frac(0);\r\n                    next = next.add(w);\r\n                    this.coeffs[up_one] = new Frac(next);\r\n                    this.coeffs[i] = new Frac(d);\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /**\r\n         * Adds together 2 polynomials\r\n         * @param {Polynomial} poly\r\n         */\r\n        add: function (poly) {\r\n            var l = Math.max(this.coeffs.length, poly.coeffs.length);\r\n            for(var i = 0; i < l; i++) {\r\n                var a = (this.coeffs[i] || new Frac(0)),\r\n                        b = (poly.coeffs[i] || new Frac(0));\r\n                this.coeffs[i] = a.add(b);\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * Adds together 2 polynomials\r\n         * @param {Polynomial} poly\r\n         */\r\n        subtract: function (poly) {\r\n            var l = Math.max(this.coeffs.length, poly.coeffs.length);\r\n            for(var i = 0; i < l; i++) {\r\n                var a = (this.coeffs[i] || new Frac(0)),\r\n                        b = (poly.coeffs[i] || new Frac(0));\r\n                this.coeffs[i] = a.subtract(b);\r\n            }\r\n            return this;\r\n        },\r\n        divide: function (poly) {\r\n            var variable = this.variable,\r\n                    dividend = core.Utils.arrayClone(this.coeffs),\r\n                    divisor = core.Utils.arrayClone(poly.coeffs),\r\n                    n = dividend.length,\r\n                    mp = divisor.length - 1,\r\n                    quotient = [];\r\n\r\n            //loop through the dividend\r\n            for(var i = 0; i < n; i++) {\r\n                var p = n - (i + 1);\r\n                //get the difference of the powers\r\n                var d = p - mp;\r\n                //get the quotient of the coefficients\r\n                var q = dividend[p].divide(divisor[mp]);\r\n\r\n                if(d < 0)\r\n                    break;//the divisor is not greater than the dividend\r\n                //place it in the quotient\r\n                quotient[d] = q;\r\n\r\n                for(var j = 0; j <= mp; j++) {\r\n                    //reduce the dividend\r\n                    dividend[j + d] = dividend[j + d].subtract((divisor[j].multiply(q)));\r\n                }\r\n            }\r\n\r\n            //clean up\r\n            var p1 = Polynomial.fromArray(dividend, variable || 'x').trim(), //pass in x for safety\r\n                    p2 = Polynomial.fromArray(quotient, variable || 'x');\r\n            return [p2, p1];\r\n        },\r\n        multiply: function (poly) {\r\n            var l1 = this.coeffs.length, l2 = poly.coeffs.length,\r\n                    c = []; //array to be returned\r\n            for(var i = 0; i < l1; i++) {\r\n                var x1 = this.coeffs[i];\r\n                for(var j = 0; j < l2; j++) {\r\n                    var k = i + j, //add the powers together\r\n                            x2 = poly.coeffs[j],\r\n                            e = c[k] || new Frac(0); //get the existing term from the new array\r\n                    c[k] = e.add(x1.multiply(x2)); //multiply the coefficients and add to new polynomial array\r\n                }\r\n            }\r\n            this.coeffs = c;\r\n            return this;\r\n        },\r\n        /**\r\n         * Checks if a polynomial is zero\r\n         * @returns {Boolean}\r\n         */\r\n        isZero: function () {\r\n            var l = this.coeffs.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var e = this.coeffs[i];\r\n                if(!e.equals(0))\r\n                    return false;\r\n            }\r\n            return true;\r\n        },\r\n        /** \r\n         * Substitutes in a number n into the polynomial p(n)\r\n         * @param {Number} n\r\n         * @returns {Frac}\r\n         */\r\n        sub: function (n) {\r\n            var sum = new Frac(0), l = this.coeffs.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var t = this.coeffs[i];\r\n                if(!t.equals(0))\r\n                    sum = sum.add(t.multiply(new Frac(Math.pow(n, i))));\r\n            }\r\n            return sum;\r\n        },\r\n        /**\r\n         * Returns a clone of the polynomial\r\n         * @returns {Polynomial}\r\n         */\r\n        clone: function () {\r\n            var p = new Polynomial();\r\n            p.coeffs = this.coeffs;\r\n            p.variable = this.variable;\r\n            return p;\r\n        },\r\n        /**\r\n         * Gets the degree of the polynomial\r\n         * @returns {Number}\r\n         */\r\n        deg: function () {\r\n            this.trim();\r\n            return this.coeffs.length - 1;\r\n        },\r\n        /**\r\n         * Returns a lead coefficient\r\n         * @returns {Frac}\r\n         */\r\n        lc: function () {\r\n            return this.coeffs[this.deg()].clone();\r\n        },\r\n        /**\r\n         * Converts polynomial into a monic polynomial\r\n         * @returns {Polynomial}\r\n         */\r\n        monic: function () {\r\n            var lc = this.lc(), l = this.coeffs.length;\r\n            for(var i = 0; i < l; i++)\r\n                this.coeffs[i] = this.coeffs[i].divide(lc);\r\n            return this;\r\n        },\r\n        /**\r\n         * Returns the GCD of two polynomials\r\n         * @param {Polynomial} poly\r\n         * @returns {Polynomial}\r\n         */\r\n        gcd: function (poly) {\r\n            //get the maximum power of each\r\n            var mp1 = this.coeffs.length - 1,\r\n                    mp2 = poly.coeffs.length - 1,\r\n                    T;\r\n            //swap so we always have the greater power first\r\n            if(mp1 < mp2) {\r\n                return poly.gcd(this);\r\n            }\r\n            var a = this;\r\n\r\n            while(!poly.isZero()) {\r\n                var t = poly.clone();\r\n                a = a.clone();\r\n                T = a.divide(t);\r\n                poly = T[1];\r\n                a = t;\r\n            }\r\n\r\n            var gcd = core.Math2.QGCD.apply(null, a.coeffs);\r\n            if(!gcd.equals(1)) {\r\n                var l = a.coeffs.length;\r\n                for(var i = 0; i < l; i++) {\r\n                    a.coeffs[i] = a.coeffs[i].divide(gcd);\r\n                }\r\n            }\r\n            return a;\r\n        },\r\n        /**\r\n         * Differentiates the polynomial\r\n         * @returns {Polynomial}\r\n         */\r\n        diff: function () {\r\n            var new_array = [], l = this.coeffs.length;\r\n            for(var i = 1; i < l; i++)\r\n                new_array.push(this.coeffs[i].multiply(new Frac(i)));\r\n            this.coeffs = new_array;\r\n            return this;\r\n        },\r\n        /**\r\n         * Integrates the polynomial\r\n         * @returns {Polynomial} \r\n         */\r\n        integrate: function () {\r\n            var new_array = [0], l = this.coeffs.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var c = new Frac(i + 1);\r\n                new_array[c] = this.coeffs[i].divide(c);\r\n            }\r\n            this.coeffs = new_array;\r\n            return this;\r\n        },\r\n        /**\r\n         * Returns the Greatest common factor of the polynomial\r\n         * @param {bool} toPolynomial - true if a polynomial is wanted\r\n         * @returns {Frac|Polynomial}\r\n         */\r\n        gcf: function (toPolynomial) {\r\n            //get the first nozero coefficient and returns its power\r\n            var fnz = function (a) {\r\n                for(var i = 0; i < a.length; i++)\r\n                    if(!a[i].equals(0))\r\n                        return i;\r\n            },\r\n                    ca = [];\r\n            for(var i = 0; i < this.coeffs.length; i++) {\r\n                var c = this.coeffs[i];\r\n                if(!c.equals(0) && ca.indexOf(c) === -1)\r\n                    ca.push(c);\r\n            }\r\n            var p = [core.Math2.QGCD.apply(undefined, ca), fnz(this.coeffs)].toDecimal();\r\n\r\n            if(toPolynomial) {\r\n                var parr = [];\r\n                parr[p[1] - 1] = p[0];\r\n                p = Polynomial.fromArray(parr, this.variable).fill();\r\n            }\r\n\r\n            return p;\r\n        },\r\n        /**\r\n         * Raises a polynomial P to a power p -> P^p. e.g. (x+1)^2\r\n         * @param {bool} incl_img - Include imaginary numbers \r\n         */\r\n        quad: function (incl_img) {\r\n            var roots = [];\r\n            if(this.coeffs.length > 3)\r\n                throw new Error('Cannot calculate quadratic order of ' + (this.coeffs.length - 1));\r\n            if(this.coeffs.length === 0)\r\n                throw new Error('Polynomial array has no terms');\r\n            var a = this.coeffs[2] || 0, b = this.coeffs[1] || 0, c = this.coeffs[0];\r\n            var dsc = b * b - 4 * a * c;\r\n            if(dsc < 0 && !incl_img)\r\n                return roots;\r\n            else {\r\n                roots[0] = (-b + Math.sqrt(dsc)) / (2 * a);\r\n                roots[1] = (-b - Math.sqrt(dsc)) / (2 * a);\r\n            }\r\n            return roots;\r\n        },\r\n        /**\r\n         * Makes polynomial square free\r\n         * @returns {Array}\r\n         */\r\n        squareFree: function () {\r\n\r\n            var a = this.clone(),\r\n                    i = 1,\r\n                    b = a.clone().diff(),\r\n                    c = a.clone().gcd(b),\r\n                    w = a.divide(c)[0];\r\n            var output = Polynomial.fromArray([new Frac(1)], a.variable);\r\n            while(!c.equalsNumber(1)) {\r\n                var y = w.gcd(c);\r\n                var z = w.divide(y)[0];\r\n                //one of the factors may have shown up since it's square but smaller than the \r\n                //one where finding\r\n                if(!z.equalsNumber(1) && i > 1) {\r\n                    var t = z.clone();\r\n                    for(var j = 1; j < i; j++)\r\n                        t.multiply(z.clone());\r\n                    z = t;\r\n                }\r\n                output = output.multiply(z);\r\n                i++;\r\n                w = y;\r\n                c = c.divide(y)[0];\r\n            }\r\n\r\n            return [output, w, i];\r\n        },\r\n        /**\r\n         * Converts polynomial to Symbol\r\n         * @returns {Symbol}\r\n         */\r\n        toSymbol: function () {\r\n            var l = this.coeffs.length,\r\n                    variable = this.variable;\r\n            if(l === 0)\r\n                return new core.Symbol(0);\r\n            var end = l - 1, str = '';\r\n\r\n            for(var i = 0; i < l; i++) {\r\n                //place the plus sign for all but the last one\r\n                var plus = i === end ? '' : '+',\r\n                        e = this.coeffs[i];\r\n                if(!e.equals(0))\r\n                    str += (e + '*' + variable + '^' + i + plus);\r\n            }\r\n            return _.parse(str);\r\n        },\r\n        /**\r\n         * Checks if polynomial is equal to a number\r\n         * @param {Number} x\r\n         * @returns {Boolean}\r\n         */\r\n        equalsNumber: function (x) {\r\n            this.trim();\r\n            return this.coeffs.length === 1 && this.coeffs[0].toDecimal() === String(x);\r\n        },\r\n        toString: function () {\r\n            return this.toSymbol().toString();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * TODO\r\n     * ===================================================================================\r\n     * THIS METHOD HAS A NASTY HIDDEN BUG. IT HAS INCONSISTENT RETURN TYPES PRIMARILY DUE TO \r\n     * WRONG ASSUMPTIONS AT THE BEGINNING. THE ASSUMPTION WAS THAT COEFFS WERE ALWAYS GOING BE NUMBERS\r\n     * NOT TAKING INTO ACCOUNT THAT IMAGINARY NUMBERS. FIXING THIS BREAKS WAY TOO MANY TESTS \r\n     * AT THEM MOMENT WHICH I DON'T HAVE TO FIX\r\n     * ===================================================================================\r\n     * If the symbols is of group PL or CP it will return the multipliers of each symbol\r\n     * as these are polynomial coefficients. CB symbols are glued together by multiplication\r\n     * so the symbol multiplier carries the coefficients for all contained symbols.\r\n     * For S it just returns it's own multiplier. This function doesn't care if it's a polynomial or not\r\n     * @param {Array} c The coefficient array\r\n     * @param {boolean} with_order \r\n     * @return {Array}\r\n     */\r\n    Symbol.prototype.coeffs = function (c, with_order) {\r\n        if(with_order && !this.isPoly(true))\r\n            _.error('Polynomial expected when requesting coefficients with order');\r\n        c = c || [];\r\n        var s = this.clone().distributeMultiplier();\r\n        if(s.isComposite()) {\r\n            for(var x in s.symbols) {\r\n                var sub = s.symbols[x];\r\n                if(sub.isComposite()) {\r\n                    sub.clone().distributeMultiplier().coeffs(c, with_order);\r\n                }\r\n                else {\r\n                    if(with_order)\r\n                        c[sub.isConstant() ? 0 : sub.power.toDecimal()] = sub.multiplier;\r\n                    else {\r\n                        c.push(sub.multiplier);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if(with_order)\r\n                c[s.isConstant(true) ? 0 : s.power.toDecimal()] = s.multiplier;\r\n            else {\r\n                if(s.group === CB && s.isImaginary()) {\r\n                    var m = new Symbol(s.multiplier);\r\n                    s.each(function (x) {\r\n                        //add the imaginary part\r\n                        if(x.isConstant(true) || x.imaginary)\r\n                            m = _.multiply(m, x);\r\n                    });\r\n                    c.push(m);\r\n                }\r\n                else\r\n                    c.push(s.multiplier);\r\n            }\r\n        }\r\n        //fill the holes\r\n        if(with_order) {\r\n            for(var i = 0; i < c.length; i++)\r\n                if(c[i] === undefined)\r\n                    c[i] = new Symbol(0);\r\n        }\r\n        return c;\r\n    };\r\n    Symbol.prototype.tBase = function (map) {\r\n        if(typeof map === 'undefined')\r\n            throw new Error('Symbol.tBase requires a map object!');\r\n        var terms = [];\r\n        var symbols = this.collectSymbols(null, null, null, true),\r\n                l = symbols.length;\r\n        for(var i = 0; i < l; i++) {\r\n            var symbol = symbols[i],\r\n                    g = symbol.group,\r\n                    nterm = new MVTerm(symbol.multiplier, [], map);\r\n            if(g === CB) {\r\n                for(var x in symbol.symbols) {\r\n                    var sym = symbol.symbols[x];\r\n                    nterm.terms[map[x]] = sym.power;\r\n                }\r\n            }\r\n            else {\r\n                nterm.terms[map[symbol.value]] = symbol.power;\r\n            }\r\n\r\n            terms.push(nterm.fill());\r\n            nterm.updateCount();\r\n        }\r\n        return terms;\r\n    };\r\n    Symbol.prototype.altVar = function (x) {\r\n        var m = this.multiplier.toString(), p = this.power.toString();\r\n        return (m === '1' ? '' : m + '*') + x + (p === '1' ? '' : '^' + p);\r\n    };\r\n    /**\r\n     * Checks to see if the symbols contain the same variables\r\n     * @param {Symbol} symbol\r\n     * @returns {Boolean}\r\n     */\r\n    Symbol.prototype.sameVars = function (symbol) {\r\n        if(!(this.symbols || this.group === symbol.group))\r\n            return false;\r\n        for(var x in this.symbols) {\r\n            var a = this.symbols[x], b = symbol.symbols[x];\r\n            if(!b)\r\n                return false;\r\n            if(a.value !== b.value)\r\n                return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Groups the terms in a symbol with respect to a variable\r\n     * For instance the symbol {a*b^2*x^2+a*b*x^2+x+6} returns [6,1,a*b+a*b^2]\r\n     * @returns {Factors}\r\n     */\r\n    Symbol.prototype.groupTerms = function (x) {\r\n        x = String(x);\r\n        var f, p, egrouped;\r\n        var grouped = [];\r\n        this.each(function (e) {\r\n            if(e.group === PL) {\r\n                egrouped = e.groupTerms(x);\r\n                for(var i = 0; i < egrouped.length; i++) {\r\n                    var el = egrouped[i];\r\n                    if(el)\r\n                        grouped[i] = el;\r\n                }\r\n            }\r\n            else {\r\n                f = core.Utils.decompose_fn(e, x, true);\r\n                p = f.x.value === x ? Number(f.x.power) : 0;\r\n                //check if there's an existing value\r\n                grouped[p] = _.add(grouped[p] || new Symbol(0), f.a);\r\n            }\r\n        });\r\n        return grouped;\r\n    };\r\n    /**\r\n     * Use this to collect Factors\r\n     * @returns {Symbol[]}\r\n     */\r\n    Symbol.prototype.collectFactors = function () {\r\n        var factors = [];\r\n        if(this.group === CB)\r\n            this.each(function (x) {\r\n                factors.push(x.clone());\r\n            });\r\n        else\r\n            factors.push(this.clone());\r\n        return factors;\r\n    };\r\n    /**\r\n     * A container class for factors\r\n     * @returns {Factors}\r\n     */\r\n    function Factors() {\r\n        this.factors = {};\r\n        this.length = 0;\r\n    }\r\n    ;\r\n    Factors.prototype.getNumberSymbolics = function () {\r\n        var n = 0;\r\n        this.each(function (x) {\r\n            if(!x.isConstant(true))\r\n                n++;\r\n        });\r\n        return n;\r\n    };\r\n    /**\r\n     * Adds the factors to the factor object\r\n     * @param {Symbo} s\r\n     * @returns {Factors}\r\n     */\r\n    Factors.prototype.add = function (s) {\r\n        if(s.equals(0))\r\n            return this; //nothing to add\r\n\r\n        //we don't want to carry -1 as a factor. If a factor already exists,\r\n        //then add the minus one to that factor and return.\r\n        if(s.equals(-1) && this.length > 0) {\r\n            var fo = core.Utils.firstObject(this.factors, null, true);\r\n            this.add(_.symfunction(core.Settings.PARENTHESIS, [fo.obj]).negate());\r\n            delete this.factors[fo.key];\r\n            this.length--;\r\n            return this;\r\n        }\r\n\r\n        if(s.group === CB) {\r\n            var factors = this;\r\n            if(!s.multiplier.equals(1))\r\n                factors.add(new Symbol(s.multiplier));\r\n            s.each(function (x) {\r\n                factors.add(x);\r\n            });\r\n        }\r\n        else {\r\n            if(this.preAdd) //if a preAdd function was defined call it to do prep\r\n                s = this.preAdd(s);\r\n            if(this.pFactor) //if the symbol isn't linear add back the power\r\n                s = _.pow(s, new Symbol(this.pFactor));\r\n\r\n            var is_constant = s.isConstant();\r\n            if(is_constant && s.equals(1))\r\n                return this; //don't add 1\r\n            var v = is_constant ? s.value : s.text();\r\n            if(v in this.factors) {\r\n                this.factors[v] = _.multiply(this.factors[v], s);\r\n                //did the addition cancel out the existing factor? If so remove it and decrement the length\r\n                if(this.factors[v].equals(1)) {\r\n                    delete this.factors[v];\r\n                    this.length--;\r\n                }\r\n            }\r\n            else {\r\n                this.factors[v] = s;\r\n                this.length++;\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Converts the factor object to a Symbol\r\n     * @returns {Symbol}\r\n     */\r\n    Factors.prototype.toSymbol = function () {\r\n        var factored = new Symbol(1);\r\n        var factors = Object.values(this.factors).sort(function (a, b) {\r\n            return a.group > b.group;\r\n        });\r\n\r\n        for(var i = 0, l = factors.length; i < l; i++) {\r\n            var f = factors[i];\r\n\r\n            //don't wrap group S or FN\r\n            var factor = f.power.equals(1) && f.fname !== '' /* don't wrap it twice */ ?\r\n                    _.symfunction(core.PARENTHESIS, [f]) : f;\r\n\r\n            factored = _.multiply(factored, factor);\r\n        }\r\n        if(factored.fname === '')\r\n            factored = Symbol.unwrapPARENS(factored);\r\n        return factored;\r\n    };\r\n    /**\r\n     * Merges 2 factor objects into one\r\n     * @param {Factor} o\r\n     * @returns {Factors}\r\n     */\r\n    Factors.prototype.merge = function (o) {\r\n        for(var x in o) {\r\n            if(x in this.factors)\r\n                this.factors[x] = _.multiply(this.factors[x], o[x]);\r\n            else\r\n                this.factors[x] = o[x];\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * The iterator for the factor object\r\n     * @param {Function} f - callback\r\n     * @returns {Factor}\r\n     */\r\n    Factors.prototype.each = function (f) {\r\n        for(var x in this.factors) {\r\n            var factor = this.factors[x];\r\n            if(factor.fname === core.PARENTHESIS && factor.isLinear())\r\n                factor = factor.args[0];\r\n            f.call(this, factor, x);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Return the number of factors contained in the factor object\r\n     * @returns {int}\r\n     */\r\n    Factors.prototype.count = function () {\r\n        return keys(this.factors).length;\r\n    };\r\n    /**\r\n     * Cleans up factors from -1\r\n     * @returns {undefined}\r\n     */\r\n    Factors.prototype.clean = function () {\r\n        try {\r\n            var h = core.Settings.CONST_HASH;\r\n            if(this.factors[h].lessThan(0)) {\r\n                if(this.factors[h].equals(-1))\r\n                    delete this.factors[h];\r\n                else\r\n                    this.factors[h].negate();\r\n                this.each(function (x) {\r\n                    x.negate();\r\n                });\r\n            }\r\n        }\r\n        catch(e) {\r\n        }\r\n        ;\r\n    };\r\n    Factors.prototype.toString = function () {\r\n        return this.toSymbol().toString();\r\n    };\r\n\r\n    //a wrapper for performing multivariate division\r\n    function MVTerm(coeff, terms, map) {\r\n        this.terms = terms || [];\r\n        this.coeff = coeff;\r\n        this.map = map; //careful! all maps are the same object\r\n        this.sum = new core.Frac(0);\r\n        this.image = undefined;\r\n    }\r\n    ;\r\n    MVTerm.prototype.updateCount = function () {\r\n        this.count = this.count || 0;\r\n        for(var i = 0; i < this.terms.length; i++) {\r\n            if(!this.terms[i].equals(0))\r\n                this.count++;\r\n        }\r\n        return this;\r\n    };\r\n    MVTerm.prototype.getVars = function () {\r\n        var vars = [];\r\n        for(var i = 0; i < this.terms.length; i++) {\r\n            var term = this.terms[i],\r\n                    rev_map = this.getRevMap();\r\n            if(!term.equals(0))\r\n                vars.push(this.rev_map[i]);\r\n        }\r\n        return vars.join(' ');\r\n    };\r\n    MVTerm.prototype.len = function () {\r\n        if(typeof this.count === 'undefined') {\r\n            this.updateCount();\r\n        }\r\n        return this.count;\r\n    };\r\n    MVTerm.prototype.toSymbol = function (rev_map) {\r\n        rev_map = rev_map || this.getRevMap();\r\n        var symbol = new Symbol(this.coeff);\r\n        for(var i = 0; i < this.terms.length; i++) {\r\n            var v = rev_map[i],\r\n                    t = this.terms[i];\r\n            if(t.equals(0) || v === CONST_HASH)\r\n                continue;\r\n            var mapped = new Symbol(v);\r\n            mapped.power = t;\r\n            symbol = _.multiply(symbol, mapped);\r\n        }\r\n        return symbol;\r\n    };\r\n    MVTerm.prototype.getRevMap = function () {\r\n        if(this.rev_map)\r\n            return this.rev_map;\r\n        var o = {};\r\n        for(var x in this.map)\r\n            o[this.map[x]] = x;\r\n        this.rev_map = o;\r\n        return o;\r\n    };\r\n    MVTerm.prototype.generateImage = function () {\r\n        this.image = this.terms.join(' ');\r\n        return this;\r\n    },\r\n            MVTerm.prototype.getImg = function () {\r\n                if(!this.image)\r\n                    this.generateImage();\r\n                return this.image;\r\n            },\r\n            MVTerm.prototype.fill = function () {\r\n                var l = this.map.length;\r\n                for(var i = 0; i < l; i++) {\r\n                    if(typeof this.terms[i] === 'undefined')\r\n                        this.terms[i] = new core.Frac(0);\r\n                    else {\r\n                        this.sum = this.sum.add(this.terms[i]);\r\n                    }\r\n                }\r\n                return this;\r\n            };\r\n    MVTerm.prototype.divide = function (mvterm) {\r\n        var c = this.coeff.divide(mvterm.coeff),\r\n                l = this.terms.length,\r\n                new_mvterm = new MVTerm(c, [], this.map);\r\n        for(var i = 0; i < l; i++) {\r\n            new_mvterm.terms[i] = this.terms[i].subtract(mvterm.terms[i]);\r\n            new_mvterm.sum = new_mvterm.sum.add(new_mvterm.terms[i]);\r\n        }\r\n        return new_mvterm;\r\n    };\r\n    MVTerm.prototype.multiply = function (mvterm) {\r\n        var c = this.coeff.multiply(mvterm.coeff),\r\n                l = this.terms.length,\r\n                new_mvterm = new MVTerm(c, [], this.map);\r\n        for(var i = 0; i < l; i++) {\r\n            new_mvterm.terms[i] = this.terms[i].add(mvterm.terms[i]);\r\n            new_mvterm.sum = new_mvterm.sum.add(new_mvterm.terms[i]);\r\n        }\r\n        return new_mvterm;\r\n    };\r\n    MVTerm.prototype.isZero = function () {\r\n        return this.coeff.equals(0);\r\n    };\r\n    MVTerm.prototype.toString = function () {\r\n        return '{ coeff: ' + this.coeff.toString() + ', terms: [' +\r\n                this.terms.join(',') + ']: sum: ' + this.sum.toString() + ', count: ' + this.count + '}';\r\n    };\r\n\r\n    core.Utils.toMapObj = function (arr) {\r\n        var c = 0, o = {};\r\n        for(var i = 0; i < arr.length; i++) {\r\n            var v = arr[i];\r\n            if(typeof o[v] === 'undefined') {\r\n                o[v] = c;\r\n                c++;\r\n            }\r\n        }\r\n        o.length = c;\r\n        return o;\r\n    };\r\n    core.Utils.filledArray = function (v, n, clss) {\r\n        var a = [];\r\n        while(n--) {\r\n            a[n] = clss ? new clss(v) : v;\r\n        }\r\n        return a;\r\n    };\r\n    core.Utils.arrSum = function (arr) {\r\n        var sum = 0, l = arr.length;\r\n        for(var i = 0; i < l; i++)\r\n            sum += arr[i];\r\n        return sum;\r\n    };\r\n    /**\r\n     * Determines if 2 arrays have intersecting elements.\r\n     * @param {Array} a\r\n     * @param {Array} b\r\n     * @returns {Boolean} True if a and b have intersecting elements.\r\n     */\r\n    core.Utils.haveIntersection = function (a, b) {\r\n        var t;\r\n        if(b.length > a.length)\r\n            t = b, b = a, a = t; // indexOf to loop over shorter\r\n        return a.some(function (e) {\r\n            return b.indexOf(e) > -1;\r\n        });\r\n    };\r\n    /**\r\n     * Substitutes out functions as variables so they can be used in regular algorithms\r\n     * @param {Symbol} symbol\r\n     * @param {Object} map\r\n     * @returns {String} The expression string\r\n     */\r\n    core.Utils.subFunctions = function (symbol, map) {\r\n        map = map || {};\r\n        var subbed = [];\r\n        symbol.each(function (x) {\r\n            if(x.group === FN || x.previousGroup === FN) {\r\n                //we need a new variable name so why not use one of the existing\r\n                var val = core.Utils.text(x, 'hash'), tvar = map[val];\r\n                if(!tvar) {\r\n                    //generate a unique enough name\r\n                    var t = x.fname + keys(map).length;\r\n                    map[val] = t;\r\n                    subbed.push(x.altVar(t));\r\n                }\r\n                else\r\n                    subbed.push(x.altVar(tvar));\r\n            }\r\n            else if(x.group === CB || x.group === PL || x.group === CP) {\r\n                subbed.push(core.Utils.subFunctions(x, map));\r\n            }\r\n            else\r\n                subbed.push(x.text());\r\n        });\r\n        if(symbol.group === CP || symbol.group === PL)\r\n            return symbol.altVar(core.Utils.inBrackets(subbed.join('+')));\r\n        ;\r\n        if(symbol.group === CB)\r\n            return symbol.altVar(core.Utils.inBrackets(subbed.join('*')));\r\n        return symbol.text();\r\n    };\r\n    core.Utils.getFunctionsSubs = function (map) {\r\n        var subs = {};\r\n        //prepare substitutions\r\n        for(var x in map)\r\n            subs[map[x]] = _.parse(x);\r\n        return subs;\r\n    };\r\n\r\n    var __ = core.Algebra = {\r\n        version: '1.4.6',\r\n        proots: function (symbol, decp) {\r\n            //the roots will be rounded up to 7 decimal places.\r\n            //if this causes trouble you can explicitly pass in a different number of places\r\n            //rarr for polynomial of power n is of format [n, coeff x^n, coeff x^(n-1), ..., coeff x^0]\r\n            decp = decp || 7;\r\n            var zeros = 0;\r\n            var known_roots = [];\r\n            var get_roots = function (rarr, powers, max) {\r\n                var roots = calcroots(rarr, powers, max).concat(known_roots);\r\n                for(var i = 0; i < zeros; i++)\r\n                    roots.unshift(0);\r\n                return roots;\r\n            };\r\n\r\n            if(symbol instanceof Symbol && symbol.isPoly()) {\r\n                symbol.distributeMultiplier();\r\n                //make it so the symbol has a constants as the lowest term\r\n                if(symbol.group === PL) {\r\n                    var lowest_pow = core.Utils.arrayMin(keys(symbol.symbols));\r\n                    var lowest_symbol = symbol.symbols[lowest_pow].clone().toUnitMultiplier();\r\n                    symbol = _.expand(_.divide(symbol, lowest_symbol));\r\n                    known_roots.push(0); //add zero since this is a known root\r\n                }\r\n                if(symbol.group === core.groups.S) {\r\n                    return [0];\r\n                }\r\n                else if(symbol.group === core.groups.PL) {\r\n                    var powers = keys(symbol.symbols),\r\n                            minpower = core.Utils.arrayMin(powers),\r\n                            symbol = core.PARSER.divide(symbol, core.PARSER.parse(symbol.value + '^' + minpower));\r\n                }\r\n\r\n                var variable = keys(symbol.symbols).sort().pop(),\r\n                        sym = symbol.group === core.groups.PL ? symbol.symbols : symbol.symbols[variable],\r\n                        g = sym.group,\r\n                        powers = g === S ? [sym.power.toDecimal()] : keys(sym.symbols),\r\n                        rarr = [],\r\n                        max = core.Utils.arrayMax(powers); //maximum power and degree of polynomial to be solved\r\n\r\n                // Prepare the data\r\n                for(var i = 1; i <= max; i++) {\r\n                    var c = 0; //if there is no power then the hole must be filled with a zero\r\n                    if(powers.indexOf(i + '') !== -1) {\r\n                        if(g === S) {\r\n                            c = sym.multiplier;\r\n                        }\r\n                        else {\r\n                            c = sym.symbols[i].multiplier;\r\n                        }\r\n                    }\r\n                    // Insert the coeffient but from the front\r\n                    rarr.unshift(c);\r\n                }\r\n\r\n                rarr.push(symbol.symbols[CONST_HASH].multiplier);\r\n\r\n                if(sym.group === S)\r\n                    rarr[0] = sym.multiplier;//the symbol maybe of group CP with one variable\r\n\r\n                return get_roots(rarr, powers, max);\r\n            }\r\n            else if(core.Utils.isArray(symbol)) {\r\n                var parr = symbol;\r\n                var rarr = [],\r\n                        powers = [],\r\n                        last_power = 0;\r\n                for(var i = 0; i < parr.length; i++) {\r\n\r\n                    var coeff = parr[i][0],\r\n                            pow = parr[i][1],\r\n                            d = pow - last_power - 1;\r\n                    //insert the zeros\r\n                    for(var j = 0; j < d; j++)\r\n                        rarr.unshift(0);\r\n\r\n                    rarr.unshift(coeff);\r\n                    if(pow !== 0)\r\n                        powers.push(pow);\r\n                    last_power = pow;\r\n                }\r\n                var max = Math.max.apply(undefined, powers);\r\n\r\n                return get_roots(rarr, powers, max);\r\n            }\r\n            else {\r\n                throw new core.exceptions.NerdamerTypeError('Cannot calculate roots. Symbol must be a polynomial!');\r\n            }\r\n\r\n            function calcroots(rarr, powers, max) {\r\n                var MAXDEGREE = 100; // Degree of largest polynomial accepted by this script.\r\n\r\n                // Make a clone of the coefficients before appending the max power\r\n                var p = rarr.slice(0);\r\n\r\n                // Divide the string up into its individual entries, which--presumably--are separated by whitespace\r\n                rarr.unshift(max);\r\n\r\n                if(max > MAXDEGREE) {\r\n                    throw new core.exceptions.ValueLimitExceededError(\"This utility accepts polynomials of degree up to \" + MAXDEGREE + \". \");\r\n                }\r\n\r\n                var zeroi = [], // Vector of imaginary components of roots\r\n                        degreePar = {};    // degreePar is a dummy variable for passing the parameter POLYDEGREE by reference\r\n                degreePar.Degree = max;\r\n\r\n                for(i = 0; i < max; i++) {\r\n                    zeroi.push(0);\r\n                }\r\n                var zeror = zeroi.slice(0); // Vector of real components of roots\r\n\r\n                // Find the roots\r\n                //--> Begin Jenkins-Traub\r\n\r\n                /*\r\n                 * A verbatim copy of Mr. David Binner's Jenkins-Traub port\r\n                 */\r\n                function QuadSD_ak1(NN, u, v, p, q, iPar) {\r\n                    // Divides p by the quadratic 1, u, v placing the quotient in q and the remainder in a, b\r\n                    // iPar is a dummy variable for passing in the two parameters--a and b--by reference\r\n                    q[0] = iPar.b = p[0];\r\n                    q[1] = iPar.a = -(u * iPar.b) + p[1];\r\n\r\n                    for(var i = 2; i < NN; i++) {\r\n                        q[i] = -(u * iPar.a + v * iPar.b) + p[i];\r\n                        iPar.b = iPar.a;\r\n                        iPar.a = q[i];\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                function calcSC_ak1(DBL_EPSILON, N, a, b, iPar, K, u, v, qk) {\r\n                    // This routine calculates scalar quantities used to compute the next K polynomial and\r\n                    // new estimates of the quadratic coefficients.\r\n                    // calcSC -\tinteger variable set here indicating how the calculations are normalized\r\n                    // to avoid overflow.\r\n                    // iPar is a dummy variable for passing in the nine parameters--a1, a3, a7, c, d, e, f, g, and h --by reference\r\n\r\n                    // sdPar is a dummy variable for passing the two parameters--c and d--into QuadSD_ak1 by reference\r\n                    var sdPar = new Object(),\r\n                            // TYPE = 3 indicates the quadratic is almost a factor of K\r\n                            dumFlag = 3;\r\n\r\n                    // Synthetic division of K by the quadratic 1, u, v\r\n                    sdPar.b = sdPar.a = 0.0;\r\n                    QuadSD_ak1(N, u, v, K, qk, sdPar);\r\n                    iPar.c = sdPar.a;\r\n                    iPar.d = sdPar.b;\r\n\r\n                    if(Math.abs(iPar.c) <= (100.0 * DBL_EPSILON * Math.abs(K[N - 1]))) {\r\n                        if(Math.abs(iPar.d) <= (100.0 * DBL_EPSILON * Math.abs(K[N - 2])))\r\n                            return dumFlag;\r\n                    }\r\n\r\n                    iPar.h = v * b;\r\n                    if(Math.abs(iPar.d) >= Math.abs(iPar.c)) {\r\n                        // TYPE = 2 indicates that all formulas are divided by d\r\n                        dumFlag = 2;\r\n                        iPar.e = a / (iPar.d);\r\n                        iPar.f = (iPar.c) / (iPar.d);\r\n                        iPar.g = u * b;\r\n                        iPar.a3 = (iPar.e) * ((iPar.g) + a) + (iPar.h) * (b / (iPar.d));\r\n                        iPar.a1 = -a + (iPar.f) * b;\r\n                        iPar.a7 = (iPar.h) + ((iPar.f) + u) * a;\r\n                    }\r\n                    else {\r\n                        // TYPE = 1 indicates that all formulas are divided by c;\r\n                        dumFlag = 1;\r\n                        iPar.e = a / (iPar.c);\r\n                        iPar.f = (iPar.d) / (iPar.c);\r\n                        iPar.g = (iPar.e) * u;\r\n                        iPar.a3 = (iPar.e) * a + ((iPar.g) + (iPar.h) / (iPar.c)) * b;\r\n                        iPar.a1 = -(a * ((iPar.d) / (iPar.c))) + b;\r\n                        iPar.a7 = (iPar.g) * (iPar.d) + (iPar.h) * (iPar.f) + a;\r\n                    }\r\n                    return dumFlag;\r\n                }\r\n\r\n                function nextK_ak1(DBL_EPSILON, N, tFlag, a, b, iPar, K, qk, qp) {\r\n                    // Computes the next K polynomials using the scalars computed in calcSC_ak1\r\n                    // iPar is a dummy variable for passing in three parameters--a1, a3, and a7\r\n                    var temp;\r\n                    if(tFlag == 3) {\t// Use unscaled form of the recurrence\r\n                        K[1] = K[0] = 0.0;\r\n                        for(var i = 2; i < N; i++) {\r\n                            K[i] = qk[i - 2];\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    temp = ((tFlag == 1) ? b : a);\r\n                    if(Math.abs(iPar.a1) > (10.0 * DBL_EPSILON * Math.abs(temp))) {\r\n                        // Use scaled form of the recurrence\r\n                        iPar.a7 /= iPar.a1;\r\n                        iPar.a3 /= iPar.a1;\r\n                        K[0] = qp[0];\r\n                        K[1] = -(qp[0] * iPar.a7) + qp[1];\r\n                        for(var i = 2; i < N; i++)\r\n                            K[i] = -(qp[i - 1] * iPar.a7) + qk[i - 2] * iPar.a3 + qp[i];\r\n                    }\r\n                    else {\r\n                        // If a1 is nearly zero, then use a special form of the recurrence\r\n                        K[0] = 0.0;\r\n                        K[1] = -(qp[0] * iPar.a7);\r\n                        for(var i = 2; i < N; i++) {\r\n                            K[i] = -(qp[i - 1] * iPar.a7) + qk[i - 2] * iPar.a3;\r\n                        }\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                function newest_ak1(tFlag, iPar, a, a1, a3, a7, b, c, d, f, g, h, u, v, K, N, p) {\r\n                    // Compute new estimates of the quadratic coefficients using the scalars computed in calcSC_ak1\r\n                    // iPar is a dummy variable for passing in the two parameters--uu and vv--by reference\r\n                    // iPar.a = uu, iPar.b = vv\r\n\r\n                    var a4, a5, b1, b2, c1, c2, c3, c4, temp;\r\n                    iPar.b = iPar.a = 0.0;// The quadratic is zeroed\r\n\r\n                    if(tFlag != 3) {\r\n                        if(tFlag != 2) {\r\n                            a4 = a + u * b + h * f;\r\n                            a5 = c + (u + v * f) * d;\r\n                        }\r\n                        else {\r\n                            a4 = (a + g) * f + h;\r\n                            a5 = (f + u) * c + v * d;\r\n                        }\r\n\r\n                        // Evaluate new quadratic coefficients\r\n                        b1 = -(K[N - 1] / p[N]);\r\n                        b2 = -(K[N - 2] + b1 * p[N - 1]) / p[N];\r\n                        c1 = v * b2 * a1;\r\n                        c2 = b1 * a7;\r\n                        c3 = b1 * b1 * a3;\r\n                        c4 = -(c2 + c3) + c1;\r\n                        temp = -c4 + a5 + b1 * a4;\r\n                        if(temp != 0.0) {\r\n                            iPar.a = -((u * (c3 + c2) + v * (b1 * a1 + b2 * a7)) / temp) + u;\r\n                            iPar.b = v * (1.0 + c4 / temp);\r\n                        }\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                function Quad_ak1(a, b1, c, iPar) {\r\n                    // Calculates the zeros of the quadratic a*Z^2 + b1*Z + c\r\n                    // The quadratic formula, modified to avoid overflow, is used to find the larger zero if the\r\n                    // zeros are real and both zeros are complex. The smaller real zero is found directly from\r\n                    // the product of the zeros c/a.\r\n\r\n                    // iPar is a dummy variable for passing in the four parameters--sr, si, lr, and li--by reference\r\n\r\n                    var b, d, e;\r\n                    iPar.sr = iPar.si = iPar.lr = iPar.li = 0.0;\r\n\r\n                    if(a == 0) {\r\n                        iPar.sr = ((b1 != 0) ? -(c / b1) : iPar.sr);\r\n                        return;\r\n                    }\r\n                    if(c == 0) {\r\n                        iPar.lr = -(b1 / a);\r\n                        return;\r\n                    }\r\n\r\n                    // Compute discriminant avoiding overflow\r\n                    b = b1 / 2.0;\r\n                    if(Math.abs(b) < Math.abs(c)) {\r\n                        e = ((c >= 0) ? a : -a);\r\n                        e = -e + b * (b / Math.abs(c));\r\n                        d = Math.sqrt(Math.abs(e)) * Math.sqrt(Math.abs(c));\r\n                    }\r\n                    else {\r\n                        e = -((a / b) * (c / b)) + 1.0;\r\n                        d = Math.sqrt(Math.abs(e)) * (Math.abs(b));\r\n                    }\r\n\r\n                    if(e >= 0) {\r\n                        // Real zeros\r\n                        d = ((b >= 0) ? -d : d);\r\n                        iPar.lr = (-b + d) / a;\r\n                        iPar.sr = ((iPar.lr != 0) ? (c / (iPar.lr)) / a : iPar.sr);\r\n                    }\r\n                    else {\r\n                        // Complex conjugate zeros\r\n                        iPar.lr = iPar.sr = -(b / a);\r\n                        iPar.si = Math.abs(d / a);\r\n                        iPar.li = -(iPar.si);\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                function QuadIT_ak1(DBL_EPSILON, N, iPar, uu, vv, qp, NN, sdPar, p, qk, calcPar, K) {\r\n                    // Variable-shift K-polynomial iteration for a quadratic factor converges only if the\r\n                    // zeros are equimodular or nearly so.\r\n                    // iPar is a dummy variable for passing in the five parameters--NZ, lzi, lzr, szi, and szr--by reference\r\n                    // sdPar is a dummy variable for passing the two parameters--a and b--in by reference\r\n                    // calcPar is a dummy variable for passing the nine parameters--a1, a3, a7, c, d, e, f, g, and h --in by reference\r\n\r\n                    // qPar is a dummy variable for passing the four parameters--szr, szi, lzr, and lzi--into Quad_ak1 by reference\r\n                    var qPar = new Object(),\r\n                            ee, mp, omp, relstp, t, u, ui, v, vi, zm,\r\n                            i, j = 0, tFlag, triedFlag = 0;   // Integer variables\r\n\r\n                    iPar.NZ = 0;// Number of zeros found\r\n                    u = uu; // uu and vv are coefficients of the starting quadratic\r\n                    v = vv;\r\n\r\n                    do {\r\n                        qPar.li = qPar.lr = qPar.si = qPar.sr = 0.0;\r\n                        Quad_ak1(1.0, u, v, qPar);\r\n                        iPar.szr = qPar.sr;\r\n                        iPar.szi = qPar.si;\r\n                        iPar.lzr = qPar.lr;\r\n                        iPar.lzi = qPar.li;\r\n\r\n                        // Return if roots of the quadratic are real and not close to multiple or nearly\r\n                        // equal and of opposite sign.\r\n                        if(Math.abs(Math.abs(iPar.szr) - Math.abs(iPar.lzr)) > 0.01 * Math.abs(iPar.lzr))\r\n                            break;\r\n\r\n                        // Evaluate polynomial by quadratic synthetic division\r\n\r\n                        QuadSD_ak1(NN, u, v, p, qp, sdPar);\r\n\r\n                        mp = Math.abs(-((iPar.szr) * (sdPar.b)) + (sdPar.a)) + Math.abs((iPar.szi) * (sdPar.b));\r\n\r\n                        // Compute a rigorous bound on the rounding error in evaluating p\r\n\r\n                        zm = Math.sqrt(Math.abs(v));\r\n                        ee = 2.0 * Math.abs(qp[0]);\r\n                        t = -((iPar.szr) * (sdPar.b));\r\n\r\n                        for(i = 1; i < N; i++) {\r\n                            ee = ee * zm + Math.abs(qp[i]);\r\n                        }\r\n\r\n                        ee = ee * zm + Math.abs(t + sdPar.a);\r\n                        ee = (9.0 * ee + 2.0 * Math.abs(t) - 7.0 * (Math.abs((sdPar.a) + t) + zm * Math.abs((sdPar.b)))) * DBL_EPSILON;\r\n\r\n                        // Iteration has converged sufficiently if the polynomial value is less than 20 times this bound\r\n                        if(mp <= 20.0 * ee) {\r\n                            iPar.NZ = 2;\r\n                            break;\r\n                        }\r\n\r\n                        j++;\r\n                        // Stop iteration after 20 steps\r\n                        if(j > 20)\r\n                            break;\r\n                        if(j >= 2) {\r\n                            if((relstp <= 0.01) && (mp >= omp) && (!triedFlag)) {\r\n                                // A cluster appears to be stalling the convergence. Five fixed shift\r\n                                // steps are taken with a u, v close to the cluster.\r\n                                relstp = ((relstp < DBL_EPSILON) ? Math.sqrt(DBL_EPSILON) : Math.sqrt(relstp));\r\n                                u -= u * relstp;\r\n                                v += v * relstp;\r\n\r\n                                QuadSD_ak1(NN, u, v, p, qp, sdPar);\r\n                                for(i = 0; i < 5; i++) {\r\n                                    tFlag = calcSC_ak1(DBL_EPSILON, N, sdPar.a, sdPar.b, calcPar, K, u, v, qk);\r\n                                    nextK_ak1(DBL_EPSILON, N, tFlag, sdPar.a, sdPar.b, calcPar, K, qk, qp);\r\n                                }\r\n\r\n                                triedFlag = 1;\r\n                                j = 0;\r\n\r\n                            }\r\n                        }\r\n                        omp = mp;\r\n\r\n                        // Calculate next K polynomial and new u and v\r\n                        tFlag = calcSC_ak1(DBL_EPSILON, N, sdPar.a, sdPar.b, calcPar, K, u, v, qk);\r\n                        nextK_ak1(DBL_EPSILON, N, tFlag, sdPar.a, sdPar.b, calcPar, K, qk, qp);\r\n                        tFlag = calcSC_ak1(DBL_EPSILON, N, sdPar.a, sdPar.b, calcPar, K, u, v, qk);\r\n                        newest_ak1(tFlag, sdPar, sdPar.a, calcPar.a1, calcPar.a3, calcPar.a7, sdPar.b, calcPar.c, calcPar.d, calcPar.f, calcPar.g, calcPar.h, u, v, K, N, p);\r\n                        ui = sdPar.a;\r\n                        vi = sdPar.b;\r\n\r\n                        // If vi is zero, the iteration is not converging\r\n                        if(vi != 0) {\r\n                            relstp = Math.abs((-v + vi) / vi);\r\n                            u = ui;\r\n                            v = vi;\r\n                        }\r\n                    }\r\n                    while(vi != 0);\r\n                    return;\r\n                }\r\n\r\n                function RealIT_ak1(DBL_EPSILON, iPar, sdPar, N, p, NN, qp, K, qk) {\r\n                    // Variable-shift H-polynomial iteration for a real zero\r\n                    // sss\t- starting iterate = sdPar.a\r\n                    // NZ\t\t- number of zeros found = iPar.NZ\r\n                    // dumFlag\t- flag to indicate a pair of zeros near real axis, returned to iFlag\r\n\r\n                    var ee, kv, mp, ms, omp, pv, s, t,\r\n                            dumFlag, i, j, nm1 = N - 1;   // Integer variables\r\n\r\n                    iPar.NZ = j = dumFlag = 0;\r\n                    s = sdPar.a;\r\n\r\n                    for(; ; ) {\r\n                        pv = p[0];\r\n\r\n                        // Evaluate p at s\r\n                        qp[0] = pv;\r\n                        for(i = 1; i < NN; i++) {\r\n                            qp[i] = pv = pv * s + p[i];\r\n                        }\r\n                        mp = Math.abs(pv);\r\n\r\n                        // Compute a rigorous bound on the error in evaluating p\r\n                        ms = Math.abs(s);\r\n                        ee = 0.5 * Math.abs(qp[0]);\r\n                        for(i = 1; i < NN; i++) {\r\n                            ee = ee * ms + Math.abs(qp[i]);\r\n                        }\r\n\r\n                        // Iteration has converged sufficiently if the polynomial value is less than\r\n                        // 20 times this bound\r\n                        if(mp <= 20.0 * DBL_EPSILON * (2.0 * ee - mp)) {\r\n                            iPar.NZ = 1;\r\n                            iPar.szr = s;\r\n                            iPar.szi = 0.0;\r\n                            break;\r\n                        }\r\n                        j++;\r\n                        // Stop iteration after 10 steps\r\n                        if(j > 10)\r\n                            break;\r\n\r\n                        if(j >= 2) {\r\n                            if((Math.abs(t) <= 0.001 * Math.abs(-t + s)) && (mp > omp)) {\r\n                                // A cluster of zeros near the real axis has been encountered.\r\n                                // Return with iFlag set to initiate a quadratic iteration.\r\n                                dumFlag = 1;\r\n                                iPar.a = s;\r\n                                break;\r\n                            } // End if ((fabs(t) <= 0.001*fabs(s - t)) && (mp > omp))\r\n                        } //End if (j >= 2)\r\n\r\n                        // Return if the polynomial value has increased significantly\r\n                        omp = mp;\r\n\r\n                        // Compute t, the next polynomial and the new iterate\r\n                        qk[0] = kv = K[0];\r\n                        for(i = 1; i < N; i++) {\r\n                            qk[i] = kv = kv * s + K[i];\r\n                        }\r\n\r\n                        if(Math.abs(kv) > Math.abs(K[nm1]) * 10.0 * DBL_EPSILON) {\r\n                            // Use the scaled form of the recurrence if the value of K at s is non-zero\r\n                            t = -(pv / kv);\r\n                            K[0] = qp[0];\r\n                            for(i = 1; i < N; i++) {\r\n                                K[i] = t * qk[i - 1] + qp[i];\r\n                            }\r\n                        }\r\n                        else {\r\n                            // Use unscaled form\r\n                            K[0] = 0.0;\r\n                            for(i = 1; i < N; i++)\r\n                                K[i] = qk[i - 1];\r\n                        }\r\n\r\n                        kv = K[0];\r\n                        for(i = 1; i < N; i++) {\r\n                            kv = kv * s + K[i];\r\n                        }\r\n                        t = ((Math.abs(kv) > (Math.abs(K[nm1]) * 10.0 * DBL_EPSILON)) ? -(pv / kv) : 0.0);\r\n                        s += t;\r\n                    }\r\n                    return dumFlag;\r\n                }\r\n\r\n                function Fxshfr_ak1(DBL_EPSILON, MDP1, L2, sr, v, K, N, p, NN, qp, u, iPar) {\r\n\r\n                    // Computes up to L2 fixed shift K-polynomials, testing for convergence in the linear or\r\n                    // quadratic case. Initiates one of the variable shift iterations and returns with the\r\n                    // number of zeros found.\r\n                    // L2\tlimit of fixed shift steps\r\n                    // iPar is a dummy variable for passing in the five parameters--NZ, lzi, lzr, szi, and szr--by reference\r\n                    // NZ\tnumber of zeros found\r\n                    var sdPar = new Object(), // sdPar is a dummy variable for passing the two parameters--a and b--into QuadSD_ak1 by reference\r\n                            calcPar = new Object(),\r\n                            // calcPar is a dummy variable for passing the nine parameters--a1, a3, a7, c, d, e, f, g, and h --into calcSC_ak1 by reference\r\n\r\n                            qk = new Array(MDP1),\r\n                            svk = new Array(MDP1),\r\n                            a, b, betas, betav, oss, ots, otv, ovv, s, ss, ts, tss, tv, tvv, ui, vi, vv,\r\n                            fflag, i, iFlag = 1, j, spass, stry, tFlag, vpass, vtry;     // Integer variables\r\n\r\n                    iPar.NZ = 0;\r\n                    betav = betas = 0.25;\r\n                    oss = sr;\r\n                    ovv = v;\r\n\r\n                    //Evaluate polynomial by synthetic division\r\n                    sdPar.b = sdPar.a = 0.0;\r\n                    QuadSD_ak1(NN, u, v, p, qp, sdPar);\r\n                    a = sdPar.a;\r\n                    b = sdPar.b;\r\n                    calcPar.h = calcPar.g = calcPar.f = calcPar.e = calcPar.d = calcPar.c = calcPar.a7 = calcPar.a3 = calcPar.a1 = 0.0;\r\n                    tFlag = calcSC_ak1(DBL_EPSILON, N, a, b, calcPar, K, u, v, qk);\r\n\r\n                    for(j = 0; j < L2; j++) {\r\n                        fflag = 1;\r\n\r\n                        // Calculate next K polynomial and estimate v\r\n                        nextK_ak1(DBL_EPSILON, N, tFlag, a, b, calcPar, K, qk, qp);\r\n                        tFlag = calcSC_ak1(DBL_EPSILON, N, a, b, calcPar, K, u, v, qk);\r\n\r\n                        // Use sdPar for passing in uu and vv instead of defining a brand-new variable.\r\n                        // sdPar.a = ui, sdPar.b = vi\r\n                        newest_ak1(tFlag, sdPar, a, calcPar.a1, calcPar.a3, calcPar.a7, b, calcPar.c, calcPar.d, calcPar.f, calcPar.g, calcPar.h, u, v, K, N, p);\r\n                        ui = sdPar.a;\r\n                        vv = vi = sdPar.b;\r\n\r\n                        // Estimate s\r\n                        ss = ((K[N - 1] != 0.0) ? -(p[N] / K[N - 1]) : 0.0);\r\n                        ts = tv = 1.0;\r\n\r\n                        if((j != 0) && (tFlag != 3)) {\r\n                            // Compute relative measures of convergence of s and v sequences\r\n                            tv = ((vv != 0.0) ? Math.abs((vv - ovv) / vv) : tv);\r\n                            ts = ((ss != 0.0) ? Math.abs((ss - oss) / ss) : ts);\r\n\r\n                            // If decreasing, multiply the two most recent convergence measures\r\n                            tvv = ((tv < otv) ? tv * otv : 1.0);\r\n                            tss = ((ts < ots) ? ts * ots : 1.0);\r\n\r\n                            // Compare with convergence criteria\r\n                            vpass = ((tvv < betav) ? 1 : 0);\r\n                            spass = ((tss < betas) ? 1 : 0);\r\n\r\n                            if((spass) || (vpass)) {\r\n\r\n                                // At least one sequence has passed the convergence test.\r\n                                // Store variables before iterating\r\n\r\n                                for(i = 0; i < N; i++) {\r\n                                    svk[i] = K[i];\r\n                                }\r\n                                s = ss;\r\n\r\n                                // Choose iteration according to the fastest converging sequence\r\n\r\n                                stry = vtry = 0;\r\n\r\n                                for(; ; ) {\r\n                                    if((fflag && ((fflag = 0) == 0)) && ((spass) && (!vpass || (tss < tvv)))) {\r\n                                        ;// Do nothing. Provides a quick \"short circuit\".\r\n                                    }\r\n                                    else {\r\n                                        QuadIT_ak1(DBL_EPSILON, N, iPar, ui, vi, qp, NN, sdPar, p, qk, calcPar, K);\r\n                                        a = sdPar.a;\r\n                                        b = sdPar.b;\r\n\r\n                                        if((iPar.NZ) > 0)\r\n                                            return;\r\n\r\n                                        // Quadratic iteration has failed. Flag that it has been tried and decrease the\r\n                                        // convergence criterion\r\n                                        iFlag = vtry = 1;\r\n                                        betav *= 0.25;\r\n\r\n                                        // Try linear iteration if it has not been tried and the s sequence is converging\r\n                                        if(stry || (!spass)) {\r\n                                            iFlag = 0;\r\n                                        }\r\n                                        else {\r\n                                            for(i = 0; i < N; i++)\r\n                                                K[i] = svk[i];\r\n                                        }\r\n                                    }\r\n                                    //fflag = 0;\r\n                                    if(iFlag != 0) {\r\n                                        // Use sdPar for passing in s instead of defining a brand-new variable.\r\n                                        // sdPar.a = s\r\n                                        sdPar.a = s;\r\n                                        iFlag = RealIT_ak1(DBL_EPSILON, iPar, sdPar, N, p, NN, qp, K, qk);\r\n                                        s = sdPar.a;\r\n\r\n                                        if((iPar.NZ) > 0)\r\n                                            return;\r\n\r\n                                        // Linear iteration has failed. Flag that it has been tried and decrease the\r\n                                        // convergence criterion\r\n                                        stry = 1;\r\n                                        betas *= 0.25;\r\n\r\n                                        if(iFlag != 0) {\r\n                                            // If linear iteration signals an almost double real zero, attempt quadratic iteration\r\n                                            ui = -(s + s);\r\n                                            vi = s * s;\r\n                                            continue;\r\n\r\n                                        }\r\n                                    }\r\n\r\n                                    // Restore variables\r\n                                    for(i = 0; i < N; i++)\r\n                                        K[i] = svk[i];\r\n\r\n                                    // Try quadratic iteration if it has not been tried and the v sequence is converging\r\n                                    if(!vpass || vtry)\r\n                                        break;\t\t// Break out of infinite for loop\r\n\r\n                                }\r\n\r\n                                // Re-compute qp and scalar values to continue the second stage\r\n\r\n                                QuadSD_ak1(NN, u, v, p, qp, sdPar);\r\n                                a = sdPar.a;\r\n                                b = sdPar.b;\r\n\r\n                                tFlag = calcSC_ak1(DBL_EPSILON, N, a, b, calcPar, K, u, v, qk);\r\n                            }\r\n                        }\r\n                        ovv = vv;\r\n                        oss = ss;\r\n                        otv = tv;\r\n                        ots = ts;\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                function rpSolve(degPar, p, zeror, zeroi) {\r\n                    var N = degPar.Degree,\r\n                            RADFAC = 3.14159265358979323846 / 180, // Degrees-to-radians conversion factor = PI/180\r\n                            LB2 = Math.LN2, // Dummy variable to avoid re-calculating this value in loop below\r\n                            MDP1 = degPar.Degree + 1,\r\n                            K = new Array(MDP1),\r\n                            pt = new Array(MDP1),\r\n                            qp = new Array(MDP1),\r\n                            temp = new Array(MDP1),\r\n                            // qPar is a dummy variable for passing the four parameters--sr, si, lr, and li--by reference\r\n                            qPar = new Object(),\r\n                            // Fxshfr_Par is a dummy variable for passing parameters by reference : NZ, lzi, lzr, szi, szr);\r\n                            Fxshfr_Par = new Object(),\r\n                            bnd, DBL_EPSILON, df, dx, factor, ff, moduli_max, moduli_min, sc, x, xm,\r\n                            aa, bb, cc, sr, t, u, xxx,\r\n                            j, jj, l, NM1, NN, zerok;// Integer variables\r\n\r\n                    // Calculate the machine epsilon and store in the variable DBL_EPSILON.\r\n                    // To calculate this value, just use existing variables rather than create new ones that will be used only for this code block\r\n                    aa = 1.0;\r\n                    do {\r\n                        DBL_EPSILON = aa;\r\n                        aa /= 2;\r\n                        bb = 1.0 + aa;\r\n                    }\r\n                    while(bb > 1.0);\r\n\r\n                    var LO = Number.MIN_VALUE / DBL_EPSILON,\r\n                            cosr = Math.cos(94.0 * RADFAC), // = -0.069756474\r\n                            sinr = Math.sin(94.0 * RADFAC), // = 0.99756405\r\n                            xx = Math.sqrt(0.5), // = 0.70710678\r\n                            yy = -xx;\r\n\r\n                    Fxshfr_Par.NZ = j = 0;\r\n                    Fxshfr_Par.szr = Fxshfr_Par.szi = Fxshfr_Par.lzr = Fxshfr_Par.lzi = 0.0;\r\n\r\n                    // Remove zeros at the origin, if any\r\n                    while(p[N] == 0) {\r\n                        zeror[j] = zeroi[j] = 0;\r\n                        N--;\r\n                        j++;\r\n                    }\r\n                    NN = N + 1;\r\n\r\n                    // >>>>> Begin Main Loop <<<<<\r\n                    while(N >= 1) { // Main loop\r\n                        // Start the algorithm for one zero\r\n                        if(N <= 2) {\r\n                            // Calculate the final zero or pair of zeros\r\n                            if(N < 2) {\r\n                                zeror[degPar.Degree - 1] = -(p[1] / p[0]);\r\n                                zeroi[degPar.Degree - 1] = 0;\r\n                            }\r\n                            else {\r\n                                qPar.li = qPar.lr = qPar.si = qPar.sr = 0.0;\r\n                                Quad_ak1(p[0], p[1], p[2], qPar);\r\n                                zeror[degPar.Degree - 2] = qPar.sr;\r\n                                zeroi[degPar.Degree - 2] = qPar.si;\r\n                                zeror[degPar.Degree - 1] = qPar.lr;\r\n                                zeroi[degPar.Degree - 1] = qPar.li;\r\n                            }\r\n                            break;\r\n                        }\r\n\r\n                        // Find the largest and smallest moduli of the coefficients\r\n                        moduli_max = 0.0;\r\n                        moduli_min = Number.MAX_VALUE;\r\n\r\n                        for(i = 0; i < NN; i++) {\r\n                            x = Math.abs(p[i]);\r\n                            if(x > moduli_max)\r\n                                moduli_max = x;\r\n                            if((x != 0) && (x < moduli_min))\r\n                                moduli_min = x;\r\n                        }\r\n\r\n                        // Scale if there are large or very small coefficients\r\n                        // Computes a scale factor to multiply the coefficients of the polynomial. The scaling\r\n                        // is done to avoid overflow and to avoid undetected underflow interfering with the\r\n                        // convergence criterion.\r\n                        // The factor is a power of the base.\r\n                        sc = LO / moduli_min;\r\n\r\n                        if(((sc <= 1.0) && (moduli_max >= 10)) || ((sc > 1.0) && (Number.MAX_VALUE / sc >= moduli_max))) {\r\n                            sc = ((sc == 0) ? Number.MIN_VALUE : sc);\r\n                            l = Math.floor(Math.log(sc) / LB2 + 0.5);\r\n                            factor = Math.pow(2.0, l);\r\n                            if(factor != 1.0) {\r\n                                for(i = 0; i < NN; i++)\r\n                                    p[i] *= factor;\r\n                            }\r\n                        }\r\n\r\n                        // Compute lower bound on moduli of zeros\r\n                        for(var i = 0; i < NN; i++)\r\n                            pt[i] = Math.abs(p[i]);\r\n                        pt[N] = -(pt[N]);\r\n                        NM1 = N - 1;\r\n\r\n                        // Compute upper estimate of bound\r\n                        x = Math.exp((Math.log(-pt[N]) - Math.log(pt[0])) / N);\r\n\r\n                        if(pt[NM1] != 0) {\r\n                            // If Newton step at the origin is better, use it\r\n                            xm = -pt[N] / pt[NM1];\r\n                            x = ((xm < x) ? xm : x);\r\n                        }\r\n\r\n                        // Chop the interval (0, x) until ff <= 0\r\n                        xm = x;\r\n                        do {\r\n                            x = xm;\r\n                            xm = 0.1 * x;\r\n                            ff = pt[0];\r\n                            for(var i = 1; i < NN; i++) {\r\n                                ff = ff * xm + pt[i];\r\n                            }\r\n                        }\r\n                        while(ff > 0); // End do-while loop\r\n\r\n                        dx = x;\r\n                        // Do Newton iteration until x converges to two decimal places\r\n\r\n                        do {\r\n                            df = ff = pt[0];\r\n                            for(var i = 1; i < N; i++) {\r\n                                ff = x * ff + pt[i];\r\n                                df = x * df + ff;\r\n                            } // End for i\r\n                            ff = x * ff + pt[N];\r\n                            dx = ff / df;\r\n                            x -= dx;\r\n                        }\r\n                        while(Math.abs(dx / x) > 0.005); // End do-while loop\r\n\r\n                        bnd = x;\r\n\r\n                        // Compute the derivative as the initial K polynomial and do 5 steps with no shift\r\n                        for(var i = 1; i < N; i++)\r\n                            K[i] = (N - i) * p[i] / N;\r\n                        K[0] = p[0];\r\n                        aa = p[N];\r\n                        bb = p[NM1];\r\n                        zerok = ((K[NM1] == 0) ? 1 : 0);\r\n\r\n                        for(jj = 0; jj < 5; jj++) {\r\n                            cc = K[NM1];\r\n                            if(zerok) {\r\n                                // Use unscaled form of recurrence\r\n                                for(var i = 0; i < NM1; i++) {\r\n                                    j = NM1 - i;\r\n                                    K[j] = K[j - 1];\r\n                                } // End for i\r\n                                K[0] = 0;\r\n                                zerok = ((K[NM1] == 0) ? 1 : 0);\r\n                            }\r\n                            else {\r\n                                // Used scaled form of recurrence if value of K at 0 is nonzero\r\n                                t = -aa / cc;\r\n                                for(var i = 0; i < NM1; i++) {\r\n                                    j = NM1 - i;\r\n                                    K[j] = t * K[j - 1] + p[j];\r\n                                } // End for i\r\n                                K[0] = p[0];\r\n                                zerok = ((Math.abs(K[NM1]) <= Math.abs(bb) * DBL_EPSILON * 10.0) ? 1 : 0);\r\n                            }\r\n                        }\r\n\r\n                        // Save K for restarts with new shifts\r\n                        for(var i = 0; i < N; i++)\r\n                            temp[i] = K[i];\r\n\r\n                        // Loop to select the quadratic corresponding to each new shift\r\n                        for(jj = 1; jj <= 20; jj++) {\r\n\r\n                            // Quadratic corresponds to a double shift to a non-real point and its\r\n                            // complex conjugate. The point has modulus BND and amplitude rotated\r\n                            // by 94 degrees from the previous shift.\r\n\r\n                            xxx = -(sinr * yy) + cosr * xx;\r\n                            yy = sinr * xx + cosr * yy;\r\n                            xx = xxx;\r\n                            sr = bnd * xx;\r\n                            u = -(2.0 * sr);\r\n\r\n                            // Second stage calculation, fixed quadratic\r\n                            Fxshfr_ak1(DBL_EPSILON, MDP1, 20 * jj, sr, bnd, K, N, p, NN, qp, u, Fxshfr_Par);\r\n\r\n                            if(Fxshfr_Par.NZ != 0) {\r\n                                // The second stage jumps directly to one of the third stage iterations and\r\n                                // returns here if successful. Deflate the polynomial, store the zero or\r\n                                // zeros, and return to the main algorithm.\r\n                                j = degPar.Degree - N;\r\n                                zeror[j] = Fxshfr_Par.szr;\r\n                                zeroi[j] = Fxshfr_Par.szi;\r\n                                NN = NN - Fxshfr_Par.NZ;\r\n                                N = NN - 1;\r\n                                for(var i = 0; i < NN; i++)\r\n                                    p[i] = qp[i];\r\n                                if(Fxshfr_Par.NZ != 1) {\r\n                                    zeror[j + 1] = Fxshfr_Par.lzr;\r\n                                    zeroi[j + 1] = Fxshfr_Par.lzi;\r\n                                }\r\n                                break;\r\n                            }\r\n                            else {\r\n                                // If the iteration is unsuccessful, another quadratic is chosen after restoring K\r\n                                for(var i = 0; i < N; i++) {\r\n                                    K[i] = temp[i];\r\n                                }\r\n                            }\r\n                        }\r\n                        // Return with failure if no convergence with 20 shifts\r\n                        if(jj > 20) {\r\n                            degPar.Degree -= N;\r\n                            break;\r\n                        }\r\n                    }\r\n                    // >>>>> End Main Loop <<<<<\r\n                    return;\r\n                }\r\n                //--> End Jenkins-Traub\r\n                rpSolve(degreePar, p, zeror, zeroi);\r\n\r\n                var l = zeroi.length;\r\n                //format the output\r\n                for(i = 0; i < l; i++) {\r\n                    // We round the imaginary part to avoid having something crazy like 5.67e-16.\r\n                    var img = round(zeroi[i], decp + 8),\r\n                            real = round(zeror[i], decp + 8);\r\n                    // Did the rounding pay off? If the rounding did nothing more than chop off a few digits then no.\r\n                    // If the rounding results in a a number at least 3 digits shorter we'll keep it else we'll keep \r\n                    // the original otherwise the rounding was worth it.\r\n                    real = decp - String(real).length > 2 ? real : zeror[i];\r\n                    var sign = img < 0 ? '-' : '';\r\n\r\n                    // Remove the zeroes\r\n                    if(real === 0) {\r\n                        real = '';\r\n                    }\r\n                    if(img === 0) {\r\n                        img = '';\r\n                    }\r\n\r\n                    // Remove 1 as the multiplier and discard imaginary part if there isn't one.\r\n                    img = Math.abs(img) === 1 ? sign + 'i' : (img ? img + '*i' : '');\r\n\r\n                    var num = (real && img) ? real + '+' + img : real + img;\r\n                    zeror[i] = num.replace(/\\+\\-/g, '-');\r\n                }\r\n                return zeror;\r\n            }\r\n        },\r\n        roots: function (symbol) {\r\n\r\n            if(symbol.isConstant(true, true)) {\r\n                return core.Utils.nroots(symbol);\r\n            }\r\n            var roots = __.proots(symbol).map(function (x) {\r\n                return _.parse(x);\r\n            });\r\n            return core.Vector.fromArray(roots);\r\n        },\r\n        froot: function (f, guess, dx) {\r\n            var newtonraph = function (xn) {\r\n                var mesh = 1e-12,\r\n                        // If the derivative was already provided then don't recalculate.\r\n                        df = dx ? dx : core.Utils.build(core.Calculus.diff(f.clone())),\r\n                        // If the function was passed in as a function then don't recalculate.\r\n                        fn = f instanceof Function ? f : core.Utils.build(f),\r\n                        max = 10000,\r\n                        done = false,\r\n                        safety = 0;\r\n                while(!done) {\r\n                    var x = xn - (fn(xn) / df(xn));\r\n                    //absolute values for both x & xn ensures that we indeed have the radius    \r\n                    var r = Math.abs(x) - Math.abs(xn),\r\n                            delta = Math.abs(r);\r\n                    xn = x;\r\n\r\n                    if(delta < mesh)\r\n                        done = true;\r\n                    else if(safety > max) {\r\n                        xn = null;\r\n                        done = true;\r\n                    }\r\n\r\n                    safety++;\r\n                }\r\n                return xn;\r\n            };\r\n            return newtonraph(Number(guess));\r\n        },\r\n        quad: function (a, b, c) {\r\n            var q = function (a, b, c, sign) {\r\n                return _.parse('-(' + b + '+' + sign + '*sqrt((' + b + ')^2-4*(' + a + ')*(' + c + ')))/(2*' + a + ')');\r\n            };\r\n            return [q(a, b, c, 1), q(a, b, c, -1)];\r\n        },\r\n        sumProd: function (a, b) {\r\n            return __.quad(-b, a, -1).map(function (x) {\r\n                return x.invert();\r\n            });\r\n        },\r\n        coeffs: function (symbol, wrt, coeffs) {\r\n            wrt = String(wrt);\r\n            symbol = _.expand(symbol);\r\n            coeffs = coeffs || [new Symbol(0)];\r\n            //we cannot get coeffs for group EX\r\n            if(symbol.group === EX && symbol.contains(wrt, true))\r\n                _.error('Unable to get coefficients using expression ' + symbol.toString());\r\n            var vars = variables(symbol);\r\n            if(vars.length === 1 && vars[0] === wrt && !symbol.isImaginary()) {\r\n                var a = new Polynomial(symbol).coeffs.map(function (x) {\r\n                    return new Symbol(x);\r\n                });\r\n\r\n                for(var i = 0, l = a.length; i < l; i++) {\r\n                    var coeff = a[i],\r\n                            e = coeffs[i];\r\n                    if(e)\r\n                        coeff = _.add(e, coeff);\r\n                    coeffs[i] = coeff; //transfer it all over\r\n                }\r\n            }\r\n            else {\r\n                if(!wrt)\r\n                    _.error('Polynomial contains more than one variable. Please specify which variable is to be used!');\r\n                //if the variable isn't part of this polynomial then we're looking at x^0\r\n\r\n                if(vars.indexOf(wrt) === -1) {\r\n                    coeffs[0] = _.add(symbol, coeffs[0]);\r\n                }\r\n                else {\r\n                    coeffs = coeffs || [new Symbol(0)];\r\n                    if(symbol.group === CB) {\r\n                        var s = symbol.symbols[wrt];\r\n                        if(!s)\r\n                            _.error('Expression is not a polynomial!');\r\n                        var p = Number(s.power);\r\n                        coeff = _.divide(symbol.clone(), s.clone());\r\n                        if(coeff.contains(wrt, true) || p < 0 || !isInt(p))\r\n                            _.error('Expression is not a polynomial!');\r\n                        var e = coeffs[p];\r\n                        if(e)\r\n                            coeff = _.add(e, coeff);\r\n                        coeffs[p] = coeff;\r\n                    }\r\n                    else if(symbol.group === CP) {\r\n                        symbol.each(function (x) {\r\n                            __.coeffs(x.clone(), wrt, coeffs);\r\n                        }, true);\r\n                    }\r\n                }\r\n            }\r\n            //fill holes\r\n            for(var i = 0, l = coeffs.length; i < l; i++)\r\n                if(typeof coeffs[i] === 'undefined')\r\n                    coeffs[i] = new Symbol(0);\r\n\r\n            return coeffs;\r\n        },\r\n        /**\r\n         * Get's all the powers of a particular polynomial including the denominators. The denominators powers\r\n         * are returned as negative. All remaining polynomials are returned as zero order polynomials.\r\n         * for example polyPowers(x^2+1/x+y+t) will return [ '-1', 0, '2' ]\r\n         * @param {Symbol} e\r\n         * @param {String} for_variable\r\n         * @param {Array} powers\r\n         * @returns {Array} An array of the powers\r\n         */\r\n        //assumes you've already verified that it's a polynomial\r\n        polyPowers: function (e, for_variable, powers) {\r\n            powers = powers || [];\r\n            var g = g = e.group;\r\n            if(g === PL && for_variable === e.value) {\r\n                powers = powers.concat(keys(e.symbols));\r\n            }\r\n            else if(g === CP) {\r\n                for(var s in e.symbols) {\r\n                    var symbol = e.symbols[s];\r\n                    var g = symbol.group, v = symbol.value;\r\n                    if(g === S && for_variable === v)\r\n                        powers.push(symbol.power);\r\n                    else if(g === PL || g === CP)\r\n                        powers = __.polyPowers(symbol, for_variable, powers);\r\n                    else if(g === CB && symbol.contains(for_variable)) {\r\n                        var t = symbol.symbols[for_variable];\r\n                        if(t)\r\n                            powers.push((t.power));\r\n                    }\r\n                    else if(g === N || for_variable !== v)\r\n                        powers.push(0);\r\n                }\r\n            }\r\n            else if(g === CB && e.contains(for_variable)) {\r\n                powers.push(core.Utils.decompose_fn(e, for_variable, true).x.power);\r\n            }\r\n            return core.Utils.arrayUnique(powers).sort();\r\n        },\r\n        //The factor object\r\n        Factor: {\r\n            //splits the symbol in symbol and constant\r\n            split: function (symbol) {\r\n                var c = new Symbol(1); //the constants part\r\n                var s = new Symbol(1); //the symbolic part\r\n                __.Factor.factor(symbol, new Factors()).each(function (x) {\r\n                    var t = _.parse(x);\r\n                    if(x.isConstant(true)) {\r\n                        c = _.multiply(c, t);\r\n                    }\r\n                    else {\r\n                        s = _.multiply(s, t);\r\n                    }\r\n                });\r\n                return [c, s];\r\n            },\r\n            mix: function (o, include_negatives) {\r\n                var factors = keys(o);\r\n                var l = factors.length;\r\n                var m = [];//create a row which we'r going to be mixing\r\n                for(var i = 0; i < l; i++) {\r\n                    var factor = factors[i],\r\n                            p = o[factor];\r\n                    var ll = m.length;\r\n                    for(var j = 0; j < ll; j++) {\r\n                        var t = m[j] * factor;\r\n                        m.push(t);\r\n                        if(include_negatives)\r\n                            m.push(-t);\r\n                    }\r\n\r\n                    for(var j = 1; j <= p; j++)\r\n                        m.push(Math.pow(factor, j));\r\n                }\r\n                return m;\r\n            },\r\n            //TODO: this method is to replace common factoring\r\n            common: function (symbol, factors) {\r\n                try {\r\n                    if(symbol.group === CP) {\r\n                        //this may have the unfortunate side effect of expanding and factoring again\r\n                        //to only end up with the same result. \r\n                        //TODO: try to avoid this\r\n                        //collect the symbols and sort to have the longest first. Thinking is that the longest terms \r\n                        //has to contain the variable in order for it to be factorable\r\n                        var symbols = _.expand(symbol.clone(), true).collectSymbols(null, null, function (a, b) {\r\n                            return (b.length || 1) - (a.length || 1);\r\n                        });\r\n\r\n                        var map = {}; //create a map of common factors\r\n                        var coeffs = [];\r\n                        for(var i = 0; i < symbols.length; i++) {\r\n                            var sym = symbols[i];\r\n                            coeffs.push(sym.multiplier.clone());\r\n                            sym.each(function (x) {\r\n                                var p = Number(x.power);\r\n                                //This check exits since we have a symbolic power.\r\n                                //For the future... think about removing this check and modify for symbolic powers\r\n                                if(isNaN(p))\r\n                                    throw new Error('exiting');\r\n                                //loop through the symbols and lump together common terms\r\n                                if(x.value in map) {\r\n                                    if(p < map[x.value][0])\r\n                                        map[x.value][0] = p;\r\n                                    map[x.value][1].push(x);\r\n                                }\r\n                                else\r\n                                    map[x.value] = [p, [x]];\r\n                            });\r\n                        }\r\n                        //the factor\r\n                        var factor = new Symbol(1);\r\n                        for(var x in map) {\r\n                            //if this factor is found in all terms since the length of \r\n                            //matching variable terms matches the number of original terms\r\n                            if(map[x][1].length === symbols.length) {\r\n                                //generate a symbol and multiply into the factor\r\n                                factor = _.multiply(factor, _.pow(new Symbol(x), new Symbol(map[x][0])));\r\n                            }\r\n                        }\r\n                        //get coefficient factor\r\n                        var c = core.Math2.QGCD.apply(null, coeffs);\r\n\r\n                        if(!c.equals(1)) {\r\n                            factors.add(new Symbol(c));\r\n                            for(var i = 0; i < symbols.length; i++) {\r\n                                symbols[i].multiplier = symbols[i].multiplier.divide(c);\r\n                            }\r\n                        }\r\n\r\n                        //if we actuall found any factors\r\n                        if(!factor.equals(1)) {\r\n                            factors.add(factor);\r\n                            symbol = new Symbol(0);\r\n                            for(var i = 0; i < symbols.length; i++) {\r\n                                symbol = _.add(symbol, _.divide(symbols[i], factor.clone()));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                catch(e) {\r\n                    ;\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            zeroes: function (symbol, factors) {\r\n                var exit = function () {\r\n                    throw new core.exceptions.ValueLimitExceededError('Exiting');\r\n                };\r\n                try {\r\n                    var vars, term, sum, p, e;\r\n                    symbol = _.expand(symbol.clone());\r\n                    e = symbol.toString();\r\n                    vars = variables(symbol);\r\n\r\n                    sum = new Symbol(0);\r\n\r\n                    var terms = [];\r\n                    var powers = [];\r\n\r\n                    //start setting each variable to zero\r\n                    for(var i = 0, l = vars.length; i < vars.length; i++) {\r\n                        var subs = {};\r\n                        //we want to create a subs object with all but the current variable set to zero\r\n                        for(var j = 0; j < l; j++)\r\n                            if(i !== j) //make sure we're not looking at the same variable\r\n                                subs[vars[j]] = 0;\r\n                        term = _.parse(e, subs);\r\n                        var tp = term.power;\r\n                        //the temporary power has to be an integer as well\r\n                        if(!isInt(tp))\r\n                            exit();\r\n                        terms.push(term);\r\n                        powers.push(term.power);\r\n                    }\r\n\r\n                    //get the gcd. This will be the p in (a^n+b^m)^p\r\n                    //if the gcd equals 1 meaning n = m then we need a tie breakder\r\n                    if(core.Utils.allSame(powers)) {\r\n                        //get p given x number of terms\r\n                        var n_terms = symbol.length;\r\n                        //the number of zeroes determines\r\n                        var n_zeroes = terms.length;\r\n                        if(n_zeroes === 2) {\r\n                            p = new Frac(powers[0] / (n_terms - 1));\r\n                        }\r\n                        if(n_zeroes === 3) {\r\n                            p = new Frac(powers[0] / Math.round((Math.sqrt(8 * n_terms - 1) - 3) / 2));\r\n                        }\r\n                        /*\r\n                         //get the lowest possible power\r\n                         //e.g. given b^4+2*a^2*b^2+a^4, the power we're looking for would be 2\r\n                         symbol.each(function(x) {\r\n                         if(x.group === CB)\r\n                         x.each(function(y) {\r\n                         if(!p || y.power.lessThan(p))\r\n                         //p = Number(y.power);\r\n                         p = y.power;\r\n                         });\r\n                         else if(!p || x.power.lessThan(p))\r\n                         //p = Number(x.power);\r\n                         p = x.power;\r\n                         });\r\n                         */\r\n                    }\r\n                    else\r\n                        //p is just the gcd of the powers\r\n                        p = core.Math2.QGCD.apply(null, powers);\r\n\r\n                    //if we don't have an integer then exit\r\n                    if(!isInt(p))\r\n                        exit();\r\n\r\n                    //build the factor\r\n                    for(var i = 0; i < terms.length; i++) {\r\n                        var t = terms[i];\r\n                        var n = t.power.clone().divide(p);\r\n                        t.multiplier = new Frac(Math.pow(t.multiplier, 1 / n));\r\n                        t.power = p.clone();\r\n                        sum = _.add(sum, t);\r\n                    }\r\n\r\n                    //by now we have the factor of zeroes. We'll know if we got it right because \r\n                    //we'll get a remainder of zero each time we divide by it\r\n                    if(sum.group !== CP)\r\n                        return symbol; //nothing to do\r\n\r\n                    while(true) {\r\n                        var d = __.div(symbol.clone(), sum.clone());\r\n                        if(d[1].equals(0)) {\r\n                            symbol = d[0];\r\n                            factors.add(sum.clone());\r\n                            if(symbol.equals(1)) //we've reached 1 so done.\r\n                                break;\r\n                        }\r\n                        else\r\n                            break;\r\n                    }\r\n                }\r\n                catch(e) {\r\n                }\r\n                ;\r\n\r\n                return symbol;\r\n            },\r\n            factor: function (symbol, factors) {\r\n                // Don't try to factor constants\r\n                if(symbol.isConstant()) {\r\n                    return core.Math2.factor(symbol);\r\n                }\r\n\r\n                var _symbol = _.parse(symbol);\r\n                var retval = __.Factor._factor(_symbol, factors);\r\n                if(retval.equals(symbol)) {\r\n                    return retval;\r\n                }\r\n\r\n                if(retval.group === CB) {\r\n                    var t = new Symbol(1);\r\n                    var p = _.parse(retval.power);\r\n                    //store the multiplier and strip it\r\n                    var m = _.parse(retval.multiplier);\r\n\r\n                    retval.toUnitMultiplier();\r\n\r\n                    /* \r\n                     * NOTE: for sign issues with factor START DEBUGGING HERE\r\n                     */\r\n                    //move the sign to t\r\n                    if(retval.multiplier.lessThan(0)) {\r\n                        t.negate();\r\n                        retval.negate();\r\n                    }\r\n\r\n                    retval.each(function (x) {\r\n                        // Related to #566. Since the symbol's group may not have been properly\r\n                        // updated, it's easier to just parse the symbol and have the parser \r\n                        // do the update for us.\r\n                        var factored = _.parse(__.Factor._factor(x));\r\n\r\n                        if(factored.group === CB) {\r\n                            // Include the multiplier\r\n                            m = _.multiply(m, Symbol.create(factored.multiplier));\r\n                            factored.each(function (y) {\r\n                                var _factored = _.parse(__.Factor._factor(y));\r\n                                t = _.multiply(t, _factored);\r\n                                if(_factored.group === CB) {\r\n                                    m = _.multiply(m, Symbol.create(_factored.multiplier));\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            t = _.multiply(t, factored);\r\n                        }\r\n                    });\r\n\r\n                    //put back the multiplier and power\r\n                    retval = _.pow(_.multiply(m, t), p);\r\n                }\r\n\r\n                return retval;\r\n            },\r\n            quadFactor: function (symbol, factors) {\r\n                if(symbol.isPoly() && __.degree(symbol.equals(2))) {\r\n                    //We've  already checked that we're dealing with a polynomial\r\n                    var v = core.Utils.variables(symbol)[0]; //get the variable\r\n                    var coeffs = __.coeffs(symbol, v);\r\n                    //factor the lead coefficient\r\n                    var cf = __.Factor._factor(coeffs[2].clone());\r\n                    //check if we have factors\r\n                    if(cf.group === CB) {\r\n                        var symbols = cf.collectSymbols();\r\n                        //if the factors are greater than 2 we're done so exit\r\n                        if(symbols.length > 2)\r\n                            return symbol;\r\n                        //if we have two factors then attempt to factor the polynomial\r\n                        //let the factors be f1 and f1\r\n                        //let the factors be (ax+b)(cx+d)\r\n                        //let the coefficients be c1x^2+c2x+c3\r\n                        //then a(x1)+c(x2)=c2 and x1*x2=c3\r\n                        //we can solve for x1 and x2\r\n                        var c = _.multiply(_.parse(coeffs[0]), _.parse(symbols[0]));\r\n                        var b = _.parse(coeffs[1]).negate();\r\n                        var a = _.parse(symbols[1]);\r\n                        //solve the system\r\n                        var root = __.quad(a, b, c).filter(function (x) {\r\n                            if(core.Utils.isInt(x))\r\n                                return x;\r\n                        });\r\n                        //if we have one root then find the other one by dividing the constant\r\n                        if(root.length === 1) {\r\n                            var root1 = root[0];\r\n                            var root2 = _.divide(coeffs[0], _.parse(root1));\r\n                            if(core.Utils.isInt(root2)) {\r\n                                //we found them both\r\n                                factors.add(_.parse(format('({0})*({1})+({2})', symbols[1], v, root2)));\r\n                                factors.add(_.parse(format('({0})*({1})+({2})', symbols[0], v, root1)));\r\n                                symbol = new Symbol(1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return symbol;\r\n            },\r\n            cubeFactor: function (symbol, factors) {\r\n                if(symbol.isComposite()) {\r\n                    var symbols = symbol.collectSymbols();\r\n                    // The symbol should be in the form of a^3+-b^3. The length\r\n                    // should therefore only be two. If it's any different from this\r\n                    // then we're done\r\n                    if(symbols.length === 2) {\r\n                        // Store the signs and then strip them from the symbols\r\n                        var sign_a = symbols[0].sign();\r\n                        var a = symbols[0].clone().abs();\r\n                        var sign_b = symbols[1].sign();\r\n                        var b = symbols[1].clone().abs();\r\n                        // Check if they're cube\r\n                        if(a.isCube() && b.isCube()) {\r\n                            // Keep the negative sign on the right, meaning b is always negative.\r\n                            if(sign_a < sign_b) {\r\n                                // Swap the signs and then the values\r\n                                [sign_a, sign_b] = [sign_b, sign_a];\r\n                                [a, b] = [b, a];\r\n                            }\r\n\r\n                            // Get teh roots\r\n                            var m_root_a = _.parse(a.getNth(3));\r\n                            var m_root_b = _.parse(b.getNth(3));\r\n\r\n                            // Remove the cube for both\r\n                            var x = _.multiply(_.expand(_.pow(a.clone().toUnitMultiplier(), _.parse('1/3'))), m_root_a);\r\n                            var y = _.multiply(_.expand(_.pow(b.clone().toUnitMultiplier(), _.parse('1/3'))), m_root_b);\r\n\r\n                            if(sign_a === 1 && sign_b === -1) {\r\n                                // Apply difference of cubes rule\r\n                                factors.add(_.parse(format('(({0})-({1}))', x, y)));\r\n                                factors.add(_.parse(format('(({0})^2+({0})*({1})+({1})^2)', x, y)));\r\n                                symbol = Symbol(1);\r\n                            }\r\n                            else if(sign_a === 1 && sign_b === 1) {\r\n                                // Apply sum of cubes rule\r\n                                factors.add(_.parse(format('(({0})+({1}))', x, y)));\r\n                                factors.add(_.parse(format('(({0})^2-({0})*({1})+({1})^2)', x, y)));\r\n                                symbol = Symbol(1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            _factor: function (symbol, factors) {\r\n                var g = symbol.group;\r\n                //some items cannot be factored any further so return those right away\r\n                if(symbol.group === FN) {\r\n                    var arg = symbol.args[0];\r\n                    if(arg.group === S && arg.isSimple()) {\r\n                        return symbol;\r\n                    }\r\n                }\r\n                else if(symbol.group === S && symbol.isSimple()) {\r\n                    return symbol;\r\n                }\r\n\r\n                // Expand the symbol to get it in a predictable form. If this step\r\n                // is skipped some factors are missed.\r\n                //if(symbol.group === CP && !(even(symbol.power) && symbol.multiplier.lessThan(0))) {\r\n                if(symbol.group === CP) {\r\n                    symbol.distributeMultiplier(true);\r\n                    var t = new Symbol(0);\r\n                    symbol.each(function (x) {\r\n                        if((x.group === CP && x.power.greaterThan(1) || x.group === CB))\r\n                            x = _.expand(x);\r\n                        t = _.add(t, x);\r\n                    });\r\n                    t.power = symbol.power;\r\n\r\n                    symbol = t;\r\n                }\r\n\r\n                if(symbol.group === FN && symbol.fname !== 'sqrt') {\r\n                    symbol = core.Utils.evaluate(symbol);\r\n                }\r\n\r\n                //make a copy of the symbol to return if something goes wrong\r\n                var untouched = symbol.clone();\r\n                try {\r\n                    if(symbol.group === CB) {\r\n                        var p = _.parse(symbol.power);\r\n\r\n                        var den_array, num_array, den, num, dfact, nfact;\r\n                        //grab the denominator and strip the multiplier and power. Store them in an array\r\n                        den_array = __.Simplify.strip(symbol.getDenom());\r\n                        num_array = __.Simplify.strip(symbol.getNum());\r\n\r\n                        den = den_array.pop();\r\n                        num = num_array.pop();\r\n\r\n                        //if the numerator equals the symbol then we've hit the simplest form and then we're done\r\n                        if(num.equals(symbol)) {\r\n                            return symbol;\r\n                        }\r\n                        nfact = __.Factor.factor(num);\r\n                        dfact = __.Factor.factor(den);\r\n\r\n                        var n = __.Simplify.unstrip(num_array, nfact);\r\n                        var d = __.Simplify.unstrip(den_array, dfact);\r\n\r\n                        var retval = _.divide(n, d);\r\n\r\n                        return retval;\r\n                    }\r\n                    if(symbol.group === S) {\r\n                        return symbol; //absolutely nothing to do\r\n                    }\r\n\r\n                    if(symbol.isConstant()) {\r\n                        if(symbol.equals(1))\r\n                            return symbol.clone();\r\n                        var ret = core.Math2.factor(symbol);\r\n                        return ret;\r\n                    }\r\n\r\n                    var p = symbol.power.clone();\r\n\r\n                    if(isInt(p) && !(p.lessThan(0) && symbol.group === FN)) {\r\n                        var sign = p.sign();\r\n                        symbol.toLinear();\r\n                        factors = factors || new Factors();\r\n                        var map = {};\r\n                        symbol = _.parse(core.Utils.subFunctions(symbol, map));\r\n                        if(keys(map).length > 0) { //it might have functions\r\n                            factors.preAdd = function (factor) {\r\n                                var ret = _.parse(factor, core.Utils.getFunctionsSubs(map));\r\n                                return ret;\r\n                            };\r\n                        }\r\n\r\n                        //strip the power\r\n                        if(!symbol.isLinear()) {\r\n                            factors.pFactor = symbol.power.toString();\r\n                            symbol.toLinear();\r\n                        }\r\n\r\n                        var vars = variables(symbol);\r\n                        //bypass for imaginary. TODO: find a better solution\r\n                        if(symbol.isImaginary()) {\r\n                            vars.push(core.Settings.IMAGINARY);\r\n                        }\r\n                        var multiVar = vars.length > 1;\r\n\r\n                        //minor optimization. Seems to cut factor time by half in some cases.\r\n                        if(multiVar) {\r\n                            var all_S = true, all_unit = true;\r\n                            symbol.each(function (x) {\r\n                                if(x.group !== S)\r\n                                    all_S = false;\r\n                                if(!x.multiplier.equals(1))\r\n                                    all_unit = false;\r\n                            });\r\n\r\n                            if(all_S && all_unit) {\r\n                                return _.pow(_.parse(symbol, core.Utils.getFunctionsSubs(map)), _.parse(p));\r\n                            }\r\n                        }\r\n\r\n                        //factor the coefficients\r\n                        var coeff_factors = new Factors();\r\n\r\n                        symbol = __.Factor.coeffFactor(symbol, coeff_factors);\r\n\r\n                        coeff_factors.each(function (x) {\r\n                            // If the factor was negative but was within a square then it becomes positive\r\n                            if(even(p) && x.lessThan(0)) {\r\n                                x.negate();\r\n                            }\r\n\r\n                            if(sign < 0)\r\n                                x.invert();\r\n                            factors.add(x);\r\n                        });\r\n\r\n                        //factor the power\r\n                        var power_factors = new Factors();\r\n                        symbol = __.Factor.powerFactor(symbol, power_factors);\r\n                        power_factors.each(function (x) {\r\n                            if(sign < 0)\r\n                                x.invert();\r\n                            factors.add(x);\r\n                        });\r\n\r\n                        if(!multiVar) {\r\n                            //pass in vars[0] for safety\r\n                            var v = vars[0];\r\n\r\n                            symbol = __.Factor.squareFree(symbol, factors, v);\r\n\r\n                            var t_factors = new Factors();\r\n\r\n                            symbol = __.Factor.trialAndError(symbol, t_factors, v);\r\n\r\n                            //generate a symbol based off the last factors\r\n                            var tf_symbol = t_factors.toSymbol();\r\n                            //if nothing was factored then return the factors\r\n                            if(tf_symbol.equals(untouched)) {\r\n                                return tf_symbol;\r\n                            }\r\n\r\n                            for(var x in t_factors.factors) {\r\n                                //store the current factor in t_factor\r\n                                var t_factor = t_factors.factors[x];\r\n                                factors.add(_.pow(t_factor, _.parse(p)));\r\n                            }\r\n                            //if we still don't have a factor and it's quadratic then let's just do a quad factor\r\n                            if(symbol.equals(untouched)) {\r\n                                symbol = __.Factor.quadFactor(symbol, factors);\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            // Try sum and difference of cubes\r\n                            symbol = __.Factor.cubeFactor(symbol, factors);\r\n\r\n                            symbol = __.Factor.mfactor(symbol, factors);\r\n\r\n                            //put back the sign of power\r\n                            factors.each(function (x) {\r\n                                if(sign < 0)\r\n                                    x.power.negate();\r\n                            });\r\n                        }\r\n\r\n                        //last minute clean up\r\n                        symbol = _.parse(symbol, core.Utils.getFunctionsSubs(map));\r\n                        \r\n                        var addPower = factors.length === 1;\r\n                        \r\n                        factors.add(_.pow(symbol, _.parse(p)));\r\n\r\n                        var retval = factors.toSymbol();\r\n                        \r\n                        // We may have only factored out the symbol itself so we end up with a factor of one \r\n                        // where the power needs to be placed back\r\n                        // e.g. factor((2*y+p)^2). Here we end up having a factor of 1 remaining and a p of 2.\r\n                        if(addPower && symbol.equals(1) && retval.isLinear()) {\r\n                            retval = _.pow(retval, _.parse(p));\r\n                        }\r\n                        \r\n                        return retval;\r\n                    }\r\n\r\n                    return symbol;\r\n                }\r\n                catch(e) {\r\n                    //no need to stop the show because something went wrong :). Just return the unfactored.\r\n                    return untouched;\r\n                }\r\n            },\r\n            reduce: function (symbol, factors) {\r\n                if(symbol.group === CP && symbol.length === 2) {\r\n                    var symbols = symbol.collectSymbols().sort(function (a, b) {\r\n                        return b.multiplier - a.multiplier;\r\n                    });\r\n                    if(symbols[0].power.equals(symbols[1].power)) {\r\n                        //x^n-a^n\r\n                        var n = _.parse(symbols[0].power),\r\n                                a = symbols[0].clone().toLinear(),\r\n                                b = symbols[1].clone().toLinear();\r\n\r\n                        //apply rule: (a-b)*sum(a^(n-i)*b^(i-1),1,n)\r\n                        factors.add(_.add(a.clone(), b.clone()));\r\n                        //flip the sign\r\n                        b.negate();\r\n                        //turn n into a number\r\n                        var nn = Number(n);\r\n                        //the remainder\r\n                        var result = new Symbol(0);\r\n                        for(var i = 1; i <= nn; i++) {\r\n                            var aa = _.pow(a.clone(), _.subtract(n.clone(), new Symbol(i))),\r\n                                    bb = _.pow(b.clone(), _.subtract(new Symbol(i), new Symbol(1)));\r\n                            result = _.add(result, _.multiply(aa, bb));\r\n                        }\r\n                        return result;\r\n                    }\r\n                }\r\n                return symbol;\r\n            },\r\n            /**\r\n             * Makes Symbol square free\r\n             * @param {Symbol} symbol\r\n             * @param {Factors} factors\r\n             * @@param {String} variable The variable which is being factored \r\n             * @returns {[Symbol, Factor]}\r\n             */\r\n            squareFree: function (symbol, factors, variable) {\r\n                if(symbol.isConstant() || symbol.group === S)\r\n                    return symbol;\r\n\r\n                var poly = new Polynomial(symbol, variable);\r\n                var sqfr = poly.squareFree();\r\n                var p = sqfr[2];\r\n                //if we found a square then the p entry in the array will be non-unit\r\n                if(p !== 1) {\r\n                    //make sure the remainder doesn't have factors\r\n                    var t = sqfr[1].toSymbol();\r\n                    t.power = t.power.multiply(new Frac(p));\r\n                    //send the factor to be fatored to be sure it's completely factored\r\n                    factors.add(__.Factor.factor(t));\r\n\r\n                    var retval = __.Factor.squareFree(sqfr[0].toSymbol(), factors);\r\n\r\n                    return retval;\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            /**\r\n             * Factors the powers such that the lowest power is a constant\r\n             * @param {Symbol} symbol\r\n             * @param {Factors} factors\r\n             * @returns {[Symbol, Factor]}\r\n             */\r\n            powerFactor: function (symbol, factors) {\r\n                //only PL need apply\r\n                if(symbol.group !== PL || symbol.previousGroup === EX)\r\n                    return symbol;\r\n                var k = keys(symbol.symbols);\r\n                //we expect only numeric powers so return all else\r\n                if(!core.Utils.allNumeric(k))\r\n                    return symbol;\r\n\r\n                var d = core.Utils.arrayMin(k);\r\n                var retval = new Symbol(0);\r\n                var q = _.parse(symbol.value + '^' + d);\r\n                symbol.each(function (x) {\r\n                    x = _.divide(x, q.clone());\r\n                    retval = _.add(retval, x);\r\n                });\r\n\r\n                factors.add(q);\r\n                return retval;\r\n            },\r\n            /**\r\n             * Removes GCD from coefficients\r\n             * @param {Symbol} symbol\r\n             * @param {Factor} factors\r\n             * @returns {Symbol}\r\n             */\r\n            coeffFactor: function (symbol, factors) {\r\n                if(symbol.isComposite()) {\r\n                    var gcd = core.Math2.QGCD.apply(null, symbol.coeffs());\r\n\r\n                    if(!gcd.equals(1)) {\r\n                        symbol.each(function (x) {\r\n                            if(x.isComposite()) {\r\n                                x.each(function (y) {\r\n                                    y.multiplier = y.multiplier.divide(gcd);\r\n                                });\r\n                            }\r\n                            else\r\n                                x.multiplier = x.multiplier.divide(gcd);\r\n                        });\r\n                        symbol.updateHash();\r\n                    }\r\n                    else {\r\n                        // TODO: This should probably go to the prototype\r\n                        var power = function (symbol) {\r\n                            var p;\r\n                            if(symbol.group === CB) {\r\n                                p = 0;\r\n                                symbol.each(function (x) {\r\n                                    p += x.power;\r\n                                });\r\n                            }\r\n                            else {\r\n                                p = Number(symbol.power);\r\n                            }\r\n                            return p;\r\n                        };\r\n                        // Factor out negatives from the lead term\r\n                        var terms = symbol.collectSymbols(null, null, null, true).sort(function (a, b) {\r\n                            // Push constants to the back\r\n                            if(a.isConstant(true))\r\n                                return 1;\r\n                            return b.power - a.power;\r\n                        });\r\n\r\n                        var LT = terms[0];\r\n\r\n                        // Check if the LT is indeed the greatest\r\n                        if(power(LT) > power(terms[1]) || terms[1].isConstant(true)) {\r\n                            if(LT.multiplier.lessThan(0)) {\r\n                                // Although the symbol should always be linear at this point, remove the negative for squares\r\n                                // to be safe.\r\n                                factors.add(new Symbol(-1));\r\n\r\n                                symbol.each(function (x) {\r\n                                    x.negate();\r\n                                }, true);\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n                    if(factors) {\r\n                        factors.add(new Symbol(gcd));\r\n                    }\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            /**\r\n             * The name says it all :)\r\n             * @param {Symbol} symbol\r\n             * @param {Factor} factors\r\n             * @@param {String} variable \r\n             * @returns {Symbol}\r\n             */\r\n            trialAndError: function (symbol, factors, variable) {\r\n                var untouched = symbol.clone();\r\n                try {\r\n                    // At temp holder for the factors. If all goes well then\r\n                    // they'll be moved to the actual factors.\r\n                    var factor_array = [];\r\n\r\n                    if(symbol.isConstant() || symbol.group === S)\r\n                        return symbol;\r\n                    var poly = new Polynomial(symbol, variable),\r\n                            cnst = poly.coeffs[0],\r\n                            cfactors = core.Math2.ifactor(cnst),\r\n                            roots = __.proots(symbol);\r\n                    for(var i = 0; i < roots.length; i++) {\r\n                        var r = roots[i],\r\n                                p = 1;\r\n                        if(!isNaN(r)) { //if it's a number\r\n                            for(var x in cfactors) {\r\n                                //check it's raised to a power\r\n                                var n = core.Utils.round(Math.log(x) / Math.log(Math.abs(r)), 8);\r\n                                if(isInt(n)) {\r\n                                    r = x; //x must be the root since n gave us a whole\r\n                                    p = n;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            var root = new Frac(r),\r\n                                    terms = [new Frac(root.num).negate()];\r\n                            terms[p] = new Frac(root.den);\r\n                            //convert to Frac. The den is coeff of LT and the num is coeff of constant\r\n                            var div = Polynomial.fromArray(terms, poly.variable).fill(),\r\n                                    t = poly.divide(div);\r\n                            if(t[1].equalsNumber(0)) { //if it's zero we have a root and divide it out\r\n                                poly = t[0];\r\n                                // factors.add(div.toSymbol());\r\n                                factor_array.push(div.toSymbol());\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if(!poly.equalsNumber(1)) {\r\n                        poly = __.Factor.search(poly, factors);\r\n                    }\r\n\r\n                    // Move the factors over since all went well.\r\n                    factor_array.forEach(function (x) {\r\n                        factors.add(x);\r\n                    });\r\n\r\n                    return poly.toSymbol();\r\n                }\r\n                catch(e) {\r\n                    return untouched;\r\n                }\r\n            },\r\n            search: function (poly, factors, base) {\r\n                base = base || 10; //I like 10 because numbers exhibit similar behaviours at 10\r\n                var v = poly.variable; //the polynmial variable name\r\n                /**\r\n                 * Attempt to remove a root by division given a number by first creating\r\n                 * a polynomial fromt he given information\r\n                 * @param {int} c1 - coeffient for the constant\r\n                 * @param {int} c2 - coefficient for the LT\r\n                 * @param {int} n - the number to be used to construct the polynomial\r\n                 * @param {int} p - the power at which to create the polynomial\r\n                 * @returns {null|Polynomial} - returns polynomial if successful otherwise null\r\n                 */\r\n                var check = function (c1, c2, n, p) {\r\n                    var candidate = Polynomial.fit(c1, c2, n, base, p, v);\r\n                    if(candidate && candidate.coeffs.length > 1) {\r\n                        var t = poly.divide(candidate);\r\n                        if(t[1].equalsNumber(0)) {\r\n                            factors.add(candidate.toSymbol());\r\n                            return [t[0], candidate];\r\n                        }\r\n                    }\r\n                    return null;\r\n                };\r\n                var cnst = poly.coeffs[0];\r\n                var cfactors = core.Math2.ifactor(cnst);\r\n                var lc = poly.lc();\r\n                var ltfactors = core.Math2.ifactor(lc);\r\n                var subbed = poly.sub(base);\r\n                var isubbed = core.Math2.ifactor(subbed);\r\n                var nfactors = __.Factor.mix(isubbed, subbed < 0);\r\n                var cp = Math.ceil(poly.coeffs.length / 2);\r\n                var lc_is_neg = lc.lessThan(0);\r\n                var cnst_is_neg = cnst.lessThan(0);\r\n                ltfactors['1'] = 1;\r\n                cfactors['1'] = 1;\r\n                while(cp--) {\r\n                    for(var x in ltfactors) {\r\n                        for(var y in cfactors) {\r\n                            for(var i = 0; i < nfactors.length; i++) {\r\n                                var factor_found = check(x, y, nfactors[i], cp);\r\n                                if(factor_found) {\r\n                                    poly = factor_found[0];\r\n                                    if(!core.Utils.isPrime(poly.sub(base)))\r\n                                        poly = __.Factor.search(poly, factors);\r\n                                    return poly;\r\n                                }\r\n                                else if(!factor_found) {\r\n                                    if(lc_is_neg && cnst_is_neg)\r\n                                        factor_found = check(-x, -y, nfactors[i], cp);\r\n                                    else if(lc_is_neg)\r\n                                        factor_found = check(-x, y, nfactors[i], cp); //check a negative lc\r\n                                    else if(cnst_is_neg)\r\n                                        factor_found = check(x, -y, nfactors[i], cp); //check a negative constant\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return poly;\r\n            },\r\n            /**\r\n             * Equivalent of square free factor for multivariate polynomials\r\n             * @param {type} symbol\r\n             * @param {type} factors\r\n             * @returns {AlgebraL#18.Factor.mSqfrFactor.symbol|Array|AlgebraL#18.__.Factor.mSqfrFactor.d}\r\n             */\r\n            mSqfrFactor: function (symbol, factors) {\r\n                if(symbol.group !== FN) {\r\n                    var vars = variables(symbol).reverse();\r\n\r\n                    // Loop through all the variable and remove the partial derivatives\r\n                    for(var i = 0; i < vars.length; i++) {\r\n                        do {\r\n                            if(vars[i] === symbol.value) {\r\n                                //the derivative tells us nothing since this symbol is already the factor\r\n                                factors.add(symbol);\r\n                                symbol = new Symbol(1);\r\n                                continue;\r\n                            }\r\n\r\n                            var diff = core.Calculus.diff(symbol, vars[i]);\r\n\r\n                            var d = __.Factor.coeffFactor(diff);\r\n\r\n                            if(d.equals(0))\r\n                                break;\r\n\r\n                            //trial division to see if factors have whole numbers. \r\n                            //This can be optimized by stopping as soon as can_divide is false\r\n                            //this will also need utilize big number at some point\r\n                            var can_divide = true;\r\n                            if(d.isConstant() && symbol.isComposite()) {\r\n                                //check the coefficients\r\n\r\n                                symbol.each(function (x) {\r\n                                    if(x.multiplier % d !== 0)\r\n                                        can_divide = false;\r\n                                }, true);\r\n                            }\r\n\r\n                            //if we can divide then do so\r\n                            if(can_divide) {\r\n\r\n                                var div = __.div(symbol, d.clone()),\r\n                                        is_factor = div[1].equals(0);\r\n                                \r\n                                // Break infinite loop for factoring e^t*x-1\r\n                                if((symbol.equals(div[0]) && div[1].equals(0))) {\r\n                                    break;\r\n                                }\r\n                                \r\n                                if(div[0].isConstant()) {\r\n                                    factors.add(div[0]);\r\n                                    break;\r\n                                }\r\n                                \r\n                            }\r\n                            else\r\n                                is_factor = false;\r\n\r\n                            if(is_factor) {\r\n                                factors.add(div[0]);\r\n                                symbol = d;\r\n                            }\r\n                        }\r\n                        while(is_factor)\r\n                    }\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            //difference of squares factorization\r\n            sqdiff: function (symbol, factors) {\r\n                if(symbol.isConstant('all')) {\r\n                    // Nothing to do\r\n                    return symbol;\r\n                }\r\n\r\n                try {\r\n                    var remove_square = function (x) {\r\n                        return core.Utils.block('POSITIVE_MULTIPLIERS', function () {\r\n                            return Symbol.unwrapPARENS(math.sqrt(math.abs(x)));\r\n                        }, true);\r\n                    };\r\n                    var separated = core.Utils.separate(symbol.clone());\r\n\r\n                    var obj_array = [];\r\n\r\n                    //get the unique variables\r\n                    for(var x in separated) {\r\n                        if(x !== 'constants') {\r\n                            obj_array.push(separated[x]);\r\n                        }\r\n                    }\r\n                    obj_array.sort(function (a, b) {\r\n                        return b.power - a.power;\r\n                    });\r\n\r\n                    //if we have the same number of variables as unique variables then we can apply the difference of squares\r\n                    if(obj_array.length === 2) {\r\n                        var a, b;\r\n                        a = obj_array.pop();\r\n                        b = obj_array.pop();\r\n\r\n                        if(even(a.power) && even(b.power)\r\n                                && a.sign() === b.sign()\r\n                                && a.group === S && b.group === S) {\r\n                            throw new Error('Unable to factor');\r\n                        }\r\n                        ;\r\n\r\n                        if(a.isComposite() && b.power.equals(2)) {\r\n                            //remove the square from b\r\n                            b = remove_square(b);\r\n                            var f = __.Factor.factor(_.add(a, separated.constants));\r\n                            if(f.power.equals(2)) {\r\n                                f.toLinear();\r\n                                factors.add(_.subtract(f.clone(), b.clone()));\r\n                                factors.add(_.add(f, b));\r\n                                symbol = new Symbol(1);\r\n                            }\r\n                        }\r\n                        else {\r\n                            a = a.powSimp();\r\n                            b = b.powSimp();\r\n\r\n                            if((a.group === S || a.fname === '') && a.power.equals(2) && (b.group === S || b.fname === '') && b.power.equals(2) && !separated.constants) {\r\n                                if(a.multiplier.lessThan(0)) {\r\n                                    var t = b;\r\n                                    b = a;\r\n                                    a = t;\r\n                                }\r\n                                if(a.multiplier.greaterThan(0)) {\r\n                                    a = remove_square(a);\r\n                                    b = remove_square(b);\r\n                                }\r\n\r\n                                factors.add(_.subtract(a.clone(), b.clone()));\r\n                                factors.add(_.add(a, b));\r\n                                symbol = new Symbol(1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                catch(e) {\r\n                    ;\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            //factoring for multivariate\r\n            mfactor: function (symbol, factors) {\r\n\r\n                if(symbol.group === FN) {\r\n                    if(symbol.fname === 'sqrt') {\r\n                        var factors2 = new Factors(),\r\n                                arg = __.Factor.common(symbol.args[0].clone(), factors2);\r\n                        arg = __.Factor.coeffFactor(arg, factors2);\r\n                        symbol = _.multiply(_.symfunction('sqrt', [arg]), _.parse(symbol.multiplier));\r\n                        factors2.each(function (x) {\r\n                            symbol = _.multiply(symbol, _.parse(core.Utils.format('sqrt({0})', x)));\r\n                        });\r\n                    }\r\n                    else\r\n                        factors.add(symbol);\r\n                }\r\n                else {\r\n\r\n                    //square free factorization\r\n                    symbol = __.Factor.mSqfrFactor(symbol, factors);\r\n\r\n                    //try factor out common factors\r\n                    //symbol = __.Factor.common(symbol, factors);\r\n\r\n                    var vars = variables(symbol),\r\n                            symbols = symbol.collectSymbols().map(function (x) {\r\n                        return Symbol.unwrapSQRT(x);\r\n                    }),\r\n                            sorted = {},\r\n                            maxes = {},\r\n                            l = vars.length, n = symbols.length;\r\n                    //take all the variables in the symbol and organize by variable name\r\n                    //e.g. a^2+a^2+b*a -> {a: {a^3, a^2, b*a}, b: {b*a}}\r\n\r\n                    for(var i = 0; i < l; i++) {\r\n                        var v = vars[i];\r\n                        sorted[v] = new Symbol(0);\r\n                        for(var j = 0; j < n; j++) {\r\n                            var s = symbols[j];\r\n                            if(s.contains(v)) {\r\n                                var p = s.value === v ? s.power.toDecimal() : s.symbols[v].power.toDecimal();\r\n                                if(!maxes[v] || p < maxes[v])\r\n                                    maxes[v] = p;\r\n                                sorted[v] = _.add(sorted[v], s.clone());\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for(var x in sorted) {\r\n                        var r = _.parse(x + '^' + maxes[x]);\r\n                        var div = _.divide(sorted[x], r);\r\n                        var new_factor = _.expand(div);\r\n\r\n                        if(new_factor.equals(1))\r\n                            break; //why divide by one. Just move \r\n                        var divided = __.div(symbol.clone(), new_factor);\r\n\r\n                        if(divided[0].equals(0)) {\r\n                            //cant factor anymore\r\n                            break;\r\n                        }\r\n\r\n                        // We potentially ended up with fractional coefficients when the\r\n                        // trial division was performed. We need to remove \r\n                        // This check will more then likely become superfluous with improvements\r\n                        // to polynomial division\r\n                        if(divided[1].equals(0)) {\r\n                            var has_fractions = false;\r\n\r\n                            divided[0].each(function (x) {\r\n                                if(!isInt(x.multiplier)) {\r\n                                    has_fractions = true;\r\n                                }\r\n                            });\r\n\r\n                            // The factor isn't really a factor and needs to be put back\r\n                            if(has_fractions) {\r\n                                divided[1] = _.expand(_.multiply(divided[1], new_factor));\r\n                                // Since the new factor is not just one, we exit.\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        var neg_numeric_factor = isInt(new_factor) && new_factor.lessThan(0);\r\n\r\n                        if(divided[1].equals(0) && !neg_numeric_factor) { //we found at least one factor\r\n\r\n                            //factors.add(new_factor);\r\n                            var d = __.div(symbol.clone(), divided[0].clone());\r\n                            var r = d[0];\r\n\r\n                            // Nothing left to do since we didn't get a reduction\r\n                            if(r.equals(0)) {\r\n                                return symbol;\r\n                            }\r\n\r\n                            symbol = d[1];\r\n                            //we don't want to just flip the sign. If the remainder is -1 then we accomplished nothing\r\n                            //and we just return the symbol;\r\n                            //If r equals zero then there's nothing left to do so we're done\r\n\r\n                            if(r.equals(-1) && !symbol.equals(0))\r\n                                return symbol;\r\n\r\n                            var factor = divided[0];\r\n\r\n                            if(symbol.equals(factor)) {\r\n                                var rem = __.Factor.reduce(factor, factors);\r\n\r\n                                if(!symbol.equals(rem))\r\n                                    return __.Factor.mfactor(rem, factors);\r\n\r\n                                return rem;\r\n                            }\r\n                            else {\r\n                                factors.add(factor);\r\n                                //if the remainder of the symbol is zero then we're done. TODO: Rethink this logic a bit.\r\n                                if(symbol.equals(0))\r\n                                    return r;\r\n                            }\r\n\r\n                            if(r.isConstant('all')) {\r\n                                factors.add(r);\r\n                                return r;\r\n                            }\r\n\r\n                            return __.Factor.mfactor(r, factors);\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n                //difference of squares factorization\r\n                symbol = __.Factor.sqdiff(symbol, factors);\r\n\r\n                //factors by fishing for zeroes\r\n                symbol = __.Factor.zeroes(symbol, factors);\r\n\r\n                return symbol;\r\n            }\r\n        },\r\n        /**\r\n         * Checks to see if a set of \"equations\" is linear. \r\n         * @param {type} set\r\n         * @returns {Boolean}\r\n         */\r\n        allLinear: function (set) {\r\n            var l = set.length;\r\n            for(var i = 0; i < l; i++) {\r\n                if(!__.isLinear(set[i]))\r\n                    return false;\r\n            }\r\n            return true;\r\n        },\r\n        /*\r\n         * Checks to see if the \"equation\" is linear\r\n         * @param {Symbol} e\r\n         * @returns {boolean}\r\n         */\r\n        isLinear: function (e) {\r\n            var status = false, g = e.group;\r\n            if(g === PL || g === CP) {\r\n                status = true;\r\n                for(var s in e.symbols) {\r\n                    var symbol = e.symbols[s], sg = symbol.group;\r\n                    if(sg === FN || sg === EX) {\r\n                        status = false;\r\n                    }\r\n                    if(sg === CB) {\r\n                        //needs further checking since it might be imaginary\r\n                        status = variables(symbol).length === 1;\r\n                    }\r\n                    else {\r\n                        if(sg === PL || sg === CP)\r\n                            status = __.isLinear(symbol);\r\n                        else {\r\n                            if(symbol.group !== N && symbol.power.toString() !== '1') {\r\n                                status = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else if(g === S && e.power === 1)\r\n                status = true;\r\n            return status;\r\n        },\r\n        gcd: function () {\r\n            var args;\r\n            if(arguments.length === 1 && arguments[0] instanceof core.Vector)\r\n                args = arguments[0].elements;\r\n            else\r\n                args = core.Utils.arguments2Array(arguments);\r\n\r\n            //short-circuit early\r\n            if(args.length === 0)\r\n                return new Symbol(1);\r\n            else if(args.length === 1)\r\n                return args[0];\r\n\r\n            var appeared = [], evaluate = false;\r\n            for(var i = 0; i < args.length; i++) {\r\n                if(args[i].group === FN && args[i].fname === 'gcd')\r\n                {\r\n                    //compress gcd(a,gcd(b,c)) into gcd(a,b,c)\r\n                    args = args.concat(arguments[i].args);\r\n                    //do not keep gcd in args\r\n                    args.splice(i, 1);\r\n                }\r\n                else\r\n                {\r\n                    //Look if there are any common variables such that\r\n                    //gcd(a,b) => gcd(a,b); gcd(a,a) => a\r\n                    var vars = variables(args[i]);\r\n                    if(core.Utils.haveIntersection(vars, appeared))\r\n                    {\r\n                        //Ok, there are common variables\r\n                        evaluate = true;\r\n                        break;\r\n                    }\r\n                    else\r\n                        appeared = appeared.concat(vars);\r\n                }\r\n            }\r\n\r\n            //appeared.length is 0 when all arguments are group N\r\n            if(evaluate || appeared.length === 0) {\r\n                //TODO: distribute exponent so that (a^-1*b^-1)^-1 => a*b\r\n                if(args.every(function (symbol) {\r\n                    return symbol.getDenom().equals(1)\r\n                })) {\r\n                    var aggregate = args[0];\r\n\r\n                    for(var i = 1; i < args.length; i++) {\r\n                        aggregate = __.gcd_(args[i], aggregate);\r\n                    }\r\n                    return aggregate;\r\n                }\r\n                else {\r\n                    //gcd_ cannot handle denominators correctly\r\n                    return _.divide(__.gcd.apply(null, args.map(function (symbol) {\r\n                        return symbol.getNum();\r\n                    })),\r\n                            __.lcm.apply(null, args.map(function (symbol) {\r\n                                return symbol.getDenom();\r\n                            })));\r\n                }\r\n            }\r\n            else\r\n                return _.symfunction('gcd', args);\r\n        },\r\n        gcd_: function (a, b) {\r\n            if(a.group === FN || a.group === P)\r\n                a = core.Utils.block('PARSE2NUMBER', function () {\r\n                    return _.parse(a);\r\n                });\r\n\r\n            if(b.group === FN)\r\n                b = core.Utils.block('PARSE2NUMBER', function () {\r\n                    return _.parse(b);\r\n                });\r\n\r\n            if(a.isConstant() && b.isConstant()) {\r\n                // return core.Math2.QGCD(new Frac(+a), new Frac(+b));\r\n                return new Symbol(core.Math2.QGCD(new Frac(+a), new Frac(+b)));\r\n            }\r\n\r\n            var den = _.multiply(a.getDenom() || new Symbol(1), b.getDenom() || new Symbol(1)).invert();\r\n            a = _.multiply(a.clone(), den.clone());\r\n            b = _.multiply(b.clone(), den.clone());\r\n\r\n            //feels counter intuitive but it works. Issue #123 (nerdamer(\"gcd(x+y,(x+y)^2)\"))\r\n            a = _.expand(a);\r\n            b = _.expand(b);\r\n\r\n            if(a.group === CB || b.group === CB) {\r\n                var q = _.divide(a.clone(), b.clone()); //get the quotient\r\n                var t = _.multiply(b.clone(), q.getDenom().invert());//multiply by the denominator\r\n                //if they have a common factor then the result will not equal one \r\n                if(!t.equals(1))\r\n                    return t;\r\n            }\r\n\r\n            //just take the gcd of each component when either of them is in group EX\r\n            if(a.group === EX || b.group === EX)\r\n            {\r\n                var gcd_m = new Symbol(core.Math2.GCD(a.multiplier, b.multiplier));\r\n                var gcd_v = __.gcd_(a.value === CONST_HASH ? new Symbol(1) : _.parse(a.value), b.value === CONST_HASH ? new Symbol(1) : _.parse(b.value));\r\n                var gcd_p = __.gcd_(_.parse(a.power), _.parse(b.power));\r\n                return _.multiply(gcd_m, _.pow(gcd_v, gcd_p));\r\n            }\r\n\r\n            if(a.length < b.length) { //swap'm\r\n                var t = a;\r\n                a = b;\r\n                b = t;\r\n            }\r\n            var vars_a = variables(a), vars_b = variables(b);\r\n            if((vars_a.length === vars_b.length && vars_a.length === 1 && vars_a[0] === vars_b[0])\r\n                    || vars_a.length === 1 && vars_b.length === 0\r\n                    || vars_a.length === 0 && vars_b.length === 1) {\r\n                a = new Polynomial(a);\r\n                b = new Polynomial(b);\r\n                return _.divide(a.gcd(b).toSymbol(), den);\r\n            }\r\n            else {\r\n                //get the gcd of the multipiers\r\n                //get rid of gcd in coeffs\r\n                var multipliers = [];\r\n                a.each(function (x) {\r\n                    multipliers.push(x.multiplier);\r\n                });\r\n                b.each(function (x) {\r\n                    multipliers.push(x.multiplier);\r\n                });\r\n\r\n                var T;\r\n                while(!b.equals(0)) {\r\n                    var t = b.clone();\r\n                    a = a.clone();\r\n                    T = __.div(a, t);\r\n\r\n                    b = T[1];\r\n                    if(T[0].equals(0)) {\r\n                        //return _.multiply(new Symbol(core.Math2.QGCD(a.multiplier, b.multiplier)), b);\r\n                        return _.divide(new Symbol(core.Math2.QGCD(a.multiplier, b.multiplier)), den);\r\n                    }\r\n                    a = t;\r\n                }\r\n\r\n                var gcd = core.Math2.QGCD.apply(undefined, multipliers);\r\n\r\n                if(!gcd.equals(1)) {\r\n                    a.each(function (x) {\r\n                        x.multiplier = x.multiplier.divide(gcd);\r\n                    });\r\n                }\r\n\r\n                //return symbolic function for gcd in indeterminate form\r\n                if(a.equals(1) && !a.isConstant() && !b.isConstant())\r\n                    return _.divide(_.symfunction('gcd', arguments), den);\r\n\r\n                return _.divide(a, den);\r\n            }\r\n        },\r\n        lcm: function () {\r\n            //https://math.stackexchange.com/a/319310\r\n            //generalization of the 2-variable formula of lcm\r\n\r\n            var args;\r\n            if(arguments.length === 1)\r\n                if(arguments[0] instanceof core.Vector)\r\n                    args = arguments[0].elements;\r\n                else\r\n                    _.error('lcm expects either 1 vector or 2 or more arguments');\r\n            else\r\n                args = core.Utils.arguments2Array(arguments);\r\n\r\n            //product of all arguments\r\n            //start with new Symbol(1) so that prev.clone() which makes unnessesary clones can be avoided\r\n            var numer = args.reduce(function (prev, curr) {\r\n                return _.multiply(prev, curr.clone())\r\n            }, new Symbol(1));\r\n\r\n            //gcd of complementary terms\r\n            var denom_args =\r\n                    //https://stackoverflow.com/a/18223072\r\n                //take all complementary terms, e.g.\r\n                //[a,b,c] => [a*b, b*c, a*c]\r\n                //[a,b,c,d] => [a*b*c, a*b*d, a*c*d, b*c*d]\r\n                (function (input, size) {\r\n                        size = Number(size);\r\n                        var results = [], result, mask, i, total = Math.pow(2, input.length);\r\n                        for(mask = size; mask < total; mask++) {\r\n                            result = [];\r\n                            i = input.length - 1;\r\n\r\n                            do {\r\n                                if((mask & (1 << i)) !== 0) {\r\n                                    result.push(input[i]);\r\n                                }\r\n                            }\r\n                            while(i--);\r\n\r\n                            if(result.length === size) {\r\n                                results.push(result);\r\n                            }\r\n                        }\r\n                        return results;\r\n                        //start with new Symbol(1) so that prev.clone() which makes unnessesary clones can be avoided\r\n                    })(arguments, arguments.length - 1).map(function (x) {\r\n                return x.reduce(function (prev, curr) {\r\n                    return _.multiply(prev, curr.clone())\r\n                }, new Symbol(1))\r\n            });\r\n\r\n            var denom;\r\n            //don't eat the gcd term if all arguments are symbols\r\n            if(args.every(function (x) {\r\n                return core.Utils.isVariableSymbol(x)\r\n            }))\r\n                denom = _.symfunction('gcd', core.Utils.arrayUnique(denom_args));\r\n            else\r\n                denom = __.gcd.apply(null, denom_args);\r\n            //divide product of all arguments by gcd of complementary terms\r\n            var div = _.divide(numer, denom);\r\n            return div;\r\n        },\r\n        /**\r\n         * Divides one expression by another\r\n         * @param {Symbol} symbol1\r\n         * @param {Symbol} symbol2\r\n         * @returns {Array}\r\n         */\r\n        divide: function (symbol1, symbol2) {\r\n            var result, remainder, factored, den;\r\n            factored = core.Algebra.Factor.factor(symbol1.clone());\r\n            den = factored.getDenom();\r\n            if(!den.isConstant('all')) {\r\n                symbol1 = _.expand(Symbol.unwrapPARENS(_.multiply(factored, den.clone())));\r\n            }\r\n            else\r\n                //reset the denominator since we're not dividing by it anymore\r\n                den = new Symbol(1);\r\n            result = __.div(symbol1, symbol2);\r\n            remainder = _.divide(result[1], symbol2);\r\n            return _.divide(_.add(result[0], remainder), den);\r\n        },\r\n        div: function (symbol1, symbol2) {\r\n            // If all else fails then assume that division failed with\r\n            // a remainder of zero and the original quotient\r\n            var fail = [new Symbol(0), symbol1.clone()];\r\n\r\n            try {\r\n\r\n                // Division by constants\r\n                if(symbol2.isConstant('all')) {\r\n                    symbol1.each(function (x) {\r\n                        x.multiplier = x.multiplier.divide(symbol2.multiplier);\r\n                    });\r\n                    return [symbol1, new Symbol(0)];\r\n                }\r\n                // So that factorized symbols don't affect the result\r\n                symbol1 = _.expand(symbol1);\r\n                symbol2 = _.expand(symbol2);\r\n                // Special case. May need revisiting\r\n                if(symbol1.group === S && symbol2.group === CP) {\r\n                    var x = symbol1.value;\r\n                    var f = core.Utils.decompose_fn(symbol2.clone(), x, true);\r\n                    if(symbol1.isLinear() && f.x && f.x.isLinear() && symbol2.isLinear()) {\r\n                        var k = Symbol.create(symbol1.multiplier);\r\n                        return [_.divide(k.clone(), f.a.clone()), _.divide(_.multiply(k, f.b), f.a).negate()];\r\n                    }\r\n                }\r\n                if(symbol1.group === S && symbol2.group === S) {\r\n                    var r = _.divide(symbol1.clone(), symbol2.clone());\r\n                    if(r.isConstant()) //we have a whole\r\n                        return [r, new Symbol(0)];\r\n                    return [new Symbol(0), symbol1.clone()];\r\n                }\r\n                var symbol1_has_func = symbol1.hasFunc(),\r\n                        symbol2_has_func = symbol2.hasFunc(),\r\n                        parse_funcs = false;\r\n\r\n                //substitute out functions so we can treat them as regular variables\r\n                if(symbol1_has_func || symbol2_has_func) {\r\n                    parse_funcs = true;\r\n                    var map = {},\r\n                            symbol1 = _.parse(core.Utils.subFunctions(symbol1, map)),\r\n                            symbol2 = _.parse(core.Utils.subFunctions(symbol2, map)),\r\n                            subs = core.Utils.getFunctionsSubs(map);\r\n                }\r\n                //get a list of the variables\r\n                var vars = core.Utils.arrayUnique(variables(symbol1).concat(variables(symbol2))),\r\n                        quot, rem;\r\n\r\n                //treat imaginary numbers as variables\r\n                if(symbol1.isImaginary() || symbol2.isImaginary()) {\r\n                    vars.push(core.Settings.IMAGINARY);\r\n                }\r\n\r\n                if(vars.length === 1) {\r\n                    var q = new Polynomial(symbol1).divide(new Polynomial(symbol2));\r\n                    quot = q[0].toSymbol();\r\n                    rem = q[1].toSymbol();\r\n                }\r\n                else {\r\n                    vars.push(CONST_HASH); //this is for the numbers\r\n                    var reconvert = function (arr) {\r\n                        var symbol = new Symbol(0);\r\n                        for(var i = 0; i < arr.length; i++) {\r\n                            var x = arr[i].toSymbol();\r\n                            symbol = _.add(symbol, x);\r\n                        }\r\n                        return symbol;\r\n                    };\r\n\r\n                    // Silly Martin. This is why you document. I don't remember now\r\n                    var get_unique_max = function (term, any) {\r\n                        var max = Math.max.apply(null, term.terms),\r\n                                count = 0, idx;\r\n\r\n                        if(!any) {\r\n                            for(var i = 0; i < term.terms.length; i++) {\r\n                                if(term.terms[i].equals(max)) {\r\n                                    idx = i;\r\n                                    count++;\r\n                                }\r\n                                if(count > 1)\r\n                                    return;\r\n                            }\r\n                        }\r\n                        if(any) {\r\n                            for(i = 0; i < term.terms.length; i++)\r\n                                if(term.terms[i].equals(max)) {\r\n                                    idx = i;\r\n                                    break;\r\n                                }\r\n                        }\r\n                        return [max, idx, term];\r\n                    };\r\n\r\n                    // Tries to find an LT in the dividend that will satisfy division\r\n                    var get_det = function (s, lookat) {\r\n                        lookat = lookat || 0;\r\n                        var det = s[lookat], l = s.length;\r\n                        if(!det)\r\n                            return;\r\n                        //eliminate the first term if it doesn't apply\r\n                        var umax = get_unique_max(det);\r\n                        for(var i = lookat + 1; i < l; i++) {\r\n                            var term = s[i],\r\n                                    is_equal = det.sum.equals(term.sum);\r\n                            if(!is_equal && umax) {\r\n                                break;\r\n                            }\r\n                            if(is_equal) {\r\n                                // Check the differences of their maxes. The one with the biggest difference governs\r\n                                // e.g. x^2*y^3 vs x^2*y^3 is unclear but this isn't the case in x*y and x^2\r\n                                var max1, max2, idx1, idx2, l2 = det.terms.length;\r\n                                for(var j = 0; j < l2; j++) {\r\n                                    var item1 = det.terms[j], item2 = term.terms[j];\r\n                                    if(typeof max1 === 'undefined' || item1.greaterThan(max1)) {\r\n                                        max1 = item1;\r\n                                        idx1 = j;\r\n                                    }\r\n                                    if(typeof max2 === 'undefined' || item2.greaterThan(max2)) {\r\n                                        max2 = item2;\r\n                                        idx2 = j;\r\n                                    }\r\n                                }\r\n                                //check their differences\r\n                                var d1 = max1.subtract(term.terms[idx1]),\r\n                                        d2 = max2.subtract(det.terms[idx2]);\r\n                                if(d2 > d1) {\r\n                                    umax = [max2, idx2, term];\r\n                                    break;\r\n                                }\r\n                                if(d1 > d2) {\r\n                                    umax = [max1, idx1, det];\r\n                                    break;\r\n                                }\r\n                            }\r\n                            else {\r\n                                //check if it's a suitable pick to determine the order\r\n                                umax = get_unique_max(term);\r\n                                //if(umax) return umax;\r\n                                if(umax)\r\n                                    break;\r\n                            }\r\n                            umax = get_unique_max(term); //calculate a new unique max\r\n                        }\r\n\r\n                        //if still no umax then any will do since we have a tie\r\n                        if(!umax)\r\n                            return get_unique_max(s[0], true);\r\n                        var e, idx;\r\n                        for(var i = 0; i < s2.length; i++) {\r\n                            var cterm = s2[i].terms;\r\n                            //confirm that this is a good match for the denominator\r\n                            idx = umax[1];\r\n                            if(idx === cterm.length - 1)\r\n                                return;\r\n                            e = cterm[idx];\r\n                            if(!e.equals(0))\r\n                                break;\r\n                        }\r\n                        if(e.equals(0))\r\n                            return get_det(s, ++lookat); //look at the next term\r\n\r\n                        return umax;\r\n                    };\r\n\r\n                    var t_map = core.Utils.toMapObj(vars);\r\n                    var init_sort = function (a, b) {\r\n                        return b.sum.subtract(a.sum);\r\n                    };\r\n                    var is_larger = function (a, b) {\r\n                        if(!a || !b)\r\n                            return false; //it's empty so...\r\n                        for(var i = 0; i < a.terms.length; i++) {\r\n                            if(a.terms[i].lessThan(b.terms[i]))\r\n                                return false;\r\n                        }\r\n                        return true;\r\n                    };\r\n\r\n                    var s1 = symbol1.tBase(t_map).sort(init_sort),\r\n                            s2 = symbol2.tBase(t_map).sort(init_sort);\r\n                    var target = is_larger(s1[0], s2[0]) && s1[0].count > s2[0].count ? s2 : s1; //since the num is already larger than we can get the det from denom\r\n                    var det = get_det(target);//we'll begin by assuming that this will let us know which term \r\n                    var quotient = [];\r\n                    if(det) {\r\n                        var lead_var = det[1];\r\n                        var can_divide = function (a, b) {\r\n                            if(a[0].sum.equals(b[0].sum))\r\n                                return a.length >= b.length;\r\n                            return true;\r\n                        };\r\n\r\n                        var try_better_lead_var = function (s1, s2, lead_var) {\r\n                            var checked = [];\r\n                            for(var i = 0; i < s1.length; i++) {\r\n                                var t = s1[i];\r\n                                for(var j = 0; j < t.terms.length; j++) {\r\n                                    var cf = checked[j], tt = t.terms[j];\r\n                                    if(i === 0)\r\n                                        checked[j] = tt; //add the terms for the first one\r\n                                    else if(cf && !cf.equals(tt))\r\n                                        checked[j] = undefined;\r\n                                }\r\n                            }\r\n                            for(var i = 0; i < checked.length; i++) {\r\n                                var t = checked[i];\r\n                                if(t && !t.equals(0))\r\n                                    return i;\r\n                            }\r\n                            return lead_var;\r\n                        };\r\n                        var sf = function (a, b) {\r\n                            var l1 = a.len(), l2 = b.len();\r\n                            var blv = b.terms[lead_var], alv = a.terms[lead_var];\r\n                            if(l2 > l1 && blv.greaterThan(alv))\r\n                                return l2 - l1;\r\n                            return blv.subtract(alv);\r\n                        };\r\n\r\n                        //check to see if there's a better lead_var\r\n                        lead_var = try_better_lead_var(s1, s2, lead_var);\r\n                        //reorder both according to the max power\r\n                        s1.sort(sf); //sort them both according to the leading variable power\r\n                        s2.sort(sf);\r\n\r\n                        //try to adjust if den is larger\r\n                        var fdt = s2[0], fnt = s1[0];\r\n\r\n                        var den = new MVTerm(new Frac(1), [], fnt.map);\r\n                        if(fdt.sum.greaterThan(fnt.sum) && fnt.len() > 1) {\r\n                            for(var i = 0; i < fnt.terms.length; i++) {\r\n                                var d = fdt.terms[i].subtract(fnt.terms[i]);\r\n                                if(!d.equals(0)) {\r\n                                    var nd = d.add(new Frac(1));\r\n                                    den.terms[i] = d;\r\n                                    for(var j = 0; j < s1.length; j++) {\r\n                                        s1[j].terms[i] = s1[j].terms[i].add(nd);\r\n                                    }\r\n                                }\r\n                                else\r\n                                    den.terms[i] = new Frac(0);\r\n                            }\r\n                        }\r\n\r\n                        var dividend_larger = is_larger(s1[0], s2[0]);\r\n\r\n                        var safety = 0;\r\n                        var max = 200;\r\n\r\n                        while(dividend_larger && can_divide(s1, s2)) {\r\n                            if(safety++ > max) {\r\n                                throw new core.exceptions.InfiniteLoopError('Unable to compute!');\r\n                            }\r\n\r\n                            var q = s1[0].divide(s2[0]);\r\n\r\n                            quotient.push(q); //add what's divided to the quotient\r\n                            s1.shift();//the first one is guaranteed to be gone so remove from dividend\r\n                            for(var i = 1; i < s2.length; i++) { //loop through the denominator\r\n                                var t = s2[i].multiply(q).generateImage(),\r\n                                        l2 = s1.length;\r\n                                //if we're subtracting from 0\r\n                                if(l2 === 0) {\r\n                                    t.coeff = t.coeff.neg();\r\n                                    s1.push(t);\r\n                                    s1.sort(sf);\r\n                                }\r\n\r\n                                for(var j = 0; j < l2; j++) {\r\n                                    var cur = s1[j];\r\n                                    if(cur.getImg() === t.getImg()) {\r\n                                        cur.coeff = cur.coeff.subtract(t.coeff);\r\n                                        if(cur.coeff.equals(0)) {\r\n                                            core.Utils.remove(s1, j);\r\n                                            j--; //adjust the iterator\r\n                                        }\r\n                                        break;\r\n                                    }\r\n                                    if(j === l2 - 1) {\r\n                                        t.coeff = t.coeff.neg();\r\n                                        s1.push(t);\r\n                                        s1.sort(sf);\r\n                                    }\r\n                                }\r\n                            }\r\n                            dividend_larger = is_larger(s1[0], s2[0]);\r\n\r\n                            if(!dividend_larger && s1.length >= s2.length) {\r\n                                //One more try since there might be a terms that is larger than the LT of the divisor\r\n                                for(var i = 1; i < s1.length; i++) {\r\n                                    dividend_larger = is_larger(s1[i], s2[0]);\r\n                                    if(dividend_larger) {\r\n                                        //take it from its current position and move it to the front\r\n                                        s1.unshift(core.Utils.remove(s1, i));\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    quot = reconvert(quotient);\r\n                    rem = reconvert(s1);\r\n\r\n                    if(typeof den !== 'undefined') {\r\n                        den = den.toSymbol();\r\n                        quot = _.divide(quot, den.clone());\r\n                        rem = _.divide(rem, den);\r\n                    }\r\n                }\r\n\r\n                //put back the functions\r\n                if(parse_funcs) {\r\n                    quot = _.parse(quot.text(), subs);\r\n                    rem = _.parse(rem.text(), subs);\r\n                }\r\n\r\n                return [quot, rem];\r\n            }\r\n            catch(e) {\r\n                return fail;\r\n            }\r\n\r\n        },\r\n        line: function (v1, v2, x) {\r\n            if(core.Utils.isArray(v1))\r\n                v1 = core.Utils.convertToVector(v1);\r\n            if(core.Utils.isArray(v2))\r\n                v2 = core.Utils.convertToVector(v2);\r\n            x = _.parse(x || 'x');\r\n            if(!core.Utils.isVector(v1) || !core.Utils.isVector(v2))\r\n                _.error('Line expects a vector! Received \"' + v1 + '\" & \"' + v2 + '\"');\r\n            var dx = _.subtract(v2.e(1).clone(), v1.e(1).clone()),\r\n                    dy = _.subtract(v2.e(2).clone(), v1.e(2).clone()),\r\n                    m = _.divide(dy, dx),\r\n                    a = _.multiply(x, m.clone()),\r\n                    b = _.multiply(v1.e(1).clone(), m);\r\n            return _.add(_.subtract(a, b), v1.e(2).clone());\r\n        },\r\n        PartFrac: {\r\n            createTemplate: function (den, denom_factors, f_array, v) {\r\n                //clean up the denominator function by factors so it reduces nicely\r\n                den = __.Factor.factor(den);\r\n\r\n                //clean up factors. This is so inefficient but factors are wrapped in parens for safety\r\n                den.each(function (x, key) {\r\n                    if(x.group === FN && x.fname === '' && x.args[0].group === S) {\r\n                        var y = x.args[0];\r\n                        if(this.symbols) {\r\n                            delete this.symbols[key];\r\n                            this.symbols[y.value] = y;\r\n                        }\r\n                        else {\r\n                            den = x.args[0];\r\n                        }\r\n                    }\r\n                });\r\n\r\n                var factors, factors_vec, f, p, deg, degrees, m;\r\n                factors = denom_factors.collectFactors();\r\n                factors_vec = []; //a vector for the template\r\n                degrees = [];\r\n                m = new Symbol(1);\r\n\r\n                for(var i = 0; i < factors.length; i++) { //loop through the factors\r\n                    var factor = Symbol.unwrapPARENS(factors[i]);\r\n                    //if in he for P^n where P is polynomial and n = integer\r\n                    if(factor.power.greaterThan(1)) {\r\n                        p = Number(factor.power);\r\n                        f = factor.clone().toLinear(); //remove the power so we have only the function\r\n                        deg = Number(__.degree(f, v)); //get the degree of f\r\n                        //expand the factor\r\n                        for(var j = 0; j < p; j++) {\r\n                            var efactor = _.pow(f.clone(), new Symbol(j + 1));\r\n                            f_array.push(efactor.clone());\r\n                            var d = _.divide(den.clone(), efactor.clone());\r\n                            degrees.push(deg);\r\n                            factors_vec.push(d);\r\n                        }\r\n                    }\r\n                    /*\r\n                     Possible bug.\r\n                     Removed: causes 1/(20+24*x+4*x^2) to result in (-1/64)*(5+x)^(-1)+(1/64)*(1+x)^(-1)\r\n                     else if(factor.isConstant('all')) {\r\n                     m = _.multiply(m, factor);\r\n                     }\r\n                     */\r\n                    else {\r\n                        //get the degree of the factor so we tack it on tot he factor. This should probably be an array\r\n                        //but for now we note it on the symbol\r\n                        deg = Number(__.degree(factor, v));\r\n                        f_array.push(factor);\r\n                        var d = _.divide(den.clone(), factor.clone());\r\n                        d = _.expand(Symbol.unwrapPARENS(d));\r\n                        degrees.push(deg);\r\n                        factors_vec.push(d);\r\n                    }\r\n                }\r\n                //put back the constant\r\n                f_array = f_array.map(function (x) {\r\n                    return _.multiply(x, m.clone());\r\n                });\r\n                return [f_array, factors_vec, degrees];\r\n            },\r\n            partfrac: function (symbol, v, as_array) {\r\n\r\n                var vars = variables(symbol);\r\n\r\n                v = v || _.parse(vars[0]); //make wrt optional and assume first variable\r\n                try {\r\n                    var num, den, factors, tfactors, ofactors, nterms, degrees,\r\n                            dterms, max, M, c, powers, div, r, factors_vec, ks,\r\n                            template, tfactors;\r\n                    num = _.expand(symbol.getNum());\r\n                    den = _.expand(symbol.getDenom().toUnitMultiplier());\r\n                    //move the entire multipier to the numerator\r\n                    num.multiplier = symbol.multiplier;\r\n                    //we only have a meaningful change if n factors > 1. This means that\r\n                    //the returned group will be a CB\r\n                    //collect the terms wrt the x\r\n                    nterms = num.groupTerms(v);\r\n                    //divide out wholes if top is larger\r\n                    if(Number(__.degree(num, v)) >= Number(__.degree(den, v))) {\r\n                        div = __.div(num.clone(), _.expand(den.clone()));\r\n                        r = div[0]; //remove the wholes\r\n                        num = div[1]; //work with the remainder\r\n                        nterms = num.groupTerms(v); //recalculate the nterms\r\n                    }\r\n                    else\r\n                        r = new Symbol(0);\r\n\r\n                    if(Number(__.degree(den, v)) === 1) {\r\n                        var q = _.divide(num, den);\r\n                        if(as_array)\r\n                            return [r, q];\r\n                        return _.add(r, q);\r\n                    }\r\n                    //first factor the denominator. This means that the strength of this\r\n                    //algorithm depends on how well we can factor the denominator. \r\n                    ofactors = __.Factor.factor(den);\r\n                    //create the template. This method will create the template for solving \r\n                    //the partial fractions. So given x/(x-1)^2 the template creates A/(x-1)+B/(x-1)^2\r\n                    template = __.PartFrac.createTemplate(den.clone(), ofactors, [], v);\r\n                    tfactors = template[0]; //grab the factors\r\n                    factors_vec = template[1]; //grab the factor vectors\r\n                    degrees = template[2]; //grab the degrees\r\n                    //make note of the powers of each term\r\n                    powers = [nterms.length];\r\n                    //create the dterms vector\r\n                    dterms = [];\r\n                    factors = [];\r\n                    ks = [];\r\n                    var factor, deg;\r\n                    factors_vec.map(function (x, idx) {\r\n                        factor = tfactors[idx];\r\n                        deg = degrees[idx];\r\n                        for(var i = 0; i < deg; i++) {\r\n                            factors.push(factor.clone());\r\n                            var k = Symbol.create(v, i);\r\n                            var t = _.expand(_.multiply(x, k.clone())).groupTerms(v);\r\n                            //make a note of the power which corresponds to the length of the array\r\n                            var p = t.length;\r\n                            powers.push(p);\r\n                            dterms.push(t);\r\n                            ks.push(k.clone());\r\n                        }\r\n                    });\r\n                    //get the max power\r\n                    max = core.Utils.arrayMax(powers);\r\n\r\n                    //fill the holes and create a matrix\r\n                    c = new core.Matrix(core.Utils.fillHoles(nterms, max)).transpose();\r\n                    //for each of the factors we do the same\r\n                    M = new core.Matrix();\r\n                    for(var i = 0; i < dterms.length; i++) {\r\n                        M.elements.push(core.Utils.fillHoles(dterms[i], max));\r\n                    }\r\n\r\n                    //solve the system of equations\r\n                    var partials = _.multiply(M.transpose().invert(), c);\r\n                    //the results are backwards to reverse it\r\n                    //partials.elements.reverse();\r\n                    //convert it all back\r\n                    var retval = as_array ? [r] : r;\r\n                    partials.each(function (e, i) {\r\n                        var term = _.multiply(ks[i], _.divide(e, factors[i]));\r\n                        if(as_array)\r\n                            retval.push(term);\r\n                        else\r\n                            retval = _.add(retval, term);\r\n                    });\r\n\r\n                    //done\r\n                    return retval;\r\n                }\r\n                catch(e) {\r\n                    //try to group symbols\r\n                    try {\r\n                        if(symbol.isComposite()) {\r\n                            //group denominators\r\n                            var denominators = {};\r\n\r\n                            symbol.each(function (x) {\r\n                                var d = x.getDenom();\r\n                                var n = x.getNum();\r\n                                var e = denominators[d];\r\n                                denominators[d] = e ? _.add(e, n) : n;\r\n                            });\r\n\r\n                            var t = new Symbol(0);\r\n\r\n                            for(var x in denominators) {\r\n                                t = _.add(t, _.divide(denominators[x], _.parse(x)));\r\n                            }\r\n\r\n                            symbol = t;\r\n                        }\r\n                    }\r\n                    catch(e2) {\r\n                    }\r\n                    ;\r\n                }\r\n                ;\r\n\r\n                return symbol;\r\n            }\r\n        },\r\n        degree: function (symbol, v, o) {\r\n            o = o || {\r\n                nd: [], //numeric\r\n                sd: [], //symbolic\r\n                depth: 0 //call depth\r\n            };\r\n\r\n            if(!v) {\r\n                var vars = variables(symbol);\r\n                //The user must specify the variable for multivariate\r\n                if(vars.length > 1)\r\n                    throw new Error('You must specify the variable for multivariate polynomials!');\r\n                //if it's empty then we're dealing with a constant\r\n                if(vars.length === 0)\r\n                    return new Symbol(0);\r\n                //assume the variable for univariate\r\n                v = _.parse(vars[0]);\r\n            }\r\n\r\n            //store the group\r\n            var g = symbol.group;\r\n            //we're going to trust the user and assume no EX. Calling isPoly \r\n            //would eliminate this but no sense in checking twice. \r\n            if(symbol.isComposite()) {\r\n                symbol = symbol.clone();\r\n                symbol.distributeExponent();\r\n                symbol.each(function (x) {\r\n                    o.depth++; //mark a depth increase\r\n                    __.degree(x, v, o);\r\n                    o.depth--; //we're back\r\n                });\r\n            }\r\n            else if(symbol.group === CB) {\r\n                symbol.each(function (x) {\r\n                    o.depth++;\r\n                    __.degree(x, v, o);\r\n                    o.depth++;\r\n                });\r\n            }\r\n            else if(g === EX && symbol.value === v.value) {\r\n                o.sd.push(symbol.power.clone());\r\n            }\r\n            else if(g === S && symbol.value === v.value) {\r\n                o.nd.push(_.parse(symbol.power));\r\n            }\r\n            else\r\n                o.nd.push(new Symbol(0));\r\n\r\n            //get the max out of the array\r\n            var deg = o.nd.length > 0 ? core.Utils.arrayMax(o.nd) : undefined;\r\n\r\n            if(o.depth === 0 && o.sd.length > 0) {\r\n                if(deg !== undefined)\r\n                    o.sd.unshift(deg);\r\n                return _.symfunction('max', o.sd);\r\n            }\r\n            if(!core.Utils.isSymbol(deg))\r\n                deg = _.parse(deg);\r\n            //return the degree\r\n            return deg;\r\n        },\r\n        /**\r\n         * Attempts to complete the square of a polynomial\r\n         * @param {type} symbol\r\n         * @param {type} v\r\n         * @param {type} raw\r\n         * @throws {Error} \r\n         * @returns {Object|Symbol[]}\r\n         */\r\n        sqComplete: function (symbol, v, raw) {\r\n            if(!core.Utils.isSymbol(v))\r\n                v = _.parse(v);\r\n            var stop = function (msg) {\r\n                msg = msg || 'Stopping';\r\n                throw new core.exceptions.ValueLimitExceededError(msg);\r\n            };\r\n            //if not CP then nothing to do\r\n            if(!symbol.isPoly(true))\r\n                stop('Must be a polynomial!');\r\n\r\n            //declare vars\r\n            var deg, a, b, c, d, e, coeffs, sign, br, sym, sqrt_a;\r\n\r\n            br = core.Utils.inBrackets;\r\n            //make a copy\r\n            symbol = symbol.clone();\r\n            deg = core.Algebra.degree(symbol, v); //get the degree of polynomial\r\n            //must be in form ax^2 +/- bx +/- c\r\n            if(!deg.equals(2))\r\n                stop('Cannot complete square for degree ' + deg);\r\n            //get the coeffs\r\n            coeffs = core.Algebra.coeffs(symbol, v);\r\n            a = coeffs[2];\r\n            //store the sign\r\n            sign = coeffs[1].sign();\r\n            //divide the linear term by two and square it\r\n            b = _.divide(coeffs[1], new Symbol(2));\r\n            //add the difference to the constant\r\n            c = _.pow(b.clone(), new Symbol(2));\r\n            if(raw)\r\n                return [a, b, d];\r\n            sqrt_a = math.sqrt(a);\r\n            e = _.divide(math.sqrt(c), sqrt_a.clone());\r\n            //calculate d which is the constant\r\n            d = _.subtract(coeffs[0], _.pow(e.clone(), new Symbol(2)));\r\n            //compute the square part\r\n            sym = _.parse(br(sqrt_a.clone() + '*' + v + (sign < 0 ? '-' : '+') + e));\r\n            return {\r\n                a: sym,\r\n                c: d,\r\n                f: _.add(_.pow(sym.clone(), new Symbol(2)), d.clone())\r\n            };\r\n        },\r\n        Simplify: {\r\n            strip: function (symbol) {\r\n                var c = _.parse(symbol.multiplier);\r\n                symbol.toUnitMultiplier();\r\n                var p = _.parse(symbol.power);\r\n                symbol.toLinear();\r\n                return [c, p, symbol];\r\n            },\r\n            unstrip: function (cp, symbol) {\r\n                var c = cp[0];\r\n                var p = cp[1];\r\n                return _.multiply(c, _.pow(symbol, p));\r\n            },\r\n            complexSimp: function (num, den) {\r\n                var ac, bd, bc, ad, cd, r1, r2, i1, i2;\r\n                r1 = num.realpart();\r\n                i1 = num.imagpart();\r\n                r2 = den.realpart();\r\n                i2 = den.imagpart();\r\n                //apply complex arithmatic rule\r\n                ac = _.multiply(r1.clone(), r2.clone());\r\n                bd = _.multiply(i1.clone(), i2.clone());\r\n                bc = _.multiply(r2.clone(), i1);\r\n                ad = _.multiply(r1, i2.clone());\r\n                cd = _.add(_.pow(r2, new Symbol(2)), _.pow(i2, new Symbol(2)));\r\n\r\n                return _.divide(_.add(_.add(ac, bd), _.multiply(_.subtract(bc, ad), Symbol.imaginary())), cd);\r\n            },\r\n            trigSimp: function (symbol) {\r\n                if(symbol.containsFunction(['cos', 'sin', 'tan'])) {\r\n                    symbol = symbol.clone();\r\n                    //remove power and multiplier\r\n                    var sym_array = __.Simplify.strip(symbol);\r\n                    symbol = sym_array.pop();\r\n                    //the default return value is the symbol\r\n                    var retval = symbol.clone();\r\n\r\n                    //rewrite the symbol\r\n                    if(symbol.group === CP) {\r\n                        var sym = new Symbol(0);\r\n                        symbol.each(function (x) {\r\n                            //rewrite the function\r\n                            var tr = __.Simplify.trigSimp(x.fnTransform());\r\n                            sym = _.add(sym, tr);\r\n                        }, true);\r\n\r\n                        //put back the power and multiplier and return\r\n                        retval = _.pow(_.multiply(new Symbol(symbol.multiplier), sym), new Symbol(symbol.power));\r\n                    }\r\n                    else if(symbol.group === CB) {\r\n\r\n                        var n = symbol.getNum();\r\n                        var d = symbol.getDenom();\r\n\r\n                        //try for tangent\r\n                        if(n.fname === 'sin' && d.fname === 'cos' && n.args[0].equals(d.args[0]) && n.power.equals(d.power)) {\r\n                            retval = _.parse(core.Utils.format('({0})*({1})*tan({2})^({3})', d.multiplier, n.multiplier, n.args[0], n.power));\r\n                        }\r\n                        if(retval.group === CB) {\r\n                            var t = new Symbol(1);\r\n                            retval.each(function (x) {\r\n                                if(x.fname === 'tan') {\r\n                                    x = _.parse(core.Utils.format('({0})*sin({1})^({2})/cos({1})^({2})', x.multiplier, __.Simplify.simplify(x.args[0]), x.power));\r\n                                }\r\n                                t = _.multiply(t, x);\r\n                            });\r\n                            retval = t;\r\n                        }\r\n                    }\r\n\r\n\r\n                    retval = __.Simplify.unstrip(sym_array, retval).distributeMultiplier();\r\n\r\n                    symbol = retval;\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            fracSimp: function (symbol) {\r\n                //try a quick simplify of imaginary numbers\r\n                var den = symbol.getDenom();\r\n                var num = symbol.getNum();\r\n\r\n                if(num.isImaginary() && den.isImaginary())\r\n                    symbol = __.Simplify.complexSimp(num, den);\r\n\r\n                if(symbol.isComposite()) {\r\n                    if(symbol.power > 1) {\r\n                        symbol = _.expand(symbol);\r\n                    }\r\n\r\n                    var symbols = symbol.collectSymbols();\r\n                    //assumption 1.\r\n                    //since it's a composite, it has a length of at least 1\r\n                    var retval, a, b, d1, d2, n1, n2, s, x, y, c, den, num;\r\n                    a = symbols.pop(); //grab the first symbol\r\n                    //loop through each term and make denominator common\r\n                    while(symbols.length) {\r\n                        b = symbols.pop(); //grab the second symbol\r\n                        d1 = _.parse(a.getDenom());\r\n                        d2 = _.parse(b.getDenom());\r\n                        n1 = a.getNum();\r\n                        n2 = b.getNum();\r\n                        c = _.multiply(d1.clone(), d2.clone());\r\n                        x = _.multiply(n1, d2);\r\n                        y = _.multiply(n2, d1);\r\n                        s = _.add(x, y);\r\n                        a = _.divide(s, c);\r\n                    }\r\n                    den = _.expand(a.getDenom());\r\n                    num = _.expand(a.getNum());\r\n                    //simplify imaginary\r\n                    if(num.isImaginary() && den.isImaginary()) {\r\n                        retval = __.Simplify.complexSimp(num, den);\r\n                    }\r\n                    else {\r\n                        retval = _.divide(num, den);\r\n                    }\r\n\r\n                    //we've already hit the simplest form so return that\r\n                    if(retval.equals(symbol)) {\r\n                        return symbol;\r\n                    }\r\n\r\n                    //otherwise simplify it some more\r\n                    return __.Simplify.simplify(retval);\r\n                }\r\n                return symbol;\r\n            },\r\n            ratSimp: function (symbol) {\r\n                if(symbol.group === CB) {\r\n                    var den = symbol.getDenom();\r\n                    var num = symbol.getNum().distributeMultiplier();\r\n                    var d = __.Simplify.fracSimp(den);\r\n                    var n = __.Simplify.fracSimp(num);\r\n                    symbol = _.divide(n, d);\r\n                }\r\n                return symbol;\r\n            },\r\n            sqrtSimp: function (symbol, sym_array) {\r\n                var retval;\r\n                if(symbol.isSQRT()) {\r\n                    var factored = __.Factor.factor(symbol.args[0].clone());\r\n                    var m = _.parse(factored.multiplier);\r\n                    var sign = m.sign();\r\n\r\n                    var retval = _.sqrt(m.abs());\r\n                    var arg;\r\n\r\n                    if(isInt(retval)) {\r\n\r\n                        if(factored.group === CB) {\r\n                            var rem = new Symbol(1);\r\n\r\n                            factored.each(function (x) {\r\n                                if(x.group === N) {\r\n                                    var trial = _.sqrt(x.clone());\r\n\r\n                                    // Multiply back sqrt if it's an integer otherwise just put back the number\r\n                                    if(isInt(trial)) {\r\n                                        retval = _.multiply(retval, trial);\r\n                                    }\r\n                                    else {\r\n                                        rem = _.multiply(rem, x);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    rem = _.multiply(rem, x);\r\n                                }\r\n\r\n                            });\r\n                            var t = _.multiply(rem, _.parse(sign));\r\n                            arg = _.sqrt(t.clone());\r\n\r\n                            // Expand if it's imaginary\r\n                            if(arg.isImaginary) {\r\n                                arg = _.sqrt(_.expand(t.clone()));\r\n                            }\r\n                        }\r\n                        else {\r\n                            // Strip the multiplier\r\n                            arg = _.sqrt(factored.clone().toUnitMultiplier());\r\n                        }\r\n                        return _.multiply(retval, arg);\r\n\r\n                    }\r\n\r\n                }\r\n                else if(symbol.isComposite() && symbol.isLinear()) {\r\n                    retval = new Symbol(0);\r\n                    symbol.each(function (x) {\r\n                        retval = _.add(retval, __.Simplify.sqrtSimp(x));\r\n                    }, true);\r\n                    // Put back the multiplier\r\n                    retval = _.multiply(retval, _.parse(symbol.multiplier));\r\n                }\r\n                else if(symbol.group === CB) {\r\n                    retval = _.parse(symbol.multiplier);\r\n                    symbol.each(function (x) {\r\n                        var simp = __.Simplify.sqrtSimp(x);\r\n                        retval = _.multiply(retval, simp);\r\n\r\n                    }, true);\r\n                    // Put back the power\r\n                    retval = _.pow(retval, _.parse(symbol.power));\r\n                }\r\n\r\n                return retval ? retval : _.parse(symbol);\r\n            },\r\n            /**\r\n             * Unused. The goal is to substitute out patterns but it currently doesn't work.\r\n             * @param {Symbol} symbol\r\n             * @return {Array} The symbol and the matched patterns\r\n             */\r\n            patternSub: function (symbol) {\r\n                var patterns = {};\r\n\r\n                var has_CP = function (symbol) {\r\n                    var found = false;\r\n                    symbol.each(function (x) {\r\n                        if(x.group === CP) {\r\n                            found = true;\r\n                        }\r\n                        else if(x.symbols) {\r\n                            found = has_CP(x);\r\n                        }\r\n                    });\r\n\r\n                    return found;\r\n                };\r\n\r\n                var collect = function (sym) {\r\n                    // We loop through each symbol looking for anything in the simplest\r\n                    // form of ax+byz+...\r\n                    sym.each(function (x) {\r\n                        // Items of group N,P,S, need to apply\r\n                        if(!x.symbols && x.group !== FN) {\r\n                            return;\r\n                        }\r\n\r\n                        // Check to see if it has any symbols of group CP\r\n                        // Get the patterns in that symbol instead if it has anything of group CP\r\n                        if(has_CP(x)) {\r\n                            collect(x);\r\n                        }\r\n                        else {\r\n                            if(!patterns[x.value]) {\r\n                                var u = core.Utils.getU(symbol);\r\n                                // Get a u value and mark it for subsitution\r\n                                patterns[x.value] = u;\r\n                                symbol = symbol.sub(x.value, u);\r\n                            }\r\n                        }\r\n                    }, true);\r\n                };\r\n\r\n                // Collect a list of patterns\r\n                collect(symbol);\r\n\r\n                return [symbol, patterns];\r\n            },\r\n            simplify: function (symbol) {\r\n                //remove the multiplier to make calculation easier;\r\n                var sym_array = __.Simplify.strip(symbol);\r\n                symbol = sym_array.pop();\r\n                //remove gcd from denominator\r\n                symbol = __.Simplify.fracSimp(symbol);\r\n                //nothing more to do\r\n                if(symbol.isConstant() || symbol.group === core.groups.S) {\r\n                    sym_array.push(symbol);\r\n                    var ret = __.Simplify.unstrip(sym_array, symbol);\r\n                    return ret;\r\n                }\r\n\r\n                //var patterns;\r\n\r\n                var simplified = symbol.clone(); //make a copy\r\n\r\n                //[simplified, patterns] = __.Simplify.patternSub(symbol);\r\n\r\n                // Simplify sqrt within the symbol\r\n//                simplified = __.Simplify.sqrtSimp(simplified, sym_array);\r\n\r\n                // Try trig simplificatons e.g. cos(x)^2+sin(x)^2\r\n                simplified = __.Simplify.trigSimp(simplified);\r\n\r\n                // Simplify common denominators\r\n                simplified = __.Simplify.ratSimp(simplified);\r\n\r\n                // First go for the \"cheapest\" simplification which may eliminate \r\n                // your problems right away. factor -> evaluate. Remember\r\n                // that there's no need to expand since factor already does that\r\n\r\n                simplified = __.Factor.factor(simplified);\r\n\r\n                //If the simplfied is a sum then we can make a few more simplifications\r\n                //e.g. simplify(1/(x-1)+1/(1-x)) as per issue #431\r\n                if(simplified.group === core.groups.CP && simplified.isLinear()) {\r\n                    var m = simplified.multiplier.clone();\r\n                    simplified.toUnitMultiplier(); //strip the multiplier\r\n                    var r = new Symbol(0);\r\n                    //return the sum of simplifications\r\n                    simplified.each(function (x) {\r\n                        var s = __.Simplify.simplify(x);\r\n                        r = _.add(r, s);\r\n                    });\r\n                    simplified = r;\r\n                    //put back the multiplier\r\n                    r.multiplier = r.multiplier.multiply(m);\r\n                }\r\n\r\n                //place back multiplier and return\r\n                var retval = __.Simplify.unstrip(sym_array, simplified);\r\n\r\n                // Back substitute\r\n                /*\r\n                 for(var x in patterns) {\r\n                 retval = retval.sub(patterns[x], x);\r\n                 }\r\n                 */\r\n\r\n                return retval;\r\n            }\r\n        },\r\n\r\n        Classes: {\r\n            Polynomial: Polynomial,\r\n            Factors: Factors,\r\n            MVTerm: MVTerm\r\n        }\r\n    };\r\n\r\n    // Add a link to simplify\r\n    core.Expression.prototype.simplify = function () {\r\n        return __.Simplify.simplify(this.symbol);\r\n    };\r\n\r\n    nerdamer.useAlgebraDiv = function () {\r\n        var divide = __.divideFn = _.divide;\r\n        var calls = 0; //keep track of how many calls were made\r\n        _.divide = function (a, b) {\r\n            calls++;\r\n            var ans;\r\n            if(calls === 1) //check if this is the first call. If it is use algebra divide\r\n                ans = core.Algebra.divide(a, b);\r\n            else //otherwise use parser divide\r\n                ans = divide(a, b);\r\n            calls = 0; //reset the number of calls back to none\r\n            return ans;\r\n        };\r\n    };\r\n\r\n    nerdamer.useParserDiv = function () {\r\n        if(__.divideFn)\r\n            _.divide = __.divideFn;\r\n        delete __.divideFn;\r\n    };\r\n\r\n    nerdamer.register([\r\n        {\r\n            name: 'factor',\r\n            visible: true,\r\n            numargs: 1,\r\n            build: function () {\r\n                return __.Factor.factor;\r\n            }\r\n        },\r\n        {\r\n            name: 'simplify',\r\n            visible: true,\r\n            numargs: 1,\r\n            build: function () {\r\n                return __.Simplify.simplify;\r\n            }\r\n        },\r\n        {\r\n            name: 'gcd',\r\n            visible: true,\r\n            numargs: [1, ],\r\n            build: function () {\r\n                return __.gcd;\r\n            }\r\n        },\r\n        {\r\n            name: 'lcm',\r\n            visible: true,\r\n            numargs: [1, ],\r\n            build: function () {\r\n                return __.lcm;\r\n            }\r\n        },\r\n        {\r\n            name: 'roots',\r\n            visible: true,\r\n            numargs: -1,\r\n            build: function () {\r\n                return __.roots;\r\n            }\r\n        },\r\n        {\r\n            name: 'divide',\r\n            visible: true,\r\n            numargs: 2,\r\n            build: function () {\r\n                return __.divide;\r\n            }\r\n        },\r\n        {\r\n            name: 'div',\r\n            visible: true,\r\n            numargs: 2,\r\n            build: function () {\r\n                return __.div;\r\n            }\r\n        },\r\n        {\r\n            name: 'partfrac',\r\n            visible: true,\r\n            numargs: [1, 2],\r\n            build: function () {\r\n                return __.PartFrac.partfrac;\r\n            }\r\n        },\r\n        {\r\n            name: 'deg',\r\n            visible: true,\r\n            numargs: [1, 2],\r\n            build: function () {\r\n                return __.degree;\r\n            }\r\n        },\r\n        {\r\n            name: 'coeffs',\r\n            visible: true,\r\n            numargs: [1, 2],\r\n            build: function () {\r\n                var f = function () {\r\n                    var coeffs = __.coeffs.apply(__, arguments);\r\n                    return new core.Vector(coeffs);\r\n                };\r\n                return f;\r\n            }\r\n        },\r\n        {\r\n            name: 'line',\r\n            visible: true,\r\n            numargs: [2, 3],\r\n            build: function () {\r\n                return __.line;\r\n            }\r\n        },\r\n        {\r\n            name: 'sqcomp',\r\n            visible: true,\r\n            numargs: [1, 2],\r\n            build: function () {\r\n                var f = function (x, v) {\r\n                    try {\r\n                        v = v || variables(x)[0];\r\n                        var sq = __.sqComplete(x.clone(), v);\r\n                        return sq.f;\r\n                    }\r\n                    catch(e) {\r\n                        return x;\r\n                    }\r\n                };\r\n                return f;\r\n            }\r\n        }\r\n    ]);\r\n    nerdamer.updateAPI();\r\n})();","/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\r\n/* global module */\r\n\r\nif((typeof module) !== 'undefined') {\r\n    var nerdamer = require('./nerdamer.core.js');\r\n    require('./Calculus.js');\r\n    require('./Algebra.js');\r\n}\r\n\r\n(function () {\r\n    //handle imports\r\n    var core = nerdamer.getCore(),\r\n            _ = core.PARSER,\r\n            _A = core.Algebra,\r\n            _C = core.Calculus,\r\n            explode = _C.integration.decompose_arg,\r\n            evaluate = core.Utils.evaluate,\r\n            remove = core.Utils.remove,\r\n            format = core.Utils.format,\r\n            build = core.Utils.build,\r\n            knownVariable = core.Utils.knownVariable,\r\n            Symbol = core.Symbol,\r\n            isSymbol = core.Utils.isSymbol,\r\n            variables = core.Utils.variables,\r\n            S = core.groups.S,\r\n            PL = core.groups.PL,\r\n            CB = core.groups.CB,\r\n            CP = core.groups.CP,\r\n            FN = core.groups.FN,\r\n            Settings = core.Settings,\r\n            range = core.Utils.range,\r\n            isArray = core.Utils.isArray;\r\n\r\n\r\n    // The search radius for the roots\r\n    core.Settings.SOLVE_RADIUS = 1000;\r\n    // The maximum number to fish for on each side of the zero\r\n    core.Settings.ROOTS_PER_SIDE = 10;\r\n    // Covert the number to multiples of pi if possible\r\n    core.Settings.make_pi_conversions = false;\r\n    // The step size\r\n    core.Settings.STEP_SIZE = 0.1;\r\n    // The epsilon size\r\n    core.Settings.EPSILON = 1e-13;\r\n    //the maximum iterations for Newton's method\r\n    core.Settings.MAX_NEWTON_ITERATIONS = 200;\r\n    //the maximum number of time non-linear solve tries another jump point\r\n    core.Settings.MAX_NON_LINEAR_TRIES = 12;\r\n    //the amount of iterations the function will start to jump at\r\n    core.Settings.NON_LINEAR_JUMP_AT = 50;\r\n    //the size of the jump\r\n    core.Settings.NON_LINEAR_JUMP_SIZE = 100;\r\n    //the original starting point for nonlinear solving\r\n    core.Settings.NON_LINEAR_START = 0.01;\r\n    //When points are generated as starting points for Newton's method, they are sliced into small\r\n    //slices to make sure that we have convergence on the right point. This defines the \r\n    //size of the slice\r\n    core.Settings.NEWTON_SLICES = 200;\r\n    //The epsilon used in Newton's iteration\r\n    core.Settings.NEWTON_EPSILON = Number.EPSILON * 2;\r\n    //The distance in which two solutions are deemed the same\r\n    core.Settings.SOLUTION_PROXIMITY = 1e-14;\r\n    //Indicate wheter to filter the solutions are not\r\n    core.Settings.FILTER_SOLUTIONS = true;\r\n    //the maximum number of recursive calls\r\n    core.Settings.MAX_SOLVE_DEPTH = 10;\r\n    // The tolerance that's considered close enough to zero\r\n    core.Settings.ZERO_EPSILON = 1e-9;\r\n    // The maximum iteration for the bisection method incase of some JS strangeness\r\n    core.Settings.MAX_BISECTION_ITER = 2000;\r\n    // The tolerance for the bisection method\r\n    core.Settings.BI_SECTION_EPSILON = 1e-12;\r\n\r\n\r\n    core.Symbol.prototype.hasTrig = function () {\r\n        return this.containsFunction(['cos', 'sin', 'tan', 'cot', 'csc', 'sec']);\r\n    };\r\n\r\n    core.Symbol.prototype.hasNegativeTerms = function () {\r\n        if(this.isComposite()) {\r\n            for(var x in this.symbols) {\r\n                var sym = this.symbols[x];\r\n                if(sym.group === PL && sym.hasNegativeTerms() || this.symbols[x].power.lessThan(0))\r\n                    return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    /* nerdamer version 0.7.x and up allows us to make better use of operator overloading\r\n     * As such we can have this data type be supported completely outside of the core.\r\n     * This is an equation that has a left hand side and a right hand side\r\n     */\r\n    function Equation(lhs, rhs) {\r\n        if(rhs.isConstant() && lhs.isConstant() && !lhs.equals(rhs) || lhs.equals(core.Settings.IMAGINARY) && rhs.isConstant(true) || rhs.equals(core.Settings.IMAGINARY) && lhs.isConstant(true))\r\n            throw new core.exceptions.NerdamerValueError(lhs.toString() + ' does not equal ' + rhs.toString());\r\n        this.LHS = lhs; //left hand side\r\n        this.RHS = rhs; //right and side\r\n    }\r\n    ;\r\n\r\n    //UTILS ##!!\r\n\r\n    Equation.prototype = {\r\n        toString: function () {\r\n            return this.LHS.toString() + '=' + this.RHS.toString();\r\n        },\r\n        text: function (option) {\r\n            return this.LHS.text(option) + '=' + this.RHS.text(option);\r\n        },\r\n        toLHS: function (expand) {\r\n            expand = typeof expand === 'undefined' ? true : false;\r\n            var eqn;\r\n            if(!expand) {\r\n                eqn = this.clone();\r\n            }\r\n            else {\r\n                eqn = this.removeDenom();\r\n            }\r\n            var a = eqn.LHS;\r\n            var b = eqn.RHS;\r\n            \r\n            if(a.isConstant(true) && !b.isConstant(true)) {\r\n                // Swap them to avoid confusing parser and cause an infinite loop\r\n                [a, b] = [b, a];\r\n            }\r\n            var _t = _.subtract(a, b);\r\n            var retval = expand ? _.expand(_t) : _t;\r\n            \r\n            // Quick workaround for issue #636\r\n            // This basically borrows the removeDenom method from the Equation class. \r\n            // TODO: Make this function a stand-alone function\r\n            retval = new Equation(retval, new Symbol(0)).removeDenom().LHS;\r\n            \r\n            return retval;\r\n        },\r\n        removeDenom: function () {\r\n            var a = this.LHS.clone();\r\n            var b = this.RHS.clone();\r\n            //remove the denominator on both sides\r\n            var den = _.multiply(a.getDenom(), b.getDenom());\r\n            a = _.expand(_.multiply(a, den.clone()));\r\n            b = _.expand(_.multiply(b, den));\r\n            //swap the groups\r\n            if(b.group === CP && b.group !== CP) {\r\n                var t = a;\r\n                a = b;\r\n                b = t; //swap\r\n            }\r\n\r\n            //scan to eliminate denominators\r\n            if(a.group === CB) {\r\n                var t = new Symbol(a.multiplier),\r\n                        newRHS = b.clone();\r\n                a.each(function (y) {\r\n                    if(y.power.lessThan(0))\r\n                        newRHS = _.divide(newRHS, y);\r\n                    else\r\n                        t = _.multiply(t, y);\r\n                });\r\n                a = t;\r\n                b = newRHS;\r\n\r\n            }\r\n            else if(a.group === CP) {\r\n                //the logic: loop through each and if it has a denominator then multiply it out on both ends\r\n                //and then start over\r\n                for(var x in a.symbols) {\r\n                    var sym = a.symbols[x];\r\n                    if(sym.group === CB) {\r\n                        for(var y in sym.symbols) {\r\n                            var sym2 = sym.symbols[y];\r\n                            if(sym2.power.lessThan(0)) {\r\n                                return new Equation(\r\n                                        _.expand(_.multiply(sym2.clone().toLinear(), a)),\r\n                                        _.expand(_.multiply(sym2.clone().toLinear(), b))\r\n                                        );\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return new Equation(a, b);\r\n        },\r\n        clone: function () {\r\n            return new Equation(this.LHS.clone(), this.RHS.clone());\r\n        },\r\n        sub: function (x, y) {\r\n            var clone = this.clone();\r\n            clone.LHS = clone.LHS.sub(x.clone(), y.clone());\r\n            clone.RHS = clone.RHS.sub(x.clone(), y.clone());\r\n            return clone;\r\n        },\r\n        isZero: function () {\r\n            return core.Utils.evaluate(this.toLHS()).equals(0);\r\n        },\r\n        latex: function (option) {\r\n            return [this.LHS.latex(option), this.RHS.latex(option)].join('=');\r\n        }\r\n    };\r\n    //overwrite the equals function\r\n    _.equals = function (a, b) {\r\n        return new Equation(a, b);\r\n    };\r\n\r\n    // Extend simplify\r\n    (function () {\r\n        var simplify = _.functions.simplify[0];\r\n        _.functions.simplify[0] = function (symbol) {\r\n            if(symbol instanceof Equation) {\r\n                symbol.LHS = simplify(symbol.LHS);\r\n                symbol.RHS = simplify(symbol.RHS);\r\n                return symbol;\r\n            }\r\n            // Just call the original simplify\r\n            return simplify(symbol);\r\n        };\r\n    })();\r\n\r\n    /**\r\n     * Sets two expressions equal\r\n     * @param {Symbol} symbol\r\n     * @returns {Expression}\r\n     */\r\n    core.Expression.prototype.equals = function (symbol) {\r\n        if(symbol instanceof core.Expression)\r\n            symbol = symbol.symbol; //grab the symbol if it's an expression\r\n        var eq = new Equation(this.symbol, symbol);\r\n        return eq;\r\n    };\r\n\r\n    core.Expression.prototype.solveFor = function (x) {\r\n        var symbol;\r\n        if(this.symbol instanceof Equation) {\r\n            //exit right away if we already have the answer\r\n            //check the LHS\r\n            if(this.symbol.LHS.isConstant() && this.symbol.RHS.equals(x))\r\n                return new core.Expression(this.symbol.LHS);\r\n\r\n            //check the RHS\r\n            if(this.symbol.RHS.isConstant() && this.symbol.LHS.equals(x))\r\n                return new core.Expression(this.symbol.RHS);\r\n\r\n            //otherwise just bring it to LHS\r\n            symbol = this.symbol.toLHS();\r\n        }\r\n        else {\r\n            symbol = this.symbol;\r\n        }\r\n\r\n        return solve(symbol, x).map(function (x) {\r\n            return new core.Expression(x);\r\n        });\r\n    };\r\n\r\n    core.Expression.prototype.expand = function () {\r\n        if(this.symbol instanceof Equation) {\r\n            var clone = this.symbol.clone();\r\n            clone.RHS = _.expand(clone.RHS);\r\n            clone.LHS = _.expand(clone.LHS);\r\n            return new core.Expression(clone);\r\n        }\r\n        return new core.Expression(_.expand(this.symbol));\r\n    };\r\n\r\n    core.Expression.prototype.variables = function () {\r\n        if(this.symbol instanceof Equation)\r\n            return core.Utils.arrayUnique(variables(this.symbol.LHS).concat(variables(this.symbol.RHS)));\r\n        return variables(this.symbol);\r\n    };\r\n\r\n\r\n\r\n    var setEq = function (a, b) {\r\n        return _.equals(a, b);\r\n    };\r\n\r\n    //link the Equation class back to the core\r\n    core.Equation = Equation;\r\n\r\n    //Loops through an array and attempts to fails a test. Stops if manages to fail.\r\n    var checkAll = core.Utils.checkAll = function (args, test) {\r\n        for(var i = 0; i < args.length; i++)\r\n            if(test(args[i]))\r\n                return false;\r\n        return true;\r\n    };\r\n\r\n    //version solve\r\n    var __ = core.Solve = {\r\n        version: '2.0.3',\r\n        solutions: [],\r\n        solve: function (eq, variable) {\r\n            var solution = solve(eq, String(variable));\r\n            return new core.Vector(solution);\r\n            //return new core.Vector(solve(eq.toString(), variable ? variable.toString() : variable));\r\n        },\r\n        /**\r\n         * Brings the equation to LHS. A string can be supplied which will be converted to an Equation\r\n         * @param {Equation|String} eqn\r\n         * @returns {Symbol}\r\n         */\r\n        toLHS: function (eqn, expand) {\r\n            if(isSymbol(eqn))\r\n                return eqn;\r\n            //If it's an equation then call its toLHS function instead\r\n            if(!(eqn instanceof Equation)) {\r\n                var es = eqn.split('=');\r\n                //convert falsey values to zero\r\n                es[1] = es[1] || '0';\r\n                eqn = new Equation(_.parse(es[0]), _.parse(es[1]));\r\n            }\r\n            return eqn.toLHS(expand);\r\n        },\r\n//        getSystemVariables: function(eqns) {\r\n//            vars = variables(eqns[0], null, null, true);\r\n//\r\n//            //get all variables\r\n//            for (var i = 1, l=eqns.length; i < l; i++)\r\n//                vars = vars.concat(variables(eqns[i]));\r\n//            //remove duplicates\r\n//            vars = core.Utils.arrayUnique(vars).sort();\r\n//            \r\n//            //done\r\n//            return vars;\r\n//        },\r\n        /**\r\n         * Solve a set of circle equations. \r\n         * @param {Symbol[]} eqns\r\n         * @returns {Array}\r\n         */\r\n        solveCircle: function (eqns, vars) {\r\n            // Convert the variables to symbols\r\n            var svars = vars.map(function (x) {\r\n                return _.parse(x)\r\n            });\r\n\r\n            var deg = [];\r\n\r\n            var solutions = [];\r\n\r\n            // Get the degree for the equations\r\n            for(var i = 0; i < eqns.length; i++) {\r\n                var d = [];\r\n                for(var j = 0; j < svars.length; j++) {\r\n                    d.push(Number(core.Algebra.degree(eqns[i], svars[j])));\r\n                }\r\n                // Store the total degree\r\n                d.push(core.Utils.arraySum(d, true));\r\n                deg.push(d);\r\n            }\r\n\r\n            var a = eqns[0];\r\n            var b = eqns[1];\r\n\r\n            if(deg[0][2] > deg[1][2]) {\r\n                [b, a] = [a, b];\r\n                [deg[1], deg[0]] = [deg[0], deg[1]];\r\n            }\r\n\r\n            // Only solve it's truly a circle\r\n            if(deg[0][0] === 1 && deg[0][2] === 2 && deg[1][0] === 2 && deg[1][2] === 4) {\r\n                // For clarity we'll refer to the variables as x and y\r\n                var x = vars[0];\r\n                var y = vars[1];\r\n\r\n                // We can now get the two points for y\r\n                var y_points = solve(_.parse(b, knownVariable(x, solve(_.parse(a), x)[0])), y).map(function (x) {\r\n                    return x.toString();\r\n                });\r\n\r\n                // Since we now know y we can get the two x points from the first equation\r\n                var x_points = [\r\n                    solve(_.parse(a, knownVariable(y, y_points[0])))[0].toString()\r\n                ];\r\n\r\n                if(y_points[1]) {\r\n                    x_points.push(solve(_.parse(a, knownVariable(y, y_points[1])))[0].toString());\r\n                }\r\n\r\n                if(Settings.SOLUTIONS_AS_OBJECT) {\r\n                    var solutions = {};\r\n                    solutions[x] = x_points;\r\n                    solutions[y] = y_points;\r\n                }\r\n                else {\r\n                    y_points.unshift(y);\r\n                    x_points.unshift(x);\r\n                    solutions = [x_points, y_points];\r\n                }\r\n            }\r\n\r\n            return solutions;\r\n        },\r\n        /**\r\n         * Solve a system of nonlinear equations\r\n         * @param {Symbol[]} eqns The array of equations\r\n         * @param {number} tries The maximum number of tries\r\n         * @param {number} start The starting point where to start looking for solutions\r\n         * @returns {Array}\r\n         */\r\n        solveNonLinearSystem: function (eqns, tries, start) {\r\n            if(tries < 0) {\r\n                return [];//can't find a solution\r\n            }\r\n\r\n            start = typeof start === 'undefined' ? core.Settings.NON_LINEAR_START : start;\r\n\r\n            //the maximum number of times to jump\r\n            var max_tries = core.Settings.MAX_NON_LINEAR_TRIES;\r\n\r\n            //halfway through the tries\r\n            var halfway = Math.floor(max_tries / 2);\r\n\r\n            //initialize the number of tries to 10 if not specified\r\n            tries = typeof tries === 'undefined' ? max_tries : tries;\r\n\r\n            //a point at which we check to see if we're converging. By inspection it seems that we can\r\n            //use around 20 iterations to see if we're converging. If not then we retry a jump of x\r\n            var jump_at = core.Settings.NON_LINEAR_JUMP_AT;\r\n\r\n            //we jump by this many points at each pivot point\r\n            var jump = core.Settings.NON_LINEAR_JUMP_SIZE;\r\n\r\n            //used to check if we actually found a solution or if we gave up. Assume we will find a solution.\r\n            var found = true;\r\n\r\n            var create_subs = function (vars, matrix) {\r\n                return vars.map(function (x, i) {\r\n                    return Number(matrix.get(i, 0));\r\n                });\r\n            };\r\n\r\n            var vars = core.Utils.arrayGetVariables(eqns);\r\n            var jacobian = core.Matrix.jacobian(eqns, vars, function (x) {\r\n                return build(x, vars);\r\n            }, true);\r\n\r\n            var max_iter = core.Settings.MAX_NEWTON_ITERATIONS;\r\n            var o, y, iters, xn1, norm, lnorm, xn, d;\r\n\r\n            var f_eqns = eqns.map(function (eq) {\r\n                return build(eq, vars);\r\n            });\r\n\r\n            var J = jacobian.map(function (e) {\r\n                return build(e, vars);\r\n            }, true);\r\n            //initial values\r\n            xn1 = core.Matrix.cMatrix(0, vars);\r\n\r\n            //initialize the c matrix with something close to 0. \r\n            var c = core.Matrix.cMatrix(start, vars);\r\n\r\n            iters = 0;\r\n\r\n            //start of algorithm\r\n            do {\r\n                //if we've reached the max iterations then exit\r\n                if(iters > max_iter) {\r\n                    break;\r\n                    found = false;\r\n                }\r\n\r\n                //set the substitution object\r\n                o = create_subs(vars, c);\r\n\r\n                //set xn\r\n                xn = c.clone();\r\n\r\n                //make all the substitutions for each of the equations\r\n                f_eqns.forEach(function (f, i) {\r\n                    c.set(i, 0, f.apply(null, o));\r\n                });\r\n\r\n                var m = new core.Matrix();\r\n                J.each(function (fn, i, j) {\r\n                    var ans = fn.apply(null, o);\r\n                    m.set(i, j, ans);\r\n                });\r\n\r\n                m = m.invert();\r\n\r\n                //preform the elimination\r\n                y = _.multiply(m, c).negate();\r\n\r\n                //the callback is to avoid overflow in the coeffient denonimator\r\n                //it converts it to a decimal and then back to a fraction. Some precision\r\n                //is lost be it's better than overflow. \r\n                d = y.subtract(xn1, function (x) {\r\n                    return _.parse(Number(x));\r\n                });\r\n\r\n                xn1 = xn.add(y, function (x) {\r\n                    return _.parse(Number(x));\r\n                });\r\n\r\n                //move c is now xn1\r\n                c = xn1;\r\n\r\n                //get the norm\r\n\r\n                //the expectation is that we're converging to some answer as this point regardless of where we start\r\n                //this may have to be adjusted at some point because of erroneous assumptions\r\n                if(iters >= jump_at) {\r\n                    //check the norm. If the norm is greater than one then it's time to try another point\r\n                    if(norm > 1) {\r\n                        //reset the start point at halway\r\n                        if(tries === halfway)\r\n                            start = 0;\r\n                        var sign = tries > halfway ? 1 : -1; //which side are we incrementing\r\n                        //we increment +n at one side and -n at the other. \r\n                        n = (tries % Math.floor(halfway)) + 1;\r\n                        //adjust the start point\r\n                        start += (sign * n * jump);\r\n                        //call restart\r\n                        return __.solveNonLinearSystem(eqns, --tries, start);\r\n                    }\r\n                }\r\n                lnorm = norm;\r\n                iters++;\r\n                norm = d.max();\r\n\r\n                //exit early. Revisit if we get bugs\r\n                if(Number(norm) === Number(lnorm)) {\r\n                    break;\r\n                }\r\n            }\r\n            while(Number(norm) >= Number.EPSILON)\r\n\r\n            //return a blank set if nothing was found;\r\n            if(!found)\r\n                return [];\r\n\r\n            //return c since that's the answer\r\n            return __.systemSolutions(c, vars, true, function (x) {\r\n                return core.Utils.round(Number(x), 14);\r\n            });\r\n        },\r\n        systemSolutions: function (result, vars, expand_result, callback) {\r\n            var solutions = core.Settings.SOLUTIONS_AS_OBJECT ? {} : [];\r\n\r\n            result.each(function (e, idx) {\r\n                var solution = (expand_result ? _.expand(e) : e).valueOf();\r\n                if(callback)\r\n                    solution = callback.call(e, solution);\r\n                var variable = vars[idx];\r\n                if(core.Settings.SOLUTIONS_AS_OBJECT) {\r\n                    solutions[variable] = solution;\r\n                }\r\n                else\r\n                    solutions.push([variable, solution]); /*NO*/\r\n            });\r\n            //done\r\n            return solutions;\r\n        },\r\n        /**\r\n         * Solves a system of equations by substitution. This is useful when\r\n         * no distinct solution exists. e.g. a line, plane, etc.\r\n         * @param {Array} eqns\r\n         * @returns {Array}\r\n         */\r\n        solveSystemBySubstitution: function (eqns) {\r\n            // Assume at least 2 equations. The function variables will just return an empty array if undefined is provided\r\n            var vars_a = variables(eqns[0]);\r\n            var vars_b = variables(eqns[1]);\r\n            // Check if it's a circle equation\r\n            if(eqns.length === 2 && vars_a.length === 2 && core.Utils.arrayEqual(vars_a, vars_b)) {\r\n                return __.solveCircle(eqns, vars_a);\r\n            }\r\n\r\n            return []; // return an empty set\r\n        },\r\n\r\n        //https://www.lakeheadu.ca/sites/default/files/uploads/77/docs/RemaniFinal.pdf\r\n        /**\r\n         * Solves a systems of equations\r\n         * @param {Array} eqns An array of equations\r\n         * @param {Array} var_array An array of variables\r\n         * @returns {Array|object}\r\n         */\r\n        solveSystem: function (eqns, var_array) {\r\n            //check if a var_array was specified\r\n            //nerdamer.clearVars();// this deleted ALL variables: not what we want\r\n            //parse all the equations to LHS. Remember that they come in as strings\r\n            for(var i = 0; i < eqns.length; i++)\r\n                eqns[i] = __.toLHS(eqns[i]);\r\n\r\n            var l = eqns.length,\r\n                    m = new core.Matrix(),\r\n                    c = new core.Matrix(),\r\n                    expand_result = false,\r\n                    vars;\r\n\r\n            if(typeof var_array === 'undefined') {\r\n                //check to make sure that all the equations are linear\r\n                if(!_A.allLinear(eqns)) {\r\n                    try {\r\n                        return __.solveNonLinearSystem(eqns);\r\n                    }\r\n                    catch(e) {\r\n                        if(e instanceof core.exceptions.DivisionByZero) {\r\n                            return __.solveSystemBySubstitution(eqns);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                vars = core.Utils.arrayGetVariables(eqns);\r\n                \r\n                // If the system only has one variable then we solve for the first one and \r\n                // then test the remaining equations with that solution. If any of the remaining\r\n                // equation fails then the system has no solution\r\n                if(vars.length === 1) {\r\n                    var n = 0,\r\n                        sol, e;\r\n                    do {\r\n                        var e = eqns[n].clone();\r\n                        \r\n                        if(n > 0) {\r\n                            e = e.sub(vars[0], sol[0]);\r\n                        }\r\n\r\n                        sol = solve(e, vars[0]);\r\n                        // Skip the first one\r\n                        if(n === 0) \r\n                            continue;\r\n                    }\r\n                    while(++n < eqns.length)\r\n                        \r\n                    // Format the output\r\n                    var solutions;\r\n                    if(Settings.SOLUTIONS_AS_OBJECT) {\r\n                        solutions = {};\r\n                        solutions[vars[0]] = sol;\r\n                    }\r\n                    else if(sol.length === 0) {\r\n                        solutions = sol; // No solutions\r\n                    }\r\n                    else {\r\n                        solutions = [vars[0], sol];\r\n                    }\r\n                        \r\n                    return solutions;\r\n                }\r\n                \r\n                // Deal with redundant equations as expressed in #562\r\n                // The fix is to remove all but the number of equations equal to the number\r\n                // of variables. We then solve those and then evaluate the remaining equations\r\n                // with those solutions. If the all equal true then those are just redundant\r\n                // equations and we can return the solution set.\r\n                if(vars.length < eqns.length) {\r\n                    var reduced = [];\r\n                    var n = eqns.length;\r\n                    for(var i = 0; i < n - 1; i++) {\r\n                        reduced.push(_.parse(eqns[i]));\r\n                    }\r\n\r\n                    var knowns = {};\r\n                    var solutions = __.solveSystem(reduced, vars);\r\n                    // The solutions may have come back as an array\r\n                    if(Array.isArray(solutions)) {\r\n                        solutions.forEach(function (sol) {\r\n                            knowns[sol[0]] = sol[1];\r\n                        });\r\n                    }\r\n                    else {\r\n                        knowns = solutions;\r\n                    }\r\n\r\n                    // Start by assuming they will all evaluate to zero. If even one fails\r\n                    // then all zero will be false\r\n                    var all_zero = true;\r\n                    // Check if the last solution evalutes to zero given these solutions\r\n                    for(var i = n - 1; i < n; i++) {\r\n                        if(!_.parse(eqns[i], knowns).equals(0)) {\r\n                            all_zero = false;\r\n                        }\r\n                    }\r\n\r\n                    if(all_zero) {\r\n                        return solutions;\r\n                    }\r\n                }\r\n\r\n                // deletes only the variables of the linear equations in the nerdamer namespace\r\n                for(var i = 0; i < vars.length; i++) {\r\n                    nerdamer.setVar(vars[i], \"delete\");\r\n                }\r\n                // TODO: move this to cMatrix or something similar\r\n                // populate the matrix\r\n                for(var i = 0; i < l; i++) {\r\n                    var e = eqns[i]; //store the expression\r\n                    // Iterate over the columns\r\n                    for(var j = 0; j < vars.length; j++) {\r\n                        var v = vars[j];\r\n                        var coeffs = [];\r\n                        e.each(function (x) {\r\n                            if(x.contains(v)) {\r\n                                coeffs = coeffs.concat(x.coeffs());\r\n                            }\r\n                        });\r\n\r\n                        var cf = core.Utils.arraySum(coeffs);\r\n                        m.set(i, j, cf);\r\n                    }\r\n\r\n                    //strip the variables from the symbol so we're left with only the zeroth coefficient\r\n                    //start with the symbol and remove each variable and its coefficient\r\n                    var num = e.clone();\r\n                    vars.map(function (e) {\r\n                        num = num.stripVar(e, true);\r\n                    });\r\n                    c.set(i, 0, num.negate());\r\n                }\r\n            }\r\n            else {\r\n                /**\r\n                 * The idea is that we loop through each equation and then expand it. Afterwards we loop\r\n                 * through each term and see if and check to see if it matches one of the variables.\r\n                 * When a match is found we mark it. No other match should be found for that term. If it\r\n                 * is we stop since it's not linear.\r\n                 */\r\n                vars = var_array;\r\n                expand_result = true;\r\n                for(i = 0; i < l; i++) {\r\n                    //prefill\r\n                    c.set(i, 0, new Symbol(0));\r\n                    var e = _.expand(eqns[i]).collectSymbols(); //expand and store\r\n                    //go trough each of the variables\r\n                    for(var j = 0; j < var_array.length; j++) {\r\n                        m.set(i, j, new Symbol(0));\r\n                        var v = var_array[j];\r\n                        //go through the terms and sort the variables\r\n                        for(var k = 0; k < e.length; k++) {\r\n                            var term = e[k],\r\n                                    check = false;\r\n                            for(var z = 0; z < var_array.length; z++) {\r\n                                //check to see if terms contain multiple variables\r\n                                if(term.contains(var_array[z])) {\r\n                                    if(check)\r\n                                        core.err('Multiple variables found for term ' + term);\r\n                                    check = true;\r\n                                }\r\n                            }\r\n                            //we made sure that every term contains one variable so it's safe to assume that if the\r\n                            //variable is found then the remainder is the coefficient.\r\n                            if(term.contains(v)) {\r\n                                var tparts = explode(remove(e, k), v);\r\n                                m.set(i, j, _.add(m.get(i, j), tparts[0]));\r\n                            }\r\n                        }\r\n                    }\r\n                    //all the remaining terms go to the c matrix\r\n                    for(k = 0; k < e.length; k++) {\r\n                        c.set(i, 0, _.add(c.get(i, 0), e[k]));\r\n                    }\r\n                }\r\n                //consider case (a+b)*I+u\r\n            }\r\n\r\n            //check if the system has a distinct solution\r\n            if(vars.length !== eqns.length || m.determinant().equals(0)) {\r\n                // solve the system by hand\r\n                //return __.solveSystemBySubstitution(eqns, vars, m, c);\r\n                throw new core.exceptions.SolveError('System does not have a distinct solution');\r\n            }\r\n\r\n            // Use M^-1*c to solve system\r\n            m = m.invert();\r\n            var result = m.multiply(c);\r\n            //correct the sign as per issue #410\r\n            if(core.Utils.isArray(var_array))\r\n                result.each(function (x) {\r\n                    return x.negate();\r\n                });\r\n\r\n            return __.systemSolutions(result, vars, expand_result);\r\n        },\r\n        /**\r\n         * The quadratic function but only one side.\r\n         * @param {Symbol} c\r\n         * @param {Symbol} b\r\n         * @param {Symbol} a\r\n         * @returns {Symbol}\r\n         */\r\n        quad: function (c, b, a) {\r\n            var discriminant = _.subtract(_.pow(b.clone(), Symbol(2)), _.multiply(_.multiply(a.clone(), c.clone()), Symbol(4)))/*b^2 - 4ac*/;\r\n            // Fix for #608\r\n            discriminant = _.expand(discriminant);\r\n            var det = _.pow(discriminant, Symbol(0.5));\r\n            var den = _.parse(_.multiply(new Symbol(2), a.clone()));\r\n            var retval = [\r\n                _.parse(format('(-({0})+({1}))/({2})', b, det, den)),\r\n                _.parse(format('(-({0})-({1}))/({2})', b, det, den))\r\n            ];\r\n\r\n            return retval;\r\n        },\r\n        /**\r\n         * The cubic equation\r\n         * http://math.stackexchange.com/questions/61725/is-there-a-systematic-way-of-solving-cubic-equations\r\n         * @param {Symbol} d_o\r\n         * @param {Symbol} c_o\r\n         * @param {Symbol} b_o\r\n         * @param {Symbol} a_o\r\n         * @returns {Array}\r\n         */\r\n        cubic: function (d_o, c_o, b_o, a_o) {\r\n            //convert everything to text\r\n            var a = a_o.text(), b = b_o.text(), c = c_o.text(), d = d_o.text();\r\n\r\n            var t = `(-(${b})^3/(27*(${a})^3)+(${b})*(${c})/(6*(${a})^2)-(${d})/(2*(${a})))`;\r\n            var u = `((${c})/(3*(${a}))-(${b})^2/(9*(${a})^2))`;\r\n            var v = `(${b})/(3*(${a}))`;\r\n            var x = `((${t})+sqrt((${t})^2+(${u})^3))^(1/3)+((${t})-sqrt((${t})^2+(${u})^3))^(1/3)-(${v})`;\r\n\r\n            // Convert a to one\r\n            var w = '1/2+sqrt(3)/2*i'; // Cube root of unity\r\n\r\n            return [\r\n                _.parse(x),\r\n                _.parse(`(${x})(${w})`),\r\n                _.parse(`(${x})(${w})^2`)\r\n            ];\r\n        },\r\n        /**\r\n         * The quartic equation\r\n         * @param {Symbol} e\r\n         * @param {Symbol} d\r\n         * @param {Symbol} c\r\n         * @param {Symbol} b\r\n         * @param {Symbol} a\r\n         * @returns {Array}\r\n         */\r\n        quartic: function (e, d, c, b, a) {\r\n            var scope = {};\r\n            core.Utils.arrayUnique(variables(a).concat(variables(b))\r\n                    .concat(variables(c)).concat(variables(d)).concat(variables(e)))\r\n                    .map(function (x) {\r\n                        scope[x] = 1;\r\n                    });\r\n            a = a.toString();\r\n            b = b.toString();\r\n            c = c.toString();\r\n            d = d.toString();\r\n            e = e.toString();\r\n            var p, q, D, D0, D1, Q, x1, x2, x3, x4;\r\n            /*var D = core.Utils.block('PARSE2NUMBER', function() {\r\n             return _.parse(format(\"256*({0})^3*({4})^3-192*({0})^2*({1})*({3})*({4})^2-128*({0})^2*({2})^2*({4})^2+144*({0})^2*({2})*({3})^2*({4})\"+\r\n             \"-27*({0})^2*({3})^4+144*({0})*({1})^2*({2})*({4})^2-6*({0})*({1})^2*({3})^2*({4})-80*({0})*({1})*({2})^2*({3})*({4})+18*({0})*({1})*({2})*({3})^3\"+\r\n             \"+16*({0})*({2})^4*({4})-4*({0})*({2})^3*({3})^2-27*({1})^4*({4})^2+18*({1})^3*({2})*({3})*({4})-4*({1})^3*({3})^3-4*({1})^2*({2})^3*({4})+({1})^2*({2})^2*({3})^2\", \r\n             a, b, c, d, e), scope);\r\n             });*/\r\n\r\n            p = _.parse(format(\"(8*({0})*({2})-3*({1})^2)/(8*({0})^2)\", a, b, c)).toString(); //a, b, c\r\n            q = _.parse(format(\"(({1})^3-4*({0})*({1})*({2})+8*({0})^2*({3}))/(8*({0})^3)\", a, b, c, d)).toString();//a, b, c, d, e\r\n            D0 = _.parse(format(\"12*({0})*({4})-3*({1})*({3})+({2})^2\", a, b, c, d, e)).toString(); //a, b, c, d, e\r\n            D1 = _.parse(format(\"2*({2})^3-9*({1})*({2})*({3})+27*({1})^2*({4})+27*({0})*({3})^2-72*({0})*({2})*({4})\", a, b, c, d, e)).toString(); //a, b, c, d, e\r\n            Q = _.parse(format(\"((({1})+(({1})^2-4*({0})^3)^(1/2))/2)^(1/3)\", D0, D1)).toString(); //D0, D1\r\n            S = _.parse(format(\"(1/2)*(-(2/3)*({1})+(1/(3*({0}))*(({2})+(({3})/({2})))))^(1/2)\", a, p, Q, D0)).toString(); //a, p, Q, D0\r\n            x1 = _.parse(format(\"-(({1})/(4*({0})))-({4})+(1/2)*sqrt(-4*({4})^2-2*({2})+(({3})/({4})))\", a, b, p, q, S)); //a, b, p, q, S\r\n            x2 = _.parse(format(\"-(({1})/(4*({0})))-({4})-(1/2)*sqrt(-4*({4})^2-2*({2})+(({3})/({4})))\", a, b, p, q, S)); //a, b, p, q, S\r\n            x3 = _.parse(format(\"-(({1})/(4*({0})))+({4})+(1/2)*sqrt(-4*({4})^2-2*({2})-(({3})/({4})))\", a, b, p, q, S)); //a, b, p, q, S\r\n            x4 = _.parse(format(\"-(({1})/(4*({0})))+({4})-(1/2)*sqrt(-4*({4})^2-2*({2})-(({3})/({4})))\", a, b, p, q, S)); //a, b, p, q, S\r\n            return [x1, x2, x3, x4];\r\n        },\r\n        /**\r\n         * Breaks the equation up in its factors and tries to solve the smaller parts\r\n         * @param {Symbol} symbol\r\n         * @param {String} solve_for\r\n         * @returns {Array}\r\n         */\r\n        divideAndConquer: function (symbol, solve_for) {\r\n            var sols = [];\r\n            //see if we can solve the factors\r\n            var factors = core.Algebra.Factor.factor(symbol);\r\n            if(factors.group === CB) {\r\n                factors.each(function (x) {\r\n                    x = Symbol.unwrapPARENS(x);\r\n                    sols = sols.concat(solve(x, solve_for));\r\n                });\r\n            }\r\n            return sols;\r\n        },\r\n        /**\r\n         * Attempts to solve the equation assuming it's a polynomial with numeric coefficients\r\n         * @param {Symbol} eq\r\n         * @param {String} solve_for\r\n         * @returns {Array}\r\n         */\r\n        csolve: function (eq, solve_for) {\r\n            return core.Utils.block('IGNORE_E', function () {\r\n                var f, p, pn, n, pf, r, theta, sr, sp, roots;\r\n                roots = [];\r\n                f = core.Utils.decompose_fn(eq, solve_for, true);\r\n                if(f.x.group === S) {\r\n                    p = _.parse(f.x.power);\r\n                    pn = Number(p);\r\n                    n = _.pow(_.divide(f.b.negate(), f.a), p.invert());\r\n                    pf = Symbol.toPolarFormArray(n);\r\n                    r = pf[0];\r\n                    theta = pf[1];\r\n                    sr = r.toString();\r\n                    sp = p.toString();\r\n                    var k, root, str;\r\n                    for(var i = 0; i < pn; i++) {\r\n                        k = i;\r\n                        str = format('({0})*e^(2*{1}*pi*{2}*{3})', sr, k, p, core.Settings.IMAGINARY);\r\n                        root = _.parse(str);\r\n                        roots.push(root);\r\n                    }\r\n                }\r\n                return roots;\r\n            }, true);\r\n        },\r\n        /**\r\n         * Generates starting points for the Newton solver given an expression at zero.\r\n         * It beings by check if zero is a good point and starts expanding by a provided step size. \r\n         * Builds on the fact that if the sign changes over an interval then a zero\r\n         * must exist on that interval\r\n         * @param {Symbol} symbol\r\n         * @param {Number} step\r\n         * @param {Array} points\r\n         * @returns {Array}\r\n         */\r\n        getPoints: function (symbol, step, points) {\r\n            step = step || 0.01;\r\n            points = points || [];\r\n            var f = build(symbol);\r\n            var x0 = 0;\r\n\r\n            var start = Math.round(x0),\r\n                    last = f(start),\r\n                    last_sign = last / Math.abs(last),\r\n                    rside = core.Settings.ROOTS_PER_SIDE, // the max number of roots on right side\r\n                    lside = rside; // the max number of roots on left side\r\n            // check around the starting point\r\n            points.push(Math.floor(start / 2)); //half way from zero might be a good start\r\n            points.push(Math.abs(start)); //|f(0)| could be a good start\r\n            points.push(start);//|f(0)| could be a good start\r\n            //adjust for log. A good starting point to include for log is 0.1\r\n            symbol.each(function (x) {\r\n                if(x.containsFunction(core.Settings.LOG))\r\n                    points.push(0.1);\r\n            });\r\n\r\n            var left = range(-core.Settings.SOLVE_RADIUS, start, step),\r\n                    right = range(start, core.Settings.SOLVE_RADIUS, step);\r\n\r\n            var test_side = function (side, num_roots) {\r\n                var xi, val, sign;\r\n                var hits = [];\r\n                for(var i = 0, l = side.length; i < l; i++) {\r\n                    xi = side[i]; //the point being evaluated\r\n                    val = f(xi);\r\n                    sign = val / Math.abs(val);\r\n                    //Don't add non-numeric values\r\n                    if(isNaN(val) || !isFinite(val) || hits.length > num_roots) {\r\n                        continue;\r\n                    }\r\n\r\n                    //compare the signs. The have to be different if they cross a zero\r\n                    if(sign !== last_sign) {\r\n                        hits.push(xi); //take note of the possible zero location\r\n                    }\r\n                    last_sign = sign;\r\n                }\r\n\r\n                points = points.concat(hits);\r\n            };\r\n\r\n            test_side(left, lside);\r\n            test_side(right, rside);\r\n\r\n            return points;\r\n        },\r\n        /**\r\n         * Implements the bisection method. Returns undefined in no solution is found\r\n         * @param {number} point\r\n         * @param {function} f\r\n         * @returns {undefined | number}\r\n         */\r\n        bisection: function (point, f) {\r\n            var left = point - 1;\r\n            var right = point + 1;\r\n            // First test if this point is even worth evaluating. It should\r\n            // be crossing the x axis so the signs should be different\r\n            if(Math.sign(f(left)) !== Math.sign(f(right))) {\r\n                var safety = 0;\r\n\r\n                var epsilon, middle;\r\n\r\n                do {\r\n                    epsilon = Math.abs(right - left);\r\n                    // Safety against an infinite loop\r\n                    if(safety++ > core.Settings.MAX_BISECTION_ITER || isNaN(epsilon)) {\r\n                        return;\r\n                    }\r\n                    // Calculate the middle point\r\n                    middle = (left + right) / 2;\r\n\r\n                    if(f(left) * f(middle) > 0) {\r\n                        left = middle;\r\n                    }\r\n                    else {\r\n                        right = middle;\r\n                    }\r\n                }\r\n                while(epsilon >= Settings.EPSILON);\r\n\r\n                var solution = (left + right) / 2;\r\n\r\n                // Test the solution to make sure that it's within tolerance\r\n                var x_point = f(solution);\r\n\r\n                if(!isNaN(x_point) && Math.abs(x_point) <= core.Settings.BI_SECTION_EPSILON) {\r\n                    // Returns too many junk solutions if not rounded at 13th place.\r\n                    return core.Utils.round(solution, 13);\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * Implements Newton's iterations. Returns undefined if no solutions if found\r\n         * @param {number} point\r\n         * @param {function} f\r\n         * @param {function} fp\r\n         * @returns {undefined|number}\r\n         */\r\n        Newton: function (point, f, fp) {\r\n            var maxiter = core.Settings.MAX_NEWTON_ITERATIONS,\r\n                    iter = 0;\r\n            //first try the point itself. If it's zero viola. We're done\r\n            var x0 = point, x;\r\n            do {\r\n                var fx0 = f(x0); //store the result of the function\r\n                //if the value is zero then we're done because 0 - (0/d f(x0)) = 0\r\n                if(x0 === 0 && fx0 === 0) {\r\n                    x = 0;\r\n                    break;\r\n                }\r\n\r\n                iter++;\r\n                if(iter > maxiter)\r\n                    return; //naximum iterations reached\r\n\r\n                x = x0 - fx0 / fp(x0);\r\n                var e = Math.abs(x - x0);\r\n                x0 = x;\r\n            }\r\n            while(e > Settings.NEWTON_EPSILON)\r\n\r\n            //check if the number is indeed zero. 1e-13 seems to give the most accurate results\r\n            if(Math.abs(f(x)) <= Settings.EPSILON)\r\n                return x;\r\n        },\r\n        rewrite: function (rhs, lhs, for_variable) {\r\n            lhs = lhs || new Symbol(0);\r\n            if(rhs.isComposite() && rhs.isLinear()) {\r\n                //try to isolate the square root\r\n                //container for the square roots\r\n                var sqrts = [];\r\n                //all else\r\n                var rem = [];\r\n                rhs.each(function (x) {\r\n                    x = x.clone();\r\n                    if(x.fname === 'sqrt' && x.contains(for_variable)) {\r\n                        sqrts.push(x);\r\n                    }\r\n                    else {\r\n                        rem.push(x);\r\n                    }\r\n                }, true);\r\n\r\n                if(sqrts.length === 1) {\r\n                    //move the remainder to the RHS\r\n                    lhs = _.expand(_.pow(_.subtract(lhs, core.Utils.arraySum(rem)), new Symbol(2)));\r\n                    //square both sides\r\n                    rhs = _.expand(_.pow(Symbol.unwrapSQRT(sqrts[0]), new Symbol(2)));\r\n                }\r\n            }\r\n            else {\r\n                rhs = Symbol.unwrapSQRT(_.expand(rhs)); //expand the term expression go get rid of quotients when possible\r\n            }\r\n\r\n            var c = 0, //a counter to see if we have all terms with the variable\r\n                    l = rhs.length;\r\n            //try to rewrite the whole thing\r\n            if(rhs.group === CP && rhs.contains(for_variable) && rhs.isLinear()) {\r\n                rhs.distributeMultiplier();\r\n                var t = new Symbol(0);\r\n                //first bring all the terms containing the variable to the lhs\r\n                rhs.each(function (x) {\r\n                    if(x.contains(for_variable)) {\r\n                        c++;\r\n                        t = _.add(t, x.clone());\r\n                    }\r\n                    else\r\n                        lhs = _.subtract(lhs, x.clone());\r\n                });\r\n                rhs = t;\r\n\r\n                //if not all the terms contain the variable so it's in the form\r\n                //a*x^2+x\r\n                if(c !== l) {\r\n                    return __.rewrite(rhs, lhs, for_variable);\r\n                }\r\n                else {\r\n                    return [rhs, lhs];\r\n                }\r\n            }\r\n            else if(rhs.group === CB && rhs.contains(for_variable) && rhs.isLinear()) {\r\n                if(rhs.multiplier.lessThan(0)) {\r\n                    rhs.multiplier = rhs.multiplier.multiply(new core.Frac(-1));\r\n                    lhs.multiplier = lhs.multiplier.multiply(new core.Frac(-1));\r\n                }\r\n                if(lhs.equals(0))\r\n                    return new Symbol(0);\r\n                else {\r\n                    var t = new Symbol(1);\r\n                    rhs.each(function (x) {\r\n                        if(x.contains(for_variable))\r\n                            t = _.multiply(t, x.clone());\r\n                        else\r\n                            lhs = _.divide(lhs, x.clone());\r\n                    });\r\n                    rhs = t;\r\n                    return __.rewrite(rhs, lhs, for_variable);\r\n\r\n                }\r\n            }\r\n            else if(!rhs.isLinear() && rhs.contains(for_variable)) {\r\n                var p = _.parse(rhs.power.clone().invert());\r\n                rhs = _.pow(rhs, p.clone());\r\n                lhs = _.pow(_.expand(lhs), p.clone());\r\n                return __.rewrite(rhs, lhs, for_variable);\r\n            }\r\n            else if(rhs.group === FN || rhs.group === S || rhs.group === PL) {\r\n                return [rhs, lhs];\r\n            }\r\n        },\r\n        sqrtSolve: function (symbol, v) {\r\n            var sqrts = new Symbol(0);\r\n            var rem = new Symbol(0);\r\n            if(symbol.isComposite()) {\r\n                symbol.each(function (x) {\r\n                    if(x.fname === 'sqrt' && x.contains(v)) {\r\n                        sqrts = _.add(sqrts, x.clone());\r\n                    }\r\n                    else {\r\n                        rem = _.add(rem, x.clone());\r\n                    }\r\n                });\r\n                //quick and dirty ATM\r\n                if(!sqrts.equals(0)) {\r\n                    var t = _.expand(_.multiply(_.parse(symbol.multiplier), _.subtract(_.pow(rem, new Symbol(2)), _.pow(sqrts, new Symbol(2)))));\r\n                    //square both sides\r\n                    var solutions = solve(t, v);\r\n                    //test the points. The dumb way of getting the answers\r\n                    solutions = solutions.filter(function (e) {\r\n                        if(e.isImaginary())\r\n                            return e;\r\n                        var subs = {};\r\n                        subs[v] = e;\r\n                        var point = evaluate(symbol, subs);\r\n                        if(point.equals(0))\r\n                            return e;\r\n                    });\r\n                    return solutions;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /*\r\n     * \r\n     * @param {String[]|String|Equation} eqns\r\n     * @param {String} solve_for\r\n     * @param {Array} solutions\r\n     * @param {Number} depth\r\n     * @param {String|Equation} fn\r\n     * @returns {Array}\r\n     */\r\n    var solve = function (eqns, solve_for, solutions, depth, fn) {\r\n        depth = depth || 0;\r\n\r\n        if(depth++ > Settings.MAX_SOLVE_DEPTH) {\r\n            return solutions;\r\n        }\r\n\r\n        //make preparations if it's an Equation\r\n        if(eqns instanceof Equation) {\r\n            //if it's zero then we're done\r\n            if(eqns.isZero()) {\r\n                return [new Symbol(0)];\r\n            }\r\n            //if the lhs = x then we're done\r\n            if(eqns.LHS.equals(solve_for) && !eqns.RHS.contains(solve_for)) {\r\n                return [eqns.RHS];\r\n            }\r\n            //if the rhs = x then we're done\r\n            if(eqns.RHS.equals(solve_for) && !eqns.LHS.contains(solve_for)) {\r\n                return [eqns.LHS];\r\n            }\r\n        }\r\n\r\n        //unwrap the vector since what we want are the elements\r\n        if(eqns instanceof core.Vector)\r\n            eqns = eqns.elements;\r\n        solve_for = solve_for || 'x'; //assumes x by default\r\n        //If it's an array then solve it as a system of equations\r\n        if(isArray(eqns)) {\r\n            return __.solveSystem.apply(undefined, arguments);\r\n        }\r\n\r\n        // Parse out functions. Fix for issue #300\r\n        // eqns = core.Utils.evaluate(eqns);\r\n        solutions = solutions || [];\r\n        //mark existing solutions as not to have duplicates\r\n        var existing = {};\r\n\r\n        // Easy fail. If it's a rational function and the denominator is zero\r\n        // the we're done. Issue #555\r\n        var known = {};\r\n        known[solve_for] = 0;\r\n        if(isSymbol(eqns) && evaluate(eqns.getDenom(), known).equals(0) === true) {\r\n            return solutions;\r\n        }\r\n\r\n        // Is usued to add solutions to set. \r\n        // TODO: Set is now implemented and should be utilized\r\n        var add_to_result = function (r, has_trig) {\r\n            var r_is_symbol = isSymbol(r);\r\n            if(r === undefined || typeof r === 'number' && isNaN(r))\r\n                return;\r\n            if(isArray(r)) {\r\n                r.forEach(function (sol) {\r\n                    add_to_result(sol);\r\n                });\r\n            }\r\n            else {\r\n                if(r.valueOf() !== 'null') {\r\n                    // Call the pre-add function if defined. This could be useful for rounding\r\n                    if(typeof core.Settings.PRE_ADD_SOLUTION === 'function') {\r\n                        r = core.Settings.PRE_ADD_SOLUTION(r);\r\n                    }\r\n\r\n                    if(!r_is_symbol) {\r\n                        r = _.parse(r);\r\n                    }\r\n                    // try to convert the number to multiples of pi\r\n                    if(core.Settings.make_pi_conversions && has_trig) {\r\n                        var temp = _.divide(r.clone(), new Symbol(Math.PI)),\r\n                                m = temp.multiplier,\r\n                                a = Math.abs(m.num),\r\n                                b = Math.abs(m.den);\r\n                        if(a < 10 && b < 10)\r\n                            r = _.multiply(temp, new Symbol('pi'));\r\n                    }\r\n\r\n                    // And check if we get a number otherwise we might be throwing out symbolic solutions.\r\n                    var r_str = r.toString();\r\n\r\n                    if(!existing[r_str]) {\r\n                        solutions.push(r);\r\n                    }\r\n                    // Mark the answer as seen\r\n                    existing[r_str] = true;\r\n                }\r\n            }\r\n        };\r\n\r\n        // Maybe we get lucky. Try the point at the function. If it works we have a point\r\n        // If not it failed\r\n        if(eqns.group === S && eqns.contains(solve_for)) {\r\n            try {\r\n                var o = {};\r\n                o[solve_for] = 0;\r\n                evaluate(fn, o, 'numer');\r\n                add_to_result(new Symbol(0));\r\n            }\r\n            catch(e) {\r\n                // Do nothing;\r\n            }\r\n\r\n            return solutions;\r\n        }\r\n        if(eqns.group === CB) {\r\n            // It suffices to solve for the numerator\r\n            var num = eqns.getNum();\r\n\r\n            if(num.group === CB) {\r\n                var sf = String(solve_for); //everything else belongs to the coeff\r\n                //get the denominator and make sure it doesn't have x since we don't know how to solve for those\r\n                num.each(function (x) {\r\n                    if(x.contains(sf))\r\n                        solve(x, solve_for, solutions, depth, eqns);\r\n                });\r\n\r\n                return solutions;\r\n            }\r\n\r\n            return solve(num, solve_for, solutions, depth, fn);\r\n        }\r\n\r\n        if(eqns.group === FN && eqns.fname === 'sqrt') {\r\n            eqns = _.pow(Symbol.unwrapSQRT(eqns), new Symbol(2));\r\n        }\r\n        //pass in false to not expand equations such as (x+y)^5.\r\n        //It suffices to solve for the numerator since there's no value in the denominator which yields a zero for the function\r\n        var eq = (core.Utils.isSymbol(eqns) ? eqns : __.toLHS(eqns, false)).getNum(),\r\n                vars = core.Utils.variables(eq), //get a list of all the variables\r\n                numvars = vars.length;//how many variables are we dealing with\r\n\r\n        //it sufficient to solve (x+y) if eq is (x+y)^n since 0^n\r\n        if(core.Utils.isInt(eq.power) && eq.power > 0) {\r\n            eq = _.parse(eq).toLinear();\r\n        }\r\n\r\n        //if we're dealing with a single variable then we first check if it's a \r\n        //polynomial (including rationals).If it is then we use the Jenkins-Traubb algorithm.     \r\n        //Don't waste time\r\n        if(eq.group === S || eq.group === CB && eq.contains(solve_for)) {\r\n            return [new Symbol(0)];\r\n        }\r\n        //force to polynomial. We go through each and then we look at what it would \r\n        //take for its power to be an integer\r\n        //if the power is a fractional we divide by the fractional power\r\n        var fractionals = {},\r\n                cfact;\r\n\r\n        var correct_denom = function (symbol) {\r\n            symbol = _.expand(symbol, {\r\n                expand_denominator: true,\r\n                expand_functions: true\r\n            });\r\n            var original = symbol.clone(); //preserve the original\r\n\r\n            if(symbol.symbols) {\r\n                for(var x in symbol.symbols) {\r\n                    var sym = symbol.symbols[x];\r\n\r\n                    //get the denominator of the sub-symbol\r\n                    var den = sym.getDenom();\r\n\r\n                    if(!den.isConstant(true) && symbol.isComposite()) {\r\n                        var t = new Symbol(0);\r\n                        symbol.each(function (e) {\r\n                            t = _.add(t, _.multiply(e, den.clone()));\r\n                        });\r\n\r\n                        return correct_denom(_.multiply(_.parse(symbol.multiplier), t));\r\n                    }\r\n\r\n                    var parts = explode(sym, solve_for);\r\n                    var is_sqrt = parts[1].fname === core.Settings.SQRT;\r\n                    var v = Symbol.unwrapSQRT(parts[1]);\r\n                    var p = v.power.clone();\r\n                    //circular logic with sqrt. Since sqrt(x) becomes x^(1/2) which then becomes sqrt(x), this continues forever\r\n                    //this needs to be terminated if p = 1/2\r\n                    if(!isSymbol(p) && !p.equals(1 / 2)) {\r\n                        if(p.den.gt(1)) {\r\n                            if(is_sqrt) {\r\n                                symbol = _.subtract(symbol, sym.clone());\r\n                                symbol = _.add(symbol, _.multiply(parts[0].clone(), v));\r\n                                return correct_denom(symbol);\r\n                            }\r\n                            var c = fractionals[p.den];\r\n                            fractionals[p.den] = c ? c++ : 1;\r\n                        }\r\n                        else if(p.sign() === -1) {\r\n                            var factor = _.parse(solve_for + '^' + Math.abs(p)); //this\r\n                            //unwrap the symbol's denoniator\r\n                            symbol.each(function (y, index) {\r\n                                if(y.contains(solve_for)) {\r\n                                    symbol.symbols[index] = _.multiply(y, factor.clone());\r\n                                }\r\n                            });\r\n                            fractionals = {};\r\n                            return correct_denom(_.parse(symbol));\r\n                        }\r\n                        else if(sym.group === PL) {\r\n                            var min_p = core.Utils.arrayMin(core.Utils.keys(sym.symbols));\r\n                            if(min_p < 0) {\r\n                                var factor = _.parse(solve_for + '^' + Math.abs(min_p));\r\n                                var corrected = new Symbol(0);\r\n                                original.each(function (x) {\r\n                                    corrected = _.add(corrected, _.multiply(x.clone(), factor.clone()));\r\n                                }, true);\r\n                                return corrected;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return symbol;\r\n        };\r\n\r\n\r\n        //separate the equation\r\n        var separate = function (eq) {\r\n            var lhs = new Symbol(0),\r\n                    rhs = new Symbol(0);\r\n            eq.each(function (x) {\r\n                if(x.contains(solve_for, true))\r\n                    lhs = _.add(lhs, x.clone());\r\n                else\r\n                    rhs = _.subtract(rhs, x.clone());\r\n            });\r\n            return [lhs, rhs];\r\n        };\r\n\r\n        __.inverseFunctionSolve = function (name, lhs, rhs) {\r\n            //ax+b comes back as [a, x, ax, b];\r\n            var parts = explode(lhs.args[0], solve_for);\r\n            //check if x is by itself\r\n            var x = parts[1];\r\n            if(x.group === S) {\r\n                return _.divide(_.symfunction(name, [_.divide(rhs, _.parse(lhs.multiplier))]), parts[0]);\r\n            }\r\n\r\n        };\r\n\r\n        //first remove any denominators\r\n        eq = correct_denom(eq);\r\n\r\n        if(eq.equals(0))\r\n            return [eq];\r\n        //correct fractionals. I can only handle one type right now\r\n        var fkeys = core.Utils.keys(fractionals);\r\n        if(fkeys.length === 1) {\r\n            //make a note of the factor\r\n            cfact = fkeys[0];\r\n            eq.each(function (x, index) {\r\n                if(x.contains(solve_for)) {\r\n                    var parts = explode(x, solve_for);\r\n                    var v = parts[1];\r\n                    var p = v.power;\r\n                    if(p.den.gt(1)) {\r\n                        v.power = p.multiply(new core.Frac(cfact));\r\n                        eq.symbols[index] = _.multiply(v, parts[0]);\r\n                    }\r\n                }\r\n            });\r\n            eq = _.parse(eq);\r\n        }\r\n\r\n        //try for nested sqrts as per issue #486\r\n        add_to_result(__.sqrtSolve(eq, solve_for));\r\n\r\n        //polynomial single variable\r\n        if(numvars === 1) {\r\n            if(eq.isPoly(true)) {\r\n                //try to factor and solve\r\n                var factors = new core.Algebra.Classes.Factors();\r\n\r\n                core.Algebra.Factor.factor(eq, factors);\r\n                //if the equation has more than one symbolic factor then solve those individually\r\n                if(factors.getNumberSymbolics() > 1) {\r\n                    for(var x in factors.factors) {\r\n                        add_to_result(solve(factors.factors[x], solve_for));\r\n                    }\r\n                }\r\n                else {\r\n                    var coeffs = core.Utils.getCoeffs(eq, solve_for),\r\n                            deg = coeffs.length - 1,\r\n                            was_calculated = false;\r\n                    if(vars[0] === solve_for) {\r\n                        //check to see if all the coefficients are constant\r\n                        if(checkAll(coeffs, function (x) {\r\n                            return x.group !== core.groups.N;\r\n                        })) {\r\n                            var roots = core.Algebra.proots(eq);\r\n                            //if all the roots are integers then return those\r\n                            if(checkAll(roots, function (x) {\r\n                                return !core.Utils.isInt(x);\r\n                            })) {\r\n                                //roots have been calculates\r\n                                was_calculated = true;\r\n                                roots.map(function (x) {\r\n                                    add_to_result(new Symbol(x));\r\n                                });\r\n                            }\r\n                        }\r\n\r\n                        if(!was_calculated) {\r\n                            eqns = _.parse(eqns);\r\n                            if(eqns instanceof core.Equation)\r\n                                eqns = eqns.toLHS();\r\n\r\n                            //we can solve algebraically for degrees 1, 2, 3. The remainder we switch to Jenkins-\r\n                            if(deg === 1)\r\n                                add_to_result(_.divide(coeffs[0], coeffs[1].negate()));\r\n                            else if(deg === 2) {\r\n                                add_to_result(_.expand(__.quad.apply(undefined, coeffs)));\r\n                            }\r\n\r\n                            else if(deg === 3) {\r\n                                var solutions = []; //set to blank\r\n                                //first try to factor and solve\r\n                                var factored = core.Algebra.Factor.factor(eqns);\r\n\r\n                                //if it was successfully factored\r\n                                var solutions = [];\r\n                                if(solutions.length > 0)\r\n                                    add_to_result(solutions);\r\n                                else\r\n                                    add_to_result(__.cubic.apply(undefined, coeffs));\r\n                            }\r\n\r\n                            else {\r\n                                /*\r\n                                 var sym_roots = csolve(eq, solve_for); \r\n                                 if(sym_roots.length === 0)\r\n                                 sym_roots = divnconsolve(eq, solve_for);\r\n                                 if(sym_roots.length > 0) \r\n                                 add_to_result(sym_roots);\r\n                                 else\r\n                                 */\r\n                                _A.proots(eq).map(add_to_result);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                try {\r\n                    // Attempt Newton\r\n                    // Since it's not a polynomial then we'll try to look for a solution using Newton's method\r\n                    var has_trig = eq.hasTrig();\r\n                    // we get all the points where a possible zero might exist.\r\n                    var points1 = __.getPoints(eq, 0.1);\r\n                    var points2 = __.getPoints(eq, 0.05);\r\n                    var points3 = __.getPoints(eq, 0.01);\r\n                    var points = core.Utils.arrayUnique(points1.concat(points2).concat(points3)).sort(function (a, b) {\r\n                        return a - b;\r\n                    });\r\n                    var i, point, solution;\r\n\r\n                    // Compile the function\r\n                    var f = build(eq.clone());\r\n\r\n                    // First try to eliminate some points using bisection\r\n                    var t_points = [];\r\n                    for(i = 0; i < points.length; i++) {\r\n                        point = points[i];\r\n\r\n                        // See if there's a solution at this point\r\n                        solution = __.bisection(point, f);\r\n\r\n                        // If there's no solution then add it to the array for further investigation\r\n                        if(typeof solution === 'undefined') {\r\n                            t_points.push(point);\r\n                            continue;\r\n                        }\r\n\r\n                        // Add the solution to the solution set\r\n                        add_to_result(solution, has_trig);\r\n                    }\r\n\r\n                    // Reset the points to the remaining points\r\n                    points = t_points;\r\n\r\n                    // Build the derivative and compile a function\r\n                    var d = _C.diff(eq.clone());\r\n                    var fp = build(d);\r\n                    for(i = 0; i < points.length; i++) {\r\n                        point = points[i];\r\n\r\n                        add_to_result(__.Newton(point, f, fp), has_trig);\r\n                    }\r\n                    solutions.sort();\r\n                }\r\n                catch(e) {\r\n                    console.log(e);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            //The idea here is to go through the equation and collect the coefficients\r\n            //place them in an array and call the quad or cubic function to get the results\r\n            if(!eq.hasFunc(solve_for) && eq.isComposite()) {\r\n                try {\r\n                    var factored = core.Algebra.Factor.factor(eq.clone());\r\n\r\n                    if(factored.group === CB) {\r\n                        factored.each(function (x) {\r\n                            add_to_result(solve(x, solve_for));\r\n                        });\r\n                    }\r\n                    else {\r\n                        var coeffs = core.Utils.getCoeffs(eq, solve_for);\r\n\r\n                        var l = coeffs.length,\r\n                                deg = l - 1; //the degree of the polynomial\r\n                        //get the denominator and make sure it doesn't have x\r\n\r\n                        //handle the problem based on the degree\r\n                        switch(deg) {\r\n                            case 0:\r\n                                var separated = separate(eq);\r\n                                var lhs = separated[0],\r\n                                        rhs = separated[1];\r\n                                \r\n                                if(lhs.group === core.groups.EX) {\r\n                                    var log = core.Settings.LOG;\r\n                                    var expr_str = `${log}((${rhs})/(${lhs.multiplier}))/${log}(${lhs.value})/${lhs.power.multiplier}`;\r\n                                    add_to_result(_.parse(expr_str));\r\n                                }\r\n                                break;\r\n                            case 1:\r\n                                //nothing to do but to return the quotient of the constant and the LT\r\n                                //e.g. 2*x-1\r\n                                add_to_result(_.divide(coeffs[0], coeffs[1].negate()));\r\n                                break;\r\n                            case 2:\r\n                                add_to_result(__.quad.apply(undefined, coeffs));\r\n                                break;\r\n                            case 3:\r\n                                add_to_result(__.cubic.apply(undefined, coeffs));\r\n                                break;\r\n                            case 4:\r\n                                add_to_result(__.quartic.apply(undefined, coeffs));\r\n                                break;\r\n                            default:\r\n                                add_to_result(__.csolve(eq, solve_for));\r\n                                if(solutions.length === 0)\r\n                                    add_to_result(__.divideAndConquer(eq, solve_for));\r\n                        }\r\n\r\n                        if(solutions.length === 0) {\r\n                            //try factoring\r\n                            add_to_result(solve(factored, solve_for, solutions, depth));\r\n                        }\r\n                    }\r\n\r\n                }\r\n                catch(e) { /*something went wrong. EXITING*/\r\n                    ;\r\n                }\r\n            }\r\n            else {\r\n                try {\r\n                    var rw = __.rewrite(eq, null, solve_for);\r\n                    var lhs = rw[0];\r\n                    var rhs = rw[1];\r\n                    if(lhs.group === FN) {\r\n                        if(lhs.fname === 'abs') {\r\n                            add_to_result([rhs.clone(), rhs.negate()]);\r\n                        }\r\n                        else if(lhs.fname === 'sin') {\r\n                            //asin\r\n                            add_to_result(__.inverseFunctionSolve('asin', lhs, rhs));\r\n                        }\r\n                        else if(lhs.fname === 'cos') {\r\n                            //asin\r\n                            add_to_result(__.inverseFunctionSolve('acos', lhs, rhs));\r\n                        }\r\n                        else if(lhs.fname === 'tan') {\r\n                            //asin\r\n                            add_to_result(__.inverseFunctionSolve('atan', lhs, rhs));\r\n                        }\r\n                        else if(lhs.fname === core.Settings.LOG) {\r\n                            //ax+b comes back as [a, x, ax, b];\r\n                            var parts = explode(lhs.args[0], solve_for);\r\n                            //check if x is by itself\r\n                            var x = parts[1];\r\n                            if(x.group === S) {\r\n                                rhs = _.divide(_.subtract(_.pow(lhs.args.length > 1 ? lhs.args[1] : new Symbol('e'), _.divide(rhs, _.parse(lhs.multiplier))), parts[3]), parts[0]);\r\n                                var eq = new Equation(x, rhs).toLHS();\r\n                                add_to_result(solve(eq, solve_for));\r\n                            }\r\n                        }\r\n                        else\r\n                            add_to_result(_.subtract(lhs, rhs));\r\n                    }\r\n                    else {\r\n                        var neq = new Equation(lhs, rhs).toLHS(); //create a new equation\r\n\r\n                        if(neq.equals(eq))\r\n                            throw new Error('Stopping. No stop condition exists');\r\n                        add_to_result(solve(neq, solve_for));\r\n                    }\r\n                }\r\n                catch(error) {\r\n                    //Let's try this another way\r\n                    try {\r\n                        //1. if the symbol is in the form a*b*c*... then the solution is zero if \r\n                        //either a or b or c is zero.\r\n                        if(eq.group === CB)\r\n                            add_to_result(0);\r\n                        else if(eq.group === CP) {\r\n                            var separated = separate(eq);\r\n                            var lhs = separated[0],\r\n                                    rhs = separated[1];\r\n\r\n                            //reduce the equation\r\n                            if(lhs.group === core.groups.EX && lhs.value === solve_for) {\r\n                                //change the base of both sides\r\n                                var p = lhs.power.clone().invert();\r\n                                add_to_result(_.pow(rhs, p));\r\n                            }\r\n                        }\r\n                    }\r\n                    catch(error) {\r\n                        ;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if(cfact) {\r\n            solutions = solutions.map(function (x) {\r\n                return _.pow(x, new Symbol(cfact));\r\n            });\r\n        }\r\n\r\n        // Perform some cleanup but don't do it agains arrays, etc\r\n        // Check it actually evaluates to zero\r\n        if(isSymbol(eqns)) {\r\n            var knowns = {};\r\n            solutions = solutions.filter(function (x) {\r\n                try {\r\n                    knowns[solve_for] = x;\r\n                    var zero = Number(evaluate(eqns, knowns));\r\n\r\n                    // Allow symbolic answers\r\n                    if(isNaN(zero)) {\r\n                        return true;\r\n                    }\r\n                    return true;\r\n                }\r\n                catch(e) {\r\n                    return false;\r\n                }\r\n            });\r\n        }\r\n\r\n        return solutions;\r\n    };\r\n\r\n    //Register the functions for external use\r\n    nerdamer.register([\r\n        {\r\n            name: 'solveEquations',\r\n            parent: 'nerdamer',\r\n            numargs: -1,\r\n            visible: true,\r\n            build: function () {\r\n                return solve; //comment out to return a vector\r\n                /*\r\n                 return function() {\r\n                 return core.Utils.convertToVector(solve.apply(null, arguments));\r\n                 };\r\n                 */\r\n            }\r\n        },\r\n        {\r\n            name: 'solve',\r\n            parent: 'Solve',\r\n            numargs: 2,\r\n            visible: true,\r\n            build: function () {\r\n                return core.Solve.solve;\r\n            }\r\n        },\r\n        {\r\n            name: 'setEquation',\r\n            parent: 'Solve',\r\n            visible: true,\r\n            build: function () {\r\n                return setEq;\r\n            }\r\n        }\r\n    ]);\r\n    nerdamer.updateAPI();\r\n})();","/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * License : MIT\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\r\n\r\n/* global module */\r\n\r\nif((typeof module) !== 'undefined') {\r\n    var nerdamer = require('./nerdamer.core.js');\r\n    require('./Calculus');\r\n    require('./Algebra');\r\n}\r\n\r\n(function () {\r\n    \"use strict\";\r\n\r\n    var core = nerdamer.getCore(),\r\n            _ = core.PARSER,\r\n            Symbol = core.Symbol,\r\n            format = core.Utils.format,\r\n            isVector = core.Utils.isVector,\r\n            isArray = core.Utils.isArray,\r\n            Vector = core.Vector,\r\n            S = core.groups.S,\r\n            EX = core.groups.EX,\r\n            CP = core.groups.CP,\r\n            CB = core.groups.CB,\r\n            FN = core.groups.FN;\r\n    core.Settings.Laplace_integration_depth = 40;\r\n\r\n\r\n    Symbol.prototype.findFunction = function (fname) {\r\n        //this is what we're looking for\r\n        if(this.group === FN && this.fname === fname)\r\n            return this.clone();\r\n        var found;\r\n        if(this.symbols)\r\n            for(var x in this.symbols) {\r\n                found = this.symbols[x].findFunction(fname);\r\n                if(found)\r\n                    break;\r\n            }\r\n\r\n        return found;\r\n    };\r\n\r\n    var __ = core.Extra = {\r\n        version: '1.4.2',\r\n        //http://integral-table.com/downloads/LaplaceTable.pdf\r\n        //Laplace assumes all coefficients to be positive\r\n        LaPlace: {\r\n            //Using: integral_0^oo f(t)*e^(-s*t) dt\r\n            transform: function (symbol, t, s) {\r\n                symbol = symbol.clone();\r\n\r\n                t = t.toString();\r\n                //First try a lookup for a speed boost\r\n                symbol = Symbol.unwrapSQRT(symbol, true);\r\n                var retval,\r\n                        coeff = symbol.stripVar(t),\r\n                        g = symbol.group;\r\n\r\n                symbol = _.divide(symbol, coeff.clone());\r\n\r\n                if(symbol.isConstant() || !symbol.contains(t, true)) {\r\n                    retval = _.parse(format('({0})/({1})', symbol, s));\r\n                }\r\n                else if(g === S && core.Utils.isInt(symbol.power)) {\r\n                    var n = String(symbol.power);\r\n                    retval = _.parse(format('factorial({0})/({1})^({0}+1)', n, s));\r\n                }\r\n                else if(symbol.group === S && symbol.power.equals(1 / 2)) {\r\n                    retval = _.parse(format('sqrt(pi)/(2*({0})^(3/2))', s));\r\n                }\r\n                else if(symbol.isComposite()) {\r\n                    retval = new Symbol(0);\r\n                    symbol.each(function (x) {\r\n                        retval = _.add(retval, __.LaPlace.transform(x, t, s));\r\n                    }, true);\r\n                }\r\n                else if(symbol.isE() && (symbol.power.group === S || symbol.power.group === CB)) {\r\n                    var a = symbol.power.stripVar(t);\r\n                    retval = _.parse(format('1/(({1})-({0}))', a, s));\r\n                }\r\n                else {\r\n                    var fns = ['sin', 'cos', 'sinh', 'cosh'];\r\n                    //support for symbols in fns with arguments in the form a*t or n*t where a = symbolic and n = Number\r\n                    if(symbol.group === FN && fns.indexOf(symbol.fname) !== -1 && (symbol.args[0].group === S || symbol.args[0].group === CB)) {\r\n                        var a = symbol.args[0].stripVar(t);\r\n\r\n                        switch(symbol.fname) {\r\n                            case 'sin':\r\n                                retval = _.parse(format('({0})/(({1})^2+({0})^2)', a, s));\r\n                                break;\r\n                            case 'cos':\r\n                                retval = _.parse(format('({1})/(({1})^2+({0})^2)', a, s));\r\n                                break;\r\n                            case 'sinh':\r\n                                retval = _.parse(format('({0})/(({1})^2-({0})^2)', a, s));\r\n                                break;\r\n                            case 'cosh':\r\n                                retval = _.parse(format('({1})/(({1})^2-({0})^2)', a, s));\r\n                                break;\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        //Try to integrate for a solution\r\n                        //we need at least the Laplace integration depth\r\n                        var depth_is_lower = core.Settings.integration_depth < core.Settings.Laplace_integration_depth;\r\n\r\n                        if(depth_is_lower) {\r\n                            var integration_depth = core.Settings.integration_depth; //save the depth\r\n                            core.Settings.integration_depth = core.Settings.Laplace_integration_depth; //transforms need a little more room\r\n                        }\r\n\r\n                        core.Utils.block('PARSE2NUMBER', function () {\r\n                            var u = t;\r\n                            var sym = symbol.sub(t, u);\r\n                            var integration_expr = _.parse('e^(-' + s + '*' + u + ')*' + sym);\r\n                            retval = core.Calculus.integrate(integration_expr, u);\r\n                            if(retval.hasIntegral())\r\n                                return _.symfunction('laplace', arguments);\r\n//                                _.error('Unable to compute transform');\r\n                            retval = retval.sub(t, 0);\r\n                            retval = _.expand(_.multiply(retval, new Symbol(-1)));\r\n                            retval = retval.sub(u, t);\r\n                        }, false);\r\n\r\n                        retval = core.Utils.block('PARSE2NUMBER', function () {\r\n                            return _.parse(retval);\r\n                        }, true);\r\n\r\n                        if(depth_is_lower)//put the integration depth as it was\r\n                            core.Settings.integration_depth = integration_depth;\r\n                    }\r\n\r\n                }\r\n\r\n                return _.multiply(retval, coeff);\r\n            },\r\n            inverse: function (symbol, s_, t) {\r\n                var input_symbol = symbol.clone();\r\n                return core.Utils.block('POSITIVE_MULTIPLIERS', function () {\r\n                    //expand and get partial fractions\r\n                    if(symbol.group === CB) {\r\n                        symbol = core.Algebra.PartFrac.partfrac(_.expand(symbol), s_);\r\n                    }\r\n\r\n                    if(symbol.group === S || symbol.group === CB || symbol.isComposite()) {\r\n                        var finalize = function () {\r\n                            //put back the numerator\r\n                            retval = _.multiply(retval, num);\r\n                            retval.multiplier = retval.multiplier.multiply(symbol.multiplier);\r\n                            //put back a\r\n                            retval = _.divide(retval, f.a);\r\n                        };\r\n                        var num, den, s, retval, f, p, m, den_p, fe;\r\n                        //remove the multiplier\r\n                        m = symbol.multiplier.clone();\r\n                        symbol.toUnitMultiplier();\r\n                        //get the numerator and denominator\r\n                        num = symbol.getNum();\r\n                        den = symbol.getDenom().toUnitMultiplier();\r\n\r\n                        //TODO: Make it so factor doesn't destroy pi\r\n                        //num = core.Algebra.Factor.factor(symbol.getNum());\r\n                        //den = core.Algebra.Factor.factor(symbol.getDenom().invert(null, true));\r\n\r\n                        if(den.group === CP) {\r\n                            den_p = den.power.clone();\r\n                            den.toLinear();\r\n                        }\r\n                        else {\r\n                            den_p = new core.Frac(1);\r\n                        }\r\n\r\n                        //convert s to a string\r\n                        s = s_.toString();\r\n                        //split up the denominator if in the form ax+b\r\n                        f = core.Utils.decompose_fn(den, s, true);\r\n                        //move the multiplier to the numerator\r\n                        fe = core.Utils.decompose_fn(_.expand(num.clone()), s, true);\r\n                        num.multiplier = num.multiplier.multiply(m);\r\n                        //store the parts in variables for easy recognition \r\n                        //check if in the form t^n where n = integer\r\n                        if((den.group === S || den.group === CB) && f.x.value === s && f.b.equals(0) && core.Utils.isInt(f.x.power)) {\r\n                            var fact, p;\r\n                            p = f.x.power - 1;\r\n                            fact = core.Math2.factorial(p);\r\n                            //  n!/s^(n-1)\r\n                            retval = _.divide(_.pow(t, new Symbol(p)), new Symbol(fact));\r\n                            //wrap it up\r\n                            finalize();\r\n                        }\r\n                        else if(den.group === CP && den_p.equals(1)) {\r\n                            if(f.x.group === core.groups.PL && core.Algebra.degree(den).equals(2)) {\r\n                                // Possibly in the form 1/(s^2+2*s+1)\r\n                                // Try factoring to get it in a more familiar form{\r\n                                // Apply inverse of F(s-a)\r\n                                var completed = core.Algebra.sqComplete(den, s);\r\n                                var u = core.Utils.getU(den);\r\n                                // Get a for the function above\r\n                                var a = core.Utils.decompose_fn(completed.a, s, true).b;\r\n                                var tf = __.LaPlace.inverse(_.parse(`1/((${u})^2+(${completed.c}))`), u, t);\r\n                                retval = _.multiply(tf, _.parse(`(${m})*e^(-(${a})*(${t}))`));\r\n                            }\r\n                            else {\r\n                                // a/(b*s-c) -> ae^(-bt)\r\n                                if(f.x.isLinear() && !num.contains(s)) {\r\n                                    t = _.divide(t, f.a.clone());\r\n\r\n                                    // Don't add factorial of one or zero\r\n                                    var p = den_p - 1;\r\n                                    var fact = p === 0 || p === 1 ? '1' : `(${den_p}-1)!`\r\n                                    retval = _.parse(format('(({0})^({3}-1)*e^(-(({2})*({0}))/({1})))/(({4})*({1})^({3}))', t, f.a, f.b, den_p, fact));\r\n                                    //wrap it up\r\n                                    finalize();\r\n                                }\r\n                                else {\r\n                                    if(f.x.group === S && f.x.power.equals(2)) {\r\n                                        if(!num.contains(s)) {\r\n                                            retval = _.parse(format('(({1})*sin((sqrt(({2})*({3}))*({0}))/({2})))/sqrt(({2})*({3}))', t, num, f.a, f.b));\r\n                                        }\r\n                                        // a*s/(b*s^2+c^2)\r\n                                        else {\r\n                                            var a = new Symbol(1);\r\n                                            if(num.group === CB) {\r\n                                                var new_num = new Symbol(1);\r\n                                                num.each(function (x) {\r\n                                                    if(x.contains(s))\r\n                                                        new_num = _.multiply(new_num, x);\r\n                                                    else\r\n                                                        a = _.multiply(a, x);\r\n                                                });\r\n                                                num = new_num;\r\n                                            }\r\n\r\n                                            //we need more information about the denominator to decide\r\n                                            var f2 = core.Utils.decompose_fn(num, s, true);\r\n                                            var fn1, fn2, a_has_sin, b_has_cos, a_has_cos, b_has_sin;\r\n                                            fn1 = f2.a;\r\n                                            fn2 = f2.b;\r\n                                            a_has_sin = fn1.containsFunction('sin');\r\n                                            a_has_cos = fn1.containsFunction('cos');\r\n                                            b_has_cos = fn2.containsFunction('cos');\r\n                                            b_has_sin = fn2.containsFunction('sin');\r\n                                            if(f2.x.value === s && f2.x.isLinear() && !((a_has_sin && b_has_cos) || (a_has_cos || b_has_sin))) {\r\n                                                retval = _.parse(format('(({1})*cos((sqrt(({2})*({3}))*({0}))/({2})))/({2})', t, f2.a, f.a, f.b));\r\n                                            }\r\n                                            else {\r\n                                                if(a_has_sin && b_has_cos) {\r\n                                                    var sin, cos;\r\n                                                    sin = fn1.findFunction('sin');\r\n                                                    cos = fn2.findFunction('cos');\r\n                                                    //who has the s?\r\n                                                    if(sin.args[0].equals(cos.args[0]) && !sin.args[0].contains(s)) {\r\n                                                        var b, c, d, e;\r\n                                                        b = _.divide(fn2, cos.toUnitMultiplier()).toString();\r\n                                                        c = sin.args[0].toString();\r\n                                                        d = f.b;\r\n                                                        e = _.divide(fn1, sin.toUnitMultiplier());\r\n                                                        exp = '(({1})*({2})*cos({3})*sin(sqrt({4})*({0})))/sqrt({4})+({1})*sin({3})*({5})*cos(sqrt({4})*({0}))';\r\n                                                        retval = _.parse(format(exp, t, a, b, c, d, e));\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else if(f.x.power.num && f.x.power.num.equals(3) && f.x.power.den.equals(2) && num.contains('sqrt(pi)') && !num.contains(s) && num.isLinear()) {\r\n                            var b = _.divide(num.clone(), _.parse('sqrt(pi)'));\r\n                            retval = _.parse(format('(2*({2})*sqrt({0}))/({1})', t, f.a, b, num));\r\n                        }\r\n                        else if(den_p.equals(2) && f.x.power.equals(2)) {\r\n                            var a, d, exp;\r\n                            if(!num.contains(s)) {\r\n                                a = _.divide(num, new Symbol(2));\r\n                                exp = '(({1})*sin((sqrt(({2})*({3}))*({0}))/({2})))/(({3})*sqrt(({2})*({3})))-(({1})*({0})*cos((sqrt(({2})*({3}))*({0}))/({2})))/(({2})*({3}))';\r\n                                retval = _.parse(format(exp, t, a, f.a, f.b));\r\n                            }\r\n                            else {\r\n                                // Decompose the numerator to check value of s\r\n                                f2 = core.Utils.decompose_fn(_.expand(num.clone()), s, true);\r\n                                if(f2.x.isComposite()) {\r\n                                    var s_terms = [];\r\n                                    //first collect the factors e.g. (a)(bx)(cx^2+d)\r\n                                    var symbols = num.collectSymbols(function (x) {\r\n                                        x = Symbol.unwrapPARENS(x);\r\n                                        var t = core.Utils.decompose_fn(x, s, true);\r\n                                        t.symbol = x;\r\n                                        return t;\r\n                                    }).\r\n                                            //then sort them by power hightest to lowest\r\n                                            sort(function (a, b) {\r\n                                                var p1, p2;\r\n                                                p1 = a.x.value !== s ? 0 : a.x.power;\r\n                                                p2 = b.x.value !== s ? 0 : b.x.power;\r\n                                                return p2 - p1;\r\n                                            });\r\n                                    a = new Symbol(-1);\r\n                                    // Grab only the ones which have s\r\n                                    for(var i = 0; i < symbols.length; i++) {\r\n                                        var fc = symbols[i];\r\n                                        if(fc.x.value === s)\r\n                                            s_terms.push(fc);\r\n                                        else\r\n                                            a = _.multiply(a, fc.symbol);\r\n                                    }\r\n                                    // The following 2 assumptions are made\r\n                                    // 1. since the numerator was factored above then each s_term has a unique power\r\n                                    // 2. because the terms are sorted by descending powers then the first item \r\n                                    //    has the highest power\r\n                                    // We can now check for the next type s(s^2-a^2)/(s^2+a^2)^2\r\n                                    if(s_terms[0].x.power.equals(2) && s_terms[1].x.power.equals(1) && s_terms[1].b.equals(0) && !s_terms[0].b.equals(0)) {\r\n                                        b = s_terms[0].a.negate();\r\n                                        exp = '-(({1})*({2})*({5})*({0})*sin((sqrt(({4})*({5}))*({0}))/({4})))/' +\r\n                                                '(2*({4})^2*sqrt(({4})*({5})))-(({1})*({3})*({0})*sin((sqrt(({4})*({5}))*({0}))/({4})))' +\r\n                                                '/(2*({4})*sqrt(({4})*({5})))+(({1})*({2})*cos((sqrt(({4})*({5}))*({0}))/({4})))/({4})^2';\r\n                                        retval = _.parse(format(exp, t, a, b, s_terms[0].b, f.a, f.b));\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    if(f2.x.isLinear()) {\r\n                                        a = _.divide(f2.a, new Symbol(2));\r\n                                        exp = '(({1})*({0})*sin((sqrt(({2})*({3}))*({0}))/({2})))/(({2})*sqrt(({2})*({3})))';\r\n                                        retval = _.parse(format(exp, t, a, f.a, f.b));\r\n                                    }\r\n                                    else if(f2.x.power.equals(2)) {\r\n                                        if(f2.b.equals(0)) {\r\n                                            a = _.divide(f2.a, new Symbol(2));\r\n                                            exp = '(({1})*sin((sqrt(({2})*({3}))*({0}))/({2})))/(({2})*sqrt(({2})*({3})))+(({1})*({0})*cos((sqrt(({2})*({3}))*({0}))/({2})))/({2})^2';\r\n                                            retval = _.parse(format(exp, t, a, f.a, f.b));\r\n                                        }\r\n                                        else {\r\n                                            a = _.divide(f2.a, new Symbol(2));\r\n                                            d = f2.b.negate();\r\n                                            exp = '-((({2})*({4})-2*({1})*({3}))*sin((sqrt(({2})*({3}))*({0}))/({2})))/(2*({2})*({3})*sqrt(({2})*({3})))+' +\r\n                                                    '(({4})*({0})*cos((sqrt(({2})*({3}))*({0}))/({2})))/(2*({2})*({3}))+(({1})*({0})*cos((sqrt(({2})*({3}))*({0}))/({2})))/({2})^2';\r\n                                            retval = _.parse(format(exp, t, a, f.a, f.b, d));\r\n\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else if(symbol.isComposite()) {\r\n                            // 1/(s+1)^2\r\n                            if(den_p.equals(2) && f.x.group === S) {\r\n                                retval = _.parse(`(${m})*(${t})*e^(-(${f.b})*(${t}))`);\r\n                            }\r\n                            else {\r\n                                retval = new Symbol(0);\r\n\r\n                                symbol.each(function (x) {\r\n                                    retval = _.add(retval, __.LaPlace.inverse(x, s_, t));\r\n                                }, true);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if(!retval) {\r\n                        retval = _.symfunction('ilt', [input_symbol, s_, t]);\r\n                    }\r\n\r\n                    return retval;\r\n                }, true);\r\n            }\r\n        },\r\n        Statistics: {\r\n            frequencyMap: function (arr) {\r\n                var map = {};\r\n                //get the frequency map\r\n                for(var i = 0, l = arr.length; i < l; i++) {\r\n                    var e = arr[i],\r\n                            key = e.toString();\r\n                    if(!map[key]) //default it to zero\r\n                        map[key] = 0;\r\n                    map[key]++; //increment\r\n                }\r\n                return map;\r\n            },\r\n            sort: function (arr) {\r\n                return arr.sort(function (a, b) {\r\n                    if(!a.isConstant() || !b.isConstant())\r\n                        _.error('Unable to sort! All values must be numeric');\r\n                    return a.multiplier.subtract(b.multiplier);\r\n                });\r\n            },\r\n            count: function (arr) {\r\n                return new Symbol(arr.length);\r\n            },\r\n            sum: function (arr, x_) {\r\n                var sum = new Symbol(0);\r\n                for(var i = 0, l = arr.length; i < l; i++) {\r\n                    var xi = arr[i].clone();\r\n                    if(x_) {\r\n                        sum = _.add(_.pow(_.subtract(xi, x_.clone()), new Symbol(2)), sum);\r\n                    }\r\n                    else\r\n                        sum = _.add(xi, sum);\r\n                }\r\n\r\n                return sum;\r\n            },\r\n            mean: function () {\r\n                var args = [].slice.call(arguments);\r\n                //handle arrays\r\n                if(isVector(args[0]))\r\n                    return __.Statistics.mean.apply(this, args[0].elements);\r\n                return  _.divide(__.Statistics.sum(args), __.Statistics.count(args));\r\n            },\r\n            median: function () {\r\n                var args = [].slice.call(arguments), retval;\r\n                //handle arrays\r\n                if(isVector(args[0]))\r\n                    return __.Statistics.median.apply(this, args[0].elements);\r\n                try {\r\n                    var sorted = __.Statistics.sort(args);\r\n                    var l = args.length;\r\n                    if(core.Utils.even(l)) {\r\n                        var mid = l / 2;\r\n                        retval = __.Statistics.mean(sorted[mid - 1], sorted[mid]);\r\n                    }\r\n                    else\r\n                        retval = sorted[Math.floor(l / 2)];\r\n                }\r\n                catch(e) {\r\n                    retval = _.symfunction('median', args);\r\n                }\r\n                return retval;\r\n            },\r\n            mode: function () {\r\n                var args = [].slice.call(arguments),\r\n                        retval;\r\n                //handle arrays\r\n                if(isVector(args[0]))\r\n                    return __.Statistics.mode.apply(this, args[0].elements);\r\n\r\n                var map = __.Statistics.frequencyMap(args);\r\n\r\n                //the mode of 1 item is that item as per issue #310 (verified by Happypig375). \r\n                if(core.Utils.keys(map).length === 1)\r\n                    retval = args[0];\r\n                else {\r\n                    //invert by arraning them according to their frequency\r\n                    var inverse = {};\r\n                    for(var x in map) {\r\n                        var freq = map[x];\r\n                        //check if it's in the inverse already\r\n                        if(!(freq in inverse))\r\n                            inverse[freq] = x;\r\n                        else {\r\n                            var e = inverse[freq];\r\n                            //if it's already an array then just add it\r\n                            if(isArray(e))\r\n                                e.push(x);\r\n                            //convert it to and array\r\n                            else\r\n                                inverse[freq] = [x, inverse[freq]];\r\n                        }\r\n                    }\r\n                    //the keys now represent the maxes. We want the max of those keys\r\n                    var max = inverse[Math.max.apply(null, core.Utils.keys(inverse))];\r\n                    //check it's an array. If it is then map over the results and convert \r\n                    //them to Symbol\r\n                    if(isArray(max)) {\r\n                        retval = _.symfunction('mode', max.sort());\r\n                    }\r\n                    else\r\n                        retval = _.parse(max);\r\n                }\r\n\r\n                return retval;\r\n            },\r\n            gVariance: function (k, args) {\r\n                var x_ = __.Statistics.mean.apply(__.Statistics, args),\r\n                        sum = __.Statistics.sum(args, x_);\r\n                return _.multiply(k, sum);\r\n            },\r\n            variance: function () {\r\n                var args = [].slice.call(arguments);\r\n                //handle arrays\r\n                if(isVector(args[0]))\r\n                    return __.Statistics.variance.apply(this, args[0].elements);\r\n                var k = _.divide(new Symbol(1), __.Statistics.count(args));\r\n                return __.Statistics.gVariance(k, args);\r\n            },\r\n            sampleVariance: function () {\r\n                var args = [].slice.call(arguments);\r\n                //handle arrays\r\n                if(isVector(args[0]))\r\n                    return __.Statistics.sampleVariance.apply(this, args[0].elements);\r\n\r\n                var k = _.divide(new Symbol(1), _.subtract(__.Statistics.count(args), new Symbol(1)));\r\n                return __.Statistics.gVariance(k, args);\r\n            },\r\n            standardDeviation: function () {\r\n                var args = [].slice.call(arguments);\r\n                //handle arrays\r\n                if(isVector(args[0]))\r\n                    return __.Statistics.standardDeviation.apply(this, args[0].elements);\r\n                return _.pow(__.Statistics.variance.apply(__.Statistics, args), new Symbol(1 / 2));\r\n            },\r\n            sampleStandardDeviation: function () {\r\n                var args = [].slice.call(arguments);\r\n                //handle arrays\r\n                if(isVector(args[0]))\r\n                    return __.Statistics.sampleStandardDeviation.apply(this, args[0].elements);\r\n                return _.pow(__.Statistics.sampleVariance.apply(__.Statistics, args), new Symbol(1 / 2));\r\n            },\r\n            zScore: function (x, mean, stdev) {\r\n                return _.divide(_.subtract(x, mean), stdev);\r\n            }\r\n        },\r\n        Units: {\r\n            table: {\r\n                foot: '12 inch',\r\n                meter: '100 cm',\r\n                decimeter: '10 cm',\r\n\r\n            }\r\n        }\r\n    };\r\n\r\n    nerdamer.register([\r\n        {\r\n            name: 'laplace',\r\n            visible: true,\r\n            numargs: 3,\r\n            build: function () {\r\n                return __.LaPlace.transform;\r\n            }\r\n        },\r\n        {\r\n            name: 'ilt',\r\n            visible: true,\r\n            numargs: 3,\r\n            build: function () {\r\n                return __.LaPlace.inverse;\r\n            }\r\n        },\r\n        //statistical\r\n        {\r\n            name: 'mean',\r\n            visible: true,\r\n            numargs: -1,\r\n            build: function () {\r\n                return __.Statistics.mean;\r\n            }\r\n        },\r\n        {\r\n            name: 'median',\r\n            visible: true,\r\n            numargs: -1,\r\n            build: function () {\r\n                return __.Statistics.median;\r\n            }\r\n        },\r\n        {\r\n            name: 'mode',\r\n            visible: true,\r\n            numargs: -1,\r\n            build: function () {\r\n                return __.Statistics.mode;\r\n            }\r\n        },\r\n        {\r\n            name: 'smpvar',\r\n            visible: true,\r\n            numargs: -1,\r\n            build: function () {\r\n                return __.Statistics.sampleVariance;\r\n            }\r\n        },\r\n        {\r\n            name: 'variance',\r\n            visible: true,\r\n            numargs: -1,\r\n            build: function () {\r\n                return __.Statistics.variance;\r\n            }\r\n        },\r\n        {\r\n            name: 'smpstdev',\r\n            visible: true,\r\n            numargs: -1,\r\n            build: function () {\r\n                return __.Statistics.sampleStandardDeviation;\r\n            }\r\n        },\r\n        {\r\n            name: 'stdev',\r\n            visible: true,\r\n            numargs: -1,\r\n            build: function () {\r\n                return __.Statistics.standardDeviation;\r\n            }\r\n        },\r\n        {\r\n            name: 'zscore',\r\n            visible: true,\r\n            numargs: 3,\r\n            build: function () {\r\n                return __.Statistics.zScore;\r\n            }\r\n        }\r\n    ]);\r\n\r\n    //link registered functions externally\r\n    nerdamer.updateAPI();\r\n}());\r\n\r\n// Added for all.min.js\r\nif((typeof module) !== 'undefined') {\r\n    module.exports = nerdamer;\r\n};","/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * Source : https://github.com/jiggzson/nerdamer\r\n * Can be used to load all add-ons with one require\r\n */\r\n\r\nvar nerdamer = require('./nerdamer.core.js');\r\nrequire('./Algebra.js');\r\nrequire('./Calculus.js');\r\nrequire('./Solve.js');\r\nrequire('./Extra.js');\r\n\r\n//export nerdamer\r\nmodule.exports = nerdamer;\r\n","// https://stackoverflow.com/questions/610406/javascript-equivalent-to-printf-string-format\n\nexport function patch_unicorn() {\n    String.prototype.formatUnicorn = String.prototype.formatUnicorn ||\n        function () {\n            \"use strict\";\n            let str = this.toString();\n            if (arguments.length) {\n                const t = typeof arguments[0];\n                let key;\n                const args = (\"string\" === t || \"number\" === t) ?\n                    Array.prototype.slice.call(arguments)\n                    : arguments[0];\n\n                for (key in args) {\n                    str = str.replace(new RegExp(\"\\\\{\" + key + \"\\\\}\", \"gi\"), args[key]);\n                }\n            }\n\n            return str;\n        };\n}","import * as _nerdamer from 'nerdamer/all';\nimport {patch_unicorn} from \"./stackoverflow\";\n\npatch_unicorn(); // add string.formatUnicorn\n\nexport let nerdamer = _nerdamer;\n\nexport function round(n, d) {\n    const f = 10 ** d;\n    return Math.round(n * f) / f;\n}\n\nexport function float(str) {\n    return +str;\n}\n\nexport function int(str){\n    return Math.floor(float(str))\n}\n\n// skip 'e' and 'i'!\nconst letters = ['a', 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n\nfunction empty_string_to_undefined(val) {\n    return val === '' ? undefined : val;\n}\n\n/**\n *\n * @param {Object} args\n * @param {array} rules\n * @param {int} r - rounding to n digits\n * @return {*}\n */\nexport function magic(args, rules, r = 2) {\n\n    let idx = 0;\n\n    let reverse = {};\n\n    for (let [key, value] of Object.entries(args)) {\n        // replace undefined with a letter\n        args[key] = empty_string_to_undefined(value) ?? letters[idx++];\n\n        // includes ignorable 'value's, but useful 'letter's\n        reverse[args[key]] = key;\n    }\n\n    let equations = rules.map(rule => rule.formatUnicorn(args));\n\n    let solutions = nerdamer.solveEquations(equations);\n\n    for (let [key, value] of solutions) {\n        args[reverse[key]] = round(value, r);\n    }\n\n    // args is now modified.\n    return args;\n}\n\nexport async function amagic(args, rules, r = 2) {\n    return magic(args, rules, r);\n}","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","export { identity as linear } from '../internal/index.mjs';\n\n/*\nAdapted from https://github.com/mattdesl\nDistributed under MIT License https://github.com/mattdesl/eases/blob/master/LICENSE.md\n*/\nfunction backInOut(t) {\n    const s = 1.70158 * 1.525;\n    if ((t *= 2) < 1)\n        return 0.5 * (t * t * ((s + 1) * t - s));\n    return 0.5 * ((t -= 2) * t * ((s + 1) * t + s) + 2);\n}\nfunction backIn(t) {\n    const s = 1.70158;\n    return t * t * ((s + 1) * t - s);\n}\nfunction backOut(t) {\n    const s = 1.70158;\n    return --t * t * ((s + 1) * t + s) + 1;\n}\nfunction bounceOut(t) {\n    const a = 4.0 / 11.0;\n    const b = 8.0 / 11.0;\n    const c = 9.0 / 10.0;\n    const ca = 4356.0 / 361.0;\n    const cb = 35442.0 / 1805.0;\n    const cc = 16061.0 / 1805.0;\n    const t2 = t * t;\n    return t < a\n        ? 7.5625 * t2\n        : t < b\n            ? 9.075 * t2 - 9.9 * t + 3.4\n            : t < c\n                ? ca * t2 - cb * t + cc\n                : 10.8 * t * t - 20.52 * t + 10.72;\n}\nfunction bounceInOut(t) {\n    return t < 0.5\n        ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0))\n        : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5;\n}\nfunction bounceIn(t) {\n    return 1.0 - bounceOut(1.0 - t);\n}\nfunction circInOut(t) {\n    if ((t *= 2) < 1)\n        return -0.5 * (Math.sqrt(1 - t * t) - 1);\n    return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n}\nfunction circIn(t) {\n    return 1.0 - Math.sqrt(1.0 - t * t);\n}\nfunction circOut(t) {\n    return Math.sqrt(1 - --t * t);\n}\nfunction cubicInOut(t) {\n    return t < 0.5 ? 4.0 * t * t * t : 0.5 * Math.pow(2.0 * t - 2.0, 3.0) + 1.0;\n}\nfunction cubicIn(t) {\n    return t * t * t;\n}\nfunction cubicOut(t) {\n    const f = t - 1.0;\n    return f * f * f + 1.0;\n}\nfunction elasticInOut(t) {\n    return t < 0.5\n        ? 0.5 *\n            Math.sin(((+13.0 * Math.PI) / 2) * 2.0 * t) *\n            Math.pow(2.0, 10.0 * (2.0 * t - 1.0))\n        : 0.5 *\n            Math.sin(((-13.0 * Math.PI) / 2) * (2.0 * t - 1.0 + 1.0)) *\n            Math.pow(2.0, -10.0 * (2.0 * t - 1.0)) +\n            1.0;\n}\nfunction elasticIn(t) {\n    return Math.sin((13.0 * t * Math.PI) / 2) * Math.pow(2.0, 10.0 * (t - 1.0));\n}\nfunction elasticOut(t) {\n    return (Math.sin((-13.0 * (t + 1.0) * Math.PI) / 2) * Math.pow(2.0, -10.0 * t) + 1.0);\n}\nfunction expoInOut(t) {\n    return t === 0.0 || t === 1.0\n        ? t\n        : t < 0.5\n            ? +0.5 * Math.pow(2.0, 20.0 * t - 10.0)\n            : -0.5 * Math.pow(2.0, 10.0 - t * 20.0) + 1.0;\n}\nfunction expoIn(t) {\n    return t === 0.0 ? t : Math.pow(2.0, 10.0 * (t - 1.0));\n}\nfunction expoOut(t) {\n    return t === 1.0 ? t : 1.0 - Math.pow(2.0, -10.0 * t);\n}\nfunction quadInOut(t) {\n    t /= 0.5;\n    if (t < 1)\n        return 0.5 * t * t;\n    t--;\n    return -0.5 * (t * (t - 2) - 1);\n}\nfunction quadIn(t) {\n    return t * t;\n}\nfunction quadOut(t) {\n    return -t * (t - 2.0);\n}\nfunction quartInOut(t) {\n    return t < 0.5\n        ? +8.0 * Math.pow(t, 4.0)\n        : -8.0 * Math.pow(t - 1.0, 4.0) + 1.0;\n}\nfunction quartIn(t) {\n    return Math.pow(t, 4.0);\n}\nfunction quartOut(t) {\n    return Math.pow(t - 1.0, 3.0) * (1.0 - t) + 1.0;\n}\nfunction quintInOut(t) {\n    if ((t *= 2) < 1)\n        return 0.5 * t * t * t * t * t;\n    return 0.5 * ((t -= 2) * t * t * t * t + 2);\n}\nfunction quintIn(t) {\n    return t * t * t * t * t;\n}\nfunction quintOut(t) {\n    return --t * t * t * t * t + 1;\n}\nfunction sineInOut(t) {\n    return -0.5 * (Math.cos(Math.PI * t) - 1);\n}\nfunction sineIn(t) {\n    const v = Math.cos(t * Math.PI * 0.5);\n    if (Math.abs(v) < 1e-14)\n        return 1;\n    else\n        return 1 - v;\n}\nfunction sineOut(t) {\n    return Math.sin((t * Math.PI) / 2);\n}\n\nexport { backIn, backInOut, backOut, bounceIn, bounceInOut, bounceOut, circIn, circInOut, circOut, cubicIn, cubicInOut, cubicOut, elasticIn, elasticInOut, elasticOut, expoIn, expoInOut, expoOut, quadIn, quadInOut, quadOut, quartIn, quartInOut, quartOut, quintIn, quintInOut, quintOut, sineIn, sineInOut, sineOut };\n","import { writable } from '../store/index.mjs';\nimport { now, loop, assign } from '../internal/index.mjs';\nimport { linear } from '../easing/index.mjs';\n\nfunction is_date(obj) {\n    return Object.prototype.toString.call(obj) === '[object Date]';\n}\n\nfunction tick_spring(ctx, last_value, current_value, target_value) {\n    if (typeof current_value === 'number' || is_date(current_value)) {\n        // @ts-ignore\n        const delta = target_value - current_value;\n        // @ts-ignore\n        const velocity = (current_value - last_value) / (ctx.dt || 1 / 60); // guard div by 0\n        const spring = ctx.opts.stiffness * delta;\n        const damper = ctx.opts.damping * velocity;\n        const acceleration = (spring - damper) * ctx.inv_mass;\n        const d = (velocity + acceleration) * ctx.dt;\n        if (Math.abs(d) < ctx.opts.precision && Math.abs(delta) < ctx.opts.precision) {\n            return target_value; // settled\n        }\n        else {\n            ctx.settled = false; // signal loop to keep ticking\n            // @ts-ignore\n            return is_date(current_value) ?\n                new Date(current_value.getTime() + d) : current_value + d;\n        }\n    }\n    else if (Array.isArray(current_value)) {\n        // @ts-ignore\n        return current_value.map((_, i) => tick_spring(ctx, last_value[i], current_value[i], target_value[i]));\n    }\n    else if (typeof current_value === 'object') {\n        const next_value = {};\n        for (const k in current_value) {\n            // @ts-ignore\n            next_value[k] = tick_spring(ctx, last_value[k], current_value[k], target_value[k]);\n        }\n        // @ts-ignore\n        return next_value;\n    }\n    else {\n        throw new Error(`Cannot spring ${typeof current_value} values`);\n    }\n}\nfunction spring(value, opts = {}) {\n    const store = writable(value);\n    const { stiffness = 0.15, damping = 0.8, precision = 0.01 } = opts;\n    let last_time;\n    let task;\n    let current_token;\n    let last_value = value;\n    let target_value = value;\n    let inv_mass = 1;\n    let inv_mass_recovery_rate = 0;\n    let cancel_task = false;\n    function set(new_value, opts = {}) {\n        target_value = new_value;\n        const token = current_token = {};\n        if (value == null || opts.hard || (spring.stiffness >= 1 && spring.damping >= 1)) {\n            cancel_task = true; // cancel any running animation\n            last_time = now();\n            last_value = new_value;\n            store.set(value = target_value);\n            return Promise.resolve();\n        }\n        else if (opts.soft) {\n            const rate = opts.soft === true ? .5 : +opts.soft;\n            inv_mass_recovery_rate = 1 / (rate * 60);\n            inv_mass = 0; // infinite mass, unaffected by spring forces\n        }\n        if (!task) {\n            last_time = now();\n            cancel_task = false;\n            task = loop(now => {\n                if (cancel_task) {\n                    cancel_task = false;\n                    task = null;\n                    return false;\n                }\n                inv_mass = Math.min(inv_mass + inv_mass_recovery_rate, 1);\n                const ctx = {\n                    inv_mass,\n                    opts: spring,\n                    settled: true,\n                    dt: (now - last_time) * 60 / 1000\n                };\n                const next_value = tick_spring(ctx, last_value, value, target_value);\n                last_time = now;\n                last_value = value;\n                store.set(value = next_value);\n                if (ctx.settled) {\n                    task = null;\n                }\n                return !ctx.settled;\n            });\n        }\n        return new Promise(fulfil => {\n            task.promise.then(() => {\n                if (token === current_token)\n                    fulfil();\n            });\n        });\n    }\n    const spring = {\n        set,\n        update: (fn, opts) => set(fn(target_value, value), opts),\n        subscribe: store.subscribe,\n        stiffness,\n        damping,\n        precision\n    };\n    return spring;\n}\n\nfunction get_interpolator(a, b) {\n    if (a === b || a !== a)\n        return () => a;\n    const type = typeof a;\n    if (type !== typeof b || Array.isArray(a) !== Array.isArray(b)) {\n        throw new Error('Cannot interpolate values of different type');\n    }\n    if (Array.isArray(a)) {\n        const arr = b.map((bi, i) => {\n            return get_interpolator(a[i], bi);\n        });\n        return t => arr.map(fn => fn(t));\n    }\n    if (type === 'object') {\n        if (!a || !b)\n            throw new Error('Object cannot be null');\n        if (is_date(a) && is_date(b)) {\n            a = a.getTime();\n            b = b.getTime();\n            const delta = b - a;\n            return t => new Date(a + t * delta);\n        }\n        const keys = Object.keys(b);\n        const interpolators = {};\n        keys.forEach(key => {\n            interpolators[key] = get_interpolator(a[key], b[key]);\n        });\n        return t => {\n            const result = {};\n            keys.forEach(key => {\n                result[key] = interpolators[key](t);\n            });\n            return result;\n        };\n    }\n    if (type === 'number') {\n        const delta = b - a;\n        return t => a + t * delta;\n    }\n    throw new Error(`Cannot interpolate ${type} values`);\n}\nfunction tweened(value, defaults = {}) {\n    const store = writable(value);\n    let task;\n    let target_value = value;\n    function set(new_value, opts) {\n        if (value == null) {\n            store.set(value = new_value);\n            return Promise.resolve();\n        }\n        target_value = new_value;\n        let previous_task = task;\n        let started = false;\n        let { delay = 0, duration = 400, easing = linear, interpolate = get_interpolator } = assign(assign({}, defaults), opts);\n        if (duration === 0) {\n            if (previous_task) {\n                previous_task.abort();\n                previous_task = null;\n            }\n            store.set(value = target_value);\n            return Promise.resolve();\n        }\n        const start = now() + delay;\n        let fn;\n        task = loop(now => {\n            if (now < start)\n                return true;\n            if (!started) {\n                fn = interpolate(value, new_value);\n                if (typeof duration === 'function')\n                    duration = duration(value, new_value);\n                started = true;\n            }\n            if (previous_task) {\n                previous_task.abort();\n                previous_task = null;\n            }\n            const elapsed = now - start;\n            if (elapsed > duration) {\n                store.set(value = new_value);\n                return false;\n            }\n            // @ts-ignore\n            store.set(value = fn(easing(elapsed / duration)));\n            return true;\n        });\n        return task.promise;\n    }\n    return {\n        set,\n        update: (fn, opts) => set(fn(target_value, value), opts),\n        subscribe: store.subscribe\n    };\n}\n\nexport { spring, tweened };\n","<script>\n    import {debouncer} from \"./debounce\";\n    import {tweened} from \"svelte/motion\";\n    import {float} from \"./magic.js\";\n    import {expoOut} from \"svelte/easing\";\n    import {round} from \"./magic\";\n\n    export let input_value;\n    export let calculated_value;\n    export let name;\n    export let grouped = false;\n\n    let _input_value = input_value;\n\n\n    const debounce = debouncer(200);\n\n    $: {\n        debounce(_ => {\n            input_value = _input_value;\n        });\n    }\n\n    let animated = tweened(0, {\n        duration: 1000,\n        easing: expoOut,\n    });\n\n    $: {\n        animated.set(float(calculated_value));\n    }\n</script>\n\n<style>\n    div.grouped {\n        display: inline-block;\n    }\n\n    input {\n        color: darkred;\n    }\n</style>\n\n<div class:grouped={grouped}>\n    <label for=\"{name}\">{name}</label>\n    <!---->\n    <input id=\"{name}\"\n           type=\"number\"\n           bind:value={_input_value}\n           placeholder=\"{round($animated, 2)}\">\n</div>","export function debouncer(duration) {\n        let timer;\n\n        function debounce(fn) {\n            clearTimeout(timer);\n            timer = setTimeout(fn, duration);\n        }\n\n        return debounce;\n    }","<script>\n    import {magic, nerdamer} from './magic';\n    import Field from \"./Field.svelte\";\n    import {spring} from \"svelte/motion\";\n\n    /**\n     * @param question\n     * @return {nerdamer.Expression}\n     */\n    function solve(question) {\n        return nerdamer.solve(question, 'x');\n    }\n\n    let feedback = '';\n\n\n    let rules = [];\n\n    rules.push(`{dag} = {uur} * {uren_per_dag}`);\n    rules.push(`{uren_per_week} = {uren_per_dag} * {dagen_per_week}`);\n    rules.push(`{week} = {dag} * {dagen_per_week}`);\n\n    // 174 uur ~= avg fulltime maand ; uren_per_week / 40 * 174 = part time maand\n    rules.push(`{maand} = {uur} * (174 / 40 * {uren_per_week})`);\n    // rules.push(`{naive_maand} = {week} * 4`)\n    rules.push(`{jaar} = {maand} * 12`); // 12 maanden jwz\n\n    let uren_per_dag, _uren_per_dag, dagen_per_week, _dagen_per_week, uren_per_week, _uren_per_week;\n\n    let uur, dag, week, maand, jaar;\n    let _uur, _dag, _week, _maand, _jaar;\n\n    // initial:\n    // uur = 15;\n    uren_per_dag = 8;\n    dagen_per_week = 5;\n    uren_per_week = undefined;\n\n    uur = 15;\n\n    $: { // update on each var change\n        let args = {\n            uren_per_dag,\n            dagen_per_week,\n            uren_per_week,\n\n            uur,\n            dag,\n            week,\n            maand,\n            jaar,\n        };\n        try {\n            feedback = 'calculating...';\n            console.log(args);\n            magic(args, rules);\n\n            _uur = args.uur;\n            _dag = args.dag;\n            _week = args.week;\n            _maand = args.maand;\n            _jaar = args.jaar;\n\n            _uren_per_dag = args.uren_per_dag;\n            _uren_per_week = args.uren_per_week;\n            _dagen_per_week = args.dagen_per_week;\n\n            console.table(args);\n            feedback = '';\n        } catch (e) {\n            feedback = e;\n        }\n\n    }\n\n</script>\n\n<style>\n    p {\n        color: darkred;\n    }\n</style>\n\n<div>\n    <Field grouped=\"1\" bind:input_value={uren_per_dag} bind:calculated_value={_uren_per_dag} name=\"Uur per dag\" />\n    <Field grouped=\"1\" bind:input_value={uren_per_week} bind:calculated_value={_uren_per_week} name=\"Uur per week\" />\n    <Field grouped=\"1\" bind:input_value={dagen_per_week} bind:calculated_value={_dagen_per_week}\n           name=\"Dagen per week\" />\n\n    <hr />\n\n    <Field grouped=\"1\" bind:input_value={uur} bind:calculated_value={_uur} name=\"Per Uur\" />\n    <!--<Field bind:input_value={dag} bind:calculated_value={_dag} name=\"Per Dag\" />-->\n    <!--<Field bind:input_value={week} bind:calculated_value={_week} name=\"Per Week\" />-->\n    <Field grouped=\"1\" bind:input_value={maand} bind:calculated_value={_maand} name=\"Per Maand\" />\n    <Field grouped=\"1\" bind:input_value={jaar} bind:calculated_value={_jaar} name=\"Per Jaar\" />\n</div>\n\n<!-- todo : meedere kolommen en dan optellen-->\n\n<p>{feedback}</p>","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {}\n});\n\nexport default app;"],"names":["noop","identity","x","assign","tar","src","k","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","component_subscribe","component","store","callback","$$","on_destroy","push","callbacks","unsub","subscribe","unsubscribe","is_client","window","now","performance","Date","raf","cb","requestAnimationFrame","tasks","Set","run_tasks","task","c","delete","f","size","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","text","data","createTextNode","space","attr","attribute","value","removeAttribute","getAttribute","setAttribute","to_number","set_data","wholeText","set_input_value","input","toggle_class","toggle","classList","current_component","set_current_component","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","add_flush_callback","seen_callbacks","flushidx","flush","saved_component","length","update","pop","i","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","transition_in","block","local","transition_out","o","outros","d","bind","index","props","undefined","bound","create_component","mount_component","customElement","on_mount","m","new_on_destroy","map","filter","destroy_component","detaching","make_dirty","then","fill","init","options","instance","create_fragment","not_equal","append_styles","parent_component","on_disconnect","context","Map","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","type","indexOf","splice","$set","$$props","obj","$$set","keys","bigInt","nerdamer","imports","_","Parser","bigDec","set","precision","Groups","PRIMES","CUSTOM_OPERATORS","Settings","callPeekers","init_primes","exclude","suppress_errors","PARSE2NUMBER","SAFE","IMAGINARY","FUNCTION_MODULES","Math","ALLOW_CHARS","USE_MULTICHARACTER_VARS","POWER_OPERATOR","VALIDATION_REGEX","IMPLIED_MULTIPLICATION_REGEX","ALIASES","POSITIVE_MULTIPLIERS","CACHE","SILENCE_WARNINGS","PRECISION","EXPRESSION_DECP","DEFAULT_DECP","VECTOR","PARENTHESIS","SQRT","ABS","FACTORIAL","DOUBLEFACTORIAL","LONG_PI","LONG_E","PI","E","LOG","LOG10","LOG10_LATEX","MAX_EXP","SCIENTIFIC_MAX_DECIMAL_PLACES","SCIENTIFIC_IGNORE_ZERO_EXPONENTS","roots","j","nthpow","pow","N","P","S","EX","FN","PL","CB","CP","CONST_HASH","EXPRESSIONS","VARS","RESERVED","WARNINGS","err","msg","ErrorObj","Error","customError","message","error","stack","prototype","isReserved","allSame","arr","last","equals","warn","SHOW_WARNINGS","console","validateName","typ","test","InvalidVariableNameError","scientificToDecimal","num","nsign","sign","abs","parts","String","toLowerCase","split","e","coeff_array","slice","zero","join","dec","isPrime","n","q","floor","sqrt","isNumber","isFraction","isSymbol","multiplier","toDecimal","Symbol","isExpression","Expression","variables","poly","vars","isNaN","group","prevgroup","previousGroup","power","symbols","firstObject","args","sort","separate","symbol","expand","key","sym","clone","each","isConstant","fname","isVector","Vector","isMatrix","Matrix","isSet","isNumericSymbol","isArray","isInt","toString","isNegative","lessThan","stringify","inBrackets","str","format","call","arguments","shift","new_str","replace","match","arg","both","setFunction","params_array","body","parse","functions","mapped_function","params","arrayMin","min","apply","decompose_fn","wrt","as_obj","ax","t","stripVar","subtract","divide","nround","s","Number","MAX_VALUE","round","hasOwnProperty","even","evenFraction","arrayUnique","item","removeDuplicates","condition","conditionType","seen","temp","reserveNames","remove","indexOrKey","result","setting","opt","current_setting","retval","arguments2Array","evaluate","convertToVector","vector","elements","generatePrimes","upto","allNumbers","allConstants","isPi","isE","mix","isComposite","isLinear","y","term","multiply","expanded","DivisionByZero","ParseError","UndefinedError","OutOfFunctionDomainError","MaximumIterationsReached","NerdamerTypeError","ParityError","OperatorError","OutOfRangeError","DimensionError","ValueLimitExceededError","NerdamerValueError","SolveError","InfiniteLoopError","UnexpectedTokenError","exceptions","Math2","csc","sin","sec","cos","cot","tan","acsc","asin","asec","acos","acot","atan","erf","exp","diff","h","median","values","half","fromContinued","contd","fractions","whole","continuedFraction","w","absn","ni","done","EPSILON","idx","bigpow","Frac","isInteger","den","nthroot","gamma","z","C","g","bigfactorial","times","bigLog","quick","r","invert","factorial","is_int","NaN","dfactorial","GCD","QGCD","gcd","negate","LCM","factor","ifactors","ifactor","factors","updateHash","sfactor","prime","lt","safety","rho","xf","cz","mod","minus","sm","boxfactor","max","fib","integer_part","simpson","step","get_value","side","v","dx","xi","num_integrate","tol","maxdepth","adsimp","fa","fm","fb","V0","depth","state","nanEncountered","f1","f2","sl","sr","s2","V1","V2","maxDepthCount","integrate","Ci","sum","n2","log","Si","Ei","Infinity","Shi","Chi","cosh","Li","gamma_incomplete","rect","sinc","tri","A","dk","dk0","d0","xk","powb","dk_dec","gte","xn","ld","same_delta","delta","decimal","option","useGroup","decp","asHash","wrapCondition","asDecimal","valueOf","frac","exec","negative","quotient","digits","passed","numer","denom","divmod","remainder","operator","Scientific","om","collectSymbols","txt","pg","pwg","E_TO_EXP","charAt","cv","parens","primeFactors","startsWith","substr","isScientific","fromScientific","convert","simple","Fraction","quickConversion","isInfinity","imaginary","bin","preprocessors","names","actions","Slice","upper","lower","start","end","Collection","Token","node_type","column","OPERATOR","operators","FUNCTION","precedence","MAX_PRECEDENCE","leftAssoc","getItems","pretty_print","collection","is_prefix","VARIABLE_OR_LITERAL","UNIT","KEYWORD","classes","complex","prec","re","im","sinh","removeDen","sq","squared","fromArray","infinity","tanh","sech","csch","coth","acosh","asinh","atanh","asech","acsch","acoth","realpart","imagpart","hyp","phi","USE_BIG","atan2","symfunction","greaterThan","trig","isImaginary","getQuadrant","dividedBy","gt","trigh","units","action","prefix","postfix","operation","overloaded","overloadAction","overloadLeftAssoc","plus","vectorFn","brackets","id","is_open","is_close","maps_to","arccos","arcsin","arctan","log10","radians","degrees","SYMBOLIC_MIN_MAX","symMinMax","ceil","trunc","fact","continued_fraction","_symbol","cf","scientific","sigfigs","pfactor","matrix","imatrix","cbrt","expand_denominator","expand_functions","mat","determinant","cols","rows","transpose","dot","vec1","vec2","cross","vecget","vecset","vectrim","tolerance","matget","matset","matgetrow","matsetrow","M","matgetcol","col_index","matsetcol","col","rationalize","IF","is_in","l2","conjugate","polarform","theta","toPolarFormArray","rectform","original","getDenom","getNum","getval","aval","bval","union","set1","set2","contains","intersection","difference","intersects","is_subset","print","ostr","override","which","with_what","restore","what","extend","force_call","fn_name","callfunction","allowed_args","fn_settings","num_allowed_args","is_array","min_args","max_args","num_args","error_msg","numericArgs","fmodules","fmodule","findFunction","bigConvert","operator_filter_regex","RegExp","setOperator","postif","getOperator","aliasOperator","getOperators","getBrackets","Node","token","left","right","initConstants","CONSTANTS","peekers","pre_operator","post_operator","pre_function","post_function","tokenize","trim","regex","L","lpos","tokens","scopes","open_brackets","has_space","addScope","scope_type","new_scope","goUp","get_operator_str","start_at","substring","chunkify","operator_str","_operators","ch","add_token","at","add_function","set_last_position","position","last_token_is_numeric","bracket","pair","prev","nxt","is_operator","toRPN","output","prefixes","collapse","destination","next","previous","next_is_operator","last_on_stack","parseRPN","rpn","substitutions","pi","Q","is_comma","fromSet","ans","parent","fn_args","getter","il","subbed","isUnit","toHTML","indent","tab","repeat","html","tree","location","group1","group2","before","g1","g2","prepare_expression","toObject","expression_string","objectify","isConversion","chunkAtCommas","chunks","rem_brackets","ms","distributeMultiplier","toUnitMultiplier","V","symbol1","symbol2","retnum","retden","is_negative","img","setPower","qa","tw","nn","unwrapPARENS","toLinear","rem","isOne","asbig","numVal","base","log_sym","log_base","img_part","sIsConstant","toExponential","isFinite","rank","testSQRT","absEquals","toTeX","expression_or_obj","decimals","TeX","cdot","narr","next_is_array","next_is_minus","unshift","before_last","remove_redundant_powers","nobj","LaTeX","braces","expr","argSplit","latex","clean","new_num","new_den","getFunction","addPreprocessor","order","shift_cells","PreprocessorError","getPreprocessors","removePreprocessor","subs","aIsSymbol","bIsSymbol","unit","Unit","aneg","bneg","inf","ap","bp","h1","h2","powEQ","v1","v2","aIsComposite","bIsComposite","PN","PNEQ","valEQ","attach","shell","canIterate","bothPL","bIsMatrix","eachElement","row","dimensions","toFixed","bnum","bden","a_pow","a_multiplier","ONN","u","distributeExponent","combine","bm","p1","p2","isSymbolP1","isSymbolP2","toEX","logV","n1","ndiv","ddiv","ps","isMatrixB","isMatrixA","isVectorA","isVectorB","raised","aIsZero","bIsZero","nre","nim","bIsConstant","aIsConstant","bIsInt","multiplyPower","sgn","aa","_a","_b","a1","log_a","b1","c1","neg_num","nr","tn","evenr","evenp","evennp","_result","fct","testPow","isEX","pt","IGNORE_E","comma","percent","function_assign","bool2Symbol","eq","lte","LOG10E","getExpression","expression_number","asType","expression","text_","first_arg","buildFunction","Build","build","isPolynomial","isPoly","sub","for_symbol","otype","numerator","denominator","hasFunction","containsFunction","variable","coeff","exponent","removeLeadingZeroes","removeTrailingZeroes","dot_location","zeroes","leadingZeroes","wholes","copy","rounded","next_two","ed","is_neg","isFrac","m_dc","simplify","neg","qcompare","isnegative","lcm","div","unwrapSQRT","all","getNth","isToNth","nthPower","nthMultiplier","isSquare","isCube","isSimple","powSimp","powers","mfactors","out_","in_","xt","multivariate","exclude_x","toArray","hasFunc","fn_group","same_pow","a_is_unit_multiplier","find","needle","nargs","isMonomial","isSQRT","check_all","check_symbols","retainSign","isSymbolic","isInverse","properties","keepSign","deep","power_only","is_one","cp","isImgSymbol","keyForGroup","existing","hash","contents","is_parens","sort_fn","expand_symbol","collected","concat","isCombination","opts","qc","fullConversion","nparts","stripSign","cparts","d1","d2","parser","keep","LaTeXArray","rowTeX","m_array","v_array","formatFrac","p_array","greek","alpha","beta","epsilon","zeta","eta","iota","kappa","lambda","mu","nu","omnikron","sigma","tau","upsilon","chi","psi","omega","Gamma","Delta","Epsilon","Theta","Lambda","Xi","Pi","Sigma","Phi","Psi","Omega","ker","limsup","deg","lg","ln","Pr","sup","det","hom","lim","LN","dim","liminf","inverted","formatSubscripts","t_varray","den_map","num_map","num_c","den_c","setBrackets","container","counter","laTex","combine_power","isBracketed","formatP","tp","merge","mn","md","vn","vd","top","bottom","glue","is_pow","square","brace","angle","filterTokens","filtered","next_token","raw_tokens","infty","parse_next","get","items","lw","rl","el","arrayPrefill","val","custom","modulus","eql","toUnitVector","angleFrom","mod1","mod2","product","theta_val","isParallelTo","isAntiparallelTo","isPerpendicularTo","B","magnitude","tex","F","zeroMatrix","raw_values","raw","nc","toRightTriangular","isSingular","augment","np","els","divisor","new_element","ki","kp","inverse_elements","nel","nj","canMultiplyFromLeft","sameSize","MM","kj","toVector","newline","to_decimal","row_tex","_union","_intersection","dependencies","_rename","reformat","deps","getProperName","compileDependencies","dep_string","replacements","components","getArgsDeps","arg_array","supplements","ftext","xports","ftext_complex","cc","ft","ftext_function","bn","f_array","alias","Function","LOG_FNS","Utils","allNumeric","arrayAddSlices","slices","arrayClone","new_array","arrayMax","arrayEqual","arr1","arr2","arrayGetVariables","arraySum","toNumber","clearU","indx","comboSort","combined","na","nb","compare","sym1","sym2","comparison","scope","random","customType","fillHoles","getCoeffs","info","coeffs","getU","importFunctions","isVariableSymbol","knownVariable","nroots","_roots","range","sameSign","stringReplace","to","with_str","groups","PARSER","libExports","fndec","convertToLaTeX","convertFromLaTeX","version","add_on","getWarnings","setConstant","constant","getConstant","getCore","getEquation","reserved","asArray","equation_number","keep_EXPRESSIONS_fixed","expressions","asObject","asLaTeX","register","core","parent_obj","visible","numargs","validVarName","varname","supported","numEquations","numExpressions","setVar","getVar","clearVars","load","loader","getVars","updateAPI","linker","replaceFunction","new_num_args","withOperator","htmlTree","addPeeker","removePeeker","BASE","MAX_INT","MAX_INT_ARR","smallToArray","LOG_MAX_INT","Integer","radix","parseValue","parseBase","BigInteger","isSmall","SmallInteger","isPrecise","arrayToSmall","compareAbs","createArray","truncate","l_a","l_b","carry","addAny","addSmall","a_l","b_l","borrow","subtractSmall","multiplyLong","a_i","multiplySmall","shiftLeft","multiplyKaratsuba","ac","bd","abcd","multiplySmallAndArray","divModSmall","divModAny","self","quotientDigit","divisorMostSignificantDigit","divMod1","guess","xlen","highx","highy","check","part","reverse","divMod2","qSign","mSign","isBasicPrime","isEven","isDivisibleBy","lesser","millerRabinTest","nPrev","modPow","subtractAny","small","l1","_multiplyBySmall","over","isZero","isPositive","isOdd","compareTo","notEquals","neq","greater","greaterOrEquals","geq","lesserOrEquals","leq","strict","bits","bitLength","logN","isProbablePrime","iterations","randBetween","modInv","lastT","lastR","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","toJSNumber","shiftRight","remQuo","and","or","xor","LOBMASK_I","roughLOB","integerLogarithm","tmp","absBase","charCodeAt","parseInt","charCode","parseBaseFromArray","digit","toBase","out","toBaseString","parseStringValue","decimalPlace","parseNumberValue","toJSON","minusOne","isInstance","low","restricted","module","exports","rounding","modulo","toExpNeg","toExpPos","minE","maxE","crypto","O","D","absoluteValue","constructor","comparedTo","cmp","cosine","sd","J","G","cubeRoot","Z","decimalPlaces","dp","dividedToIntegerBy","divToInt","greaterThanOrEqualTo","hyperbolicCosine","hyperbolicSine","hyperbolicTangent","inverseCosine","isNeg","U","inverseHyperbolicCosine","inverseHyperbolicSine","inverseHyperbolicTangent","inverseSine","inverseTangent","isPos","lessThanOrEqualTo","logarithm","T","naturalExponential","naturalLogarithm","negated","sine","squareRoot","tangent","mul","toBinary","K","toDecimalPlaces","toDP","R","toFraction","toHexadecimal","toHex","toNearest","toOctal","toPower","LN10","toPrecision","toSignificantDigits","toSD","truncated","I","H","$","search","W","X","Y","en","rn","sn","on","un","cn","an","defaults","getRandomValues","randomBytes","hn","dn","pn","gn","wn","Nn","En","yn","Mn","qn","On","Dn","Uint32Array","Fn","An","Sn","Zn","Pn","Rn","Ln","Tn","Un","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","isDecimal","hypot","log2","default","Decimal","iterator","for","toStringTag","noConflict","require$$0","SIN","COS","TAN","SEC","CSC","COT","ASIN","ACOS","ATAN","ASEC","ACSC","ACOT","SINH","COSH","TANH","CSCH","SECH","COTH","ASECH","ACSCH","ACOTH","NoIntegralFound","hasIntegral","fnTransform","double_angle","transformed","hasTrig","in_trig","in_inverse_trig","toCommonDenominator","Algebra","in_htrig","jacobian","eqns","Calculus","cMatrix","all_functions","cosAsinBtransform","cosAsinBtranform","cosAsinAtransform","cosAsinAtranform","sinAsinBtransform","trigTransform","integration_depth","max_lim_depth","__","modifier","nth","sp","derive","polydiff","df","product_rule","qdiff","x_","y_","altVal","integration","u_substitution","try_combo","do_fn_sub","poly_integrate","dc","decompose_arg","xp","dc2","new_val","by_parts","integrated","Factor","stop","partial_fraction","partial_fractions","PartFrac","partfrac","get_udv","setSymbol","dv","trig_sub","du","integral","udv","vdu","uv","integral_vdu","vdu_s","is_cyclic","original_symbol","dt","decomp","b_is_positive","unwrapAbs","L1","L2","br","sqrt_a","sqrt_ax","sqa","sqb","aob","bsqi","was_factored","degree","fx","sqComplete","u_du","ag","decomposed","a_","b_","rd","rd2","parse_str","cfsymbol","unwrapped","fn1","fn2","arg1","arg2","new_sym","p1_even","p2_even","trans","bx","sym1_is_linear","pd","pc","f_is_linear","dummy","bksub","u_transform","U2","Classes","Factors","coeffFactor","cosn","sym2_clone","sa","sb","nq","syma","symb","first","intg","defint","point","Limit","limit","interval","diverges","gin","lim_sign","gm","lim1","lim2","indeterminate","t_symbol","den_is_zero","rewriteToLog","getSubbed","isInterval","isConvergent","Simplify","_num","_den","symbol_","lim_base","lim_pow","evaluates","trial","s_arg","divergent","_lim","_symbols","Fresnel","math","Polynomial","MVTerm","terms","image","fit","c2","equalsZero","modP","up_one","dividend","mp","x1","x2","lc","monic","gcf","toPolynomial","ca","fnz","parr","quad","incl_img","dsc","squareFree","equalsNumber","toSymbol","with_order","tBase","nterm","updateCount","altVar","sameVars","groupTerms","egrouped","grouped","collectFactors","getNumberSymbolics","fo","preAdd","pFactor","is_constant","factored","count","getRevMap","rev_map","len","mapped","generateImage","getImg","mvterm","new_mvterm","toMapObj","filledArray","clss","arrSum","haveIntersection","some","subFunctions","tvar","getFunctionsSubs","proots","known_roots","get_roots","rarr","calcroots","lowest_pow","lowest_symbol","minpower","last_power","zeroi","degreePar","Degree","zeror","QuadSD_ak1","NN","iPar","calcSC_ak1","DBL_EPSILON","qk","sdPar","dumFlag","a3","a7","nextK_ak1","tFlag","qp","newest_ak1","a4","a5","b2","c3","c4","Quad_ak1","si","lr","li","QuadIT_ak1","uu","vv","calcPar","ee","omp","relstp","ui","vi","zm","qPar","triedFlag","NZ","szr","szi","lzr","lzi","RealIT_ak1","kv","pv","nm1","Fxshfr_ak1","MDP1","betas","betav","oss","ots","otv","ovv","ss","ts","tss","tv","tvv","fflag","spass","stry","vpass","vtry","svk","iFlag","degPar","bnd","ff","moduli_max","moduli_min","sc","xm","bb","xxx","jj","NM1","zerok","RADFAC","LB2","LN2","Fxshfr_Par","LO","MIN_VALUE","cosr","sinr","xx","yy","rpSolve","real","froot","newtonraph","sumProd","polyPowers","for_variable","include_negatives","ll","common","exit","n_terms","n_zeroes","_factor","_factored","quadFactor","root1","root2","cubeFactor","sign_a","sign_b","m_root_a","m_root_b","untouched","den_array","num_array","dfact","nfact","strip","unstrip","multiVar","all_S","all_unit","coeff_factors","power_factors","powerFactor","mfactor","t_factors","trialAndError","tf_symbol","t_factor","addPower","reduce","sqfr","LT","factor_array","cnst","cfactors","candidate","ltfactors","isubbed","nfactors","lc_is_neg","cnst_is_neg","factor_found","mSqfrFactor","can_divide","is_factor","sqdiff","remove_square","separated","obj_array","constants","factors2","sorted","maxes","new_factor","divided","has_fractions","neg_numeric_factor","allLinear","status","sg","appeared","every","aggregate","gcd_","gcd_m","gcd_v","gcd_p","vars_a","vars_b","multipliers","curr","denom_args","mask","results","total","fail","symbol1_has_func","symbol2_has_func","parse_funcs","quot","reconvert","get_unique_max","any","get_det","lookat","umax","is_equal","max1","max2","idx1","idx2","item1","item2","cterm","t_map","init_sort","is_larger","s1","lead_var","sf","blv","alv","checked","tt","try_better_lead_var","fdt","fnt","nd","dividend_larger","cur","line","dy","createTemplate","denom_factors","factors_vec","efactor","as_array","ofactors","nterms","dterms","ks","template","tfactors","partials","denominators","e2","complexSimp","bc","ad","cd","r1","r2","i1","i2","trigSimp","sym_array","tr","fracSimp","ratSimp","sqrtSimp","simp","patternSub","patterns","has_CP","found","collect","simplified","useAlgebraDiv","divideFn","calls","useParserDiv","_A","_C","explode","Equation","lhs","rhs","LHS","RHS","SOLVE_RADIUS","ROOTS_PER_SIDE","make_pi_conversions","STEP_SIZE","MAX_NEWTON_ITERATIONS","MAX_NON_LINEAR_TRIES","NON_LINEAR_JUMP_AT","NON_LINEAR_JUMP_SIZE","NON_LINEAR_START","NEWTON_SLICES","NEWTON_EPSILON","SOLUTION_PROXIMITY","FILTER_SOLUTIONS","MAX_SOLVE_DEPTH","ZERO_EPSILON","MAX_BISECTION_ITER","BI_SECTION_EPSILON","hasNegativeTerms","toLHS","eqn","removeDenom","_t","newRHS","solveFor","solve","setEq","checkAll","Solve","solutions","solution","es","solveCircle","svars","y_points","x_points","SOLUTIONS_AS_OBJECT","solveNonLinearSystem","tries","max_tries","halfway","iters","xn1","norm","lnorm","jump_at","jump","create_subs","max_iter","f_eqns","systemSolutions","expand_result","solveSystemBySubstitution","solveSystem","var_array","sol","reduced","knowns","all_zero","tparts","discriminant","cubic","d_o","c_o","b_o","a_o","quartic","D0","D1","divideAndConquer","solve_for","sols","csolve","getPoints","points","last_sign","rside","lside","test_side","num_roots","hits","bisection","middle","x_point","Newton","fp","maxiter","iter","x0","fx0","rewrite","sqrts","sqrtSolve","known","add_to_result","has_trig","r_is_symbol","PRE_ADD_SOLUTION","r_str","numvars","cfact","fractionals","correct_denom","is_sqrt","min_p","corrected","inverseFunctionSolve","fkeys","was_calculated","points1","points2","points3","t_points","expr_str","rw","Laplace_integration_depth","Extra","LaPlace","transform","depth_is_lower","integration_expr","inverse","s_","input_symbol","den_p","finalize","completed","tf","a_has_sin","b_has_cos","a_has_cos","b_has_sin","s_terms","fc","Statistics","frequencyMap","mean","mid","mode","freq","gVariance","variance","sampleVariance","standardDeviation","sampleStandardDeviation","zScore","stdev","Units","table","foot","meter","decimeter","formatUnicorn","_nerdamer","letters","subscriber_queue","expoOut","is_date","get_interpolator","bi","getTime","interpolators","tweened","subscribers","new_value","run_queue","subscriber","invalidate","writable","target_value","previous_task","started","delay","duration","easing","linear","interpolate","abort","promise","fulfill","loop","elapsed","event","handler","label","addEventListener","removeEventListener","input_value","calculated_value","_input_value","debounce","timer","clearTimeout","setTimeout","debouncer","animated","$$invalidate","hr","uren_per_dag","_uren_per_dag","dagen_per_week","_dagen_per_week","uren_per_week","_uren_per_week","uur","dag","week","maand","jaar","_uur","_dag","_week","_maand","_jaar","feedback","rules","entries","equations","rule","solveEquations","magic"],"mappings":"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"}